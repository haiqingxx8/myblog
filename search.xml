<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/myblog/2025/08/21/JVM%20%E7%94%9F%E4%BA%A7%E5%AE%9E%E6%88%98%20%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E5%9E%8B/"/>
      <url>/myblog/2025/08/21/JVM%20%E7%94%9F%E4%BA%A7%E5%AE%9E%E6%88%98%20%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架深度解析-从入门到精通</title>
      <link href="/myblog/2025/08/12/Spring%E6%A1%86%E6%9E%B6%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/myblog/2025/08/12/Spring%E6%A1%86%E6%9E%B6%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Spring框架作为Java企业级开发的事实标准，其重要性不言而喻。作为一名Java后端工程师，我深知Spring在整个技术栈中的核心地位。本文将深入解析Spring框架的核心概念，并结合实际项目经验，分享从入门到精通的学习路径。</p><h2 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h2><h3 id="什么是Spring？"><a href="#什么是Spring？" class="headerlink" title="什么是Spring？"></a>什么是Spring？</h3><p>Spring是一个轻量级的、开源的Java企业级应用开发框架，由Rod Johnson在2003年创建。它的核心思想是<strong>简化Java企业级应用的开发</strong>，通过提供一系列工具和最佳实践，让开发者能够专注于业务逻辑的实现。</p><h3 id="Spring的核心特性"><a href="#Spring的核心特性" class="headerlink" title="Spring的核心特性"></a>Spring的核心特性</h3><ol><li><strong>IoC（控制反转）</strong>：将对象的创建和依赖关系的管理交给Spring容器</li><li><strong>AOP（面向切面编程）</strong>：提供横切关注点的解决方案</li><li><strong>声明式事务管理</strong>：简化数据库事务的处理</li><li><strong>集成各种框架</strong>：与Hibernate、MyBatis、Redis等无缝集成</li></ol><h2 id="IoC容器深度解析"><a href="#IoC容器深度解析" class="headerlink" title="IoC容器深度解析"></a>IoC容器深度解析</h2><h3 id="IoC的核心思想"><a href="#IoC的核心思想" class="headerlink" title="IoC的核心思想"></a>IoC的核心思想</h3><p>IoC（Inversion of Control）控制反转，是Spring框架的核心概念。传统开发中，对象之间的依赖关系由对象自己创建和管理，而在IoC模式下，这些依赖关系由Spring容器统一管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式 - 紧耦合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(); <span class="comment">// 直接创建依赖对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spring IoC方式 - 松耦合</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 由Spring容器注入依赖</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><p>Spring容器中Bean的生命周期包括以下阶段：</p><ol><li><strong>实例化</strong>：创建Bean实例</li><li><strong>属性赋值</strong>：设置Bean的属性值</li><li><strong>BeanNameAware</strong>：设置Bean名称</li><li><strong>BeanFactoryAware</strong>：设置BeanFactory</li><li><strong>ApplicationContextAware</strong>：设置ApplicationContext</li><li><strong>BeanPostProcessor前置处理</strong>：在初始化之前调用</li><li><strong>@PostConstruct</strong>：执行自定义初始化方法</li><li><strong>InitializingBean</strong>：执行afterPropertiesSet方法</li><li><strong>自定义初始化方法</strong>：执行init-method指定的方法</li><li><strong>BeanPostProcessor后置处理</strong>：在初始化之后调用</li><li><strong>Bean准备就绪</strong>：Bean可以使用了</li><li><strong>@PreDestroy</strong>：执行自定义销毁方法</li><li><strong>DisposableBean</strong>：执行destroy方法</li><li><strong>自定义销毁方法</strong>：执行destroy-method指定的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, InitializingBean, DisposableBean &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanName = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;设置Bean名称: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean接口方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DisposableBean接口方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖注入详解"><a href="#依赖注入详解" class="headerlink" title="依赖注入详解"></a>依赖注入详解</h2><h3 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h3><p>Spring提供了多种依赖注入方式：</p><h4 id="1-构造器注入（推荐）"><a href="#1-构造器注入（推荐）" class="headerlink" title="1. 构造器注入（推荐）"></a>1. 构造器注入（推荐）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EmailService emailService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器注入，推荐使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao, EmailService emailService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">        <span class="built_in">this</span>.emailService = emailService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userDao.save(user);</span><br><span class="line">        emailService.sendWelcomeEmail(user.getEmail());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Setter注入"><a href="#2-Setter注入" class="headerlink" title="2. Setter注入"></a>2. Setter注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmailService</span><span class="params">(EmailService emailService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.emailService = emailService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-字段注入（不推荐）"><a href="#3-字段注入（不推荐）" class="headerlink" title="3. 字段注入（不推荐）"></a>3. 字段注入（不推荐）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么推荐构造器注入？"><a href="#为什么推荐构造器注入？" class="headerlink" title="为什么推荐构造器注入？"></a>为什么推荐构造器注入？</h3><ol><li><strong>不可变性</strong>：依赖关系在对象创建时就确定，不可变</li><li><strong>循环依赖检测</strong>：Spring可以在启动时检测循环依赖</li><li><strong>测试友好</strong>：便于单元测试时注入Mock对象</li><li><strong>编译时检查</strong>：确保所有必需的依赖都已提供</li></ol><h2 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h2><h3 id="AOP的核心概念"><a href="#AOP的核心概念" class="headerlink" title="AOP的核心概念"></a>AOP的核心概念</h3><p>AOP（Aspect-Oriented Programming）面向切面编程，用于处理横切关注点，如日志、事务、安全等。</p><h4 id="核心术语"><a href="#核心术语" class="headerlink" title="核心术语"></a>核心术语</h4><ul><li><strong>Aspect（切面）</strong>：横切关注点的模块化</li><li><strong>Join Point（连接点）</strong>：程序执行过程中的某个特定点</li><li><strong>Pointcut（切点）</strong>：匹配连接点的表达式</li><li><strong>Advice（通知）</strong>：在切点处要执行的代码</li><li><strong>Target Object（目标对象）</strong>：被代理的对象</li></ul><h3 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h3><h4 id="1-日志切面"><a href="#1-日志切面" class="headerlink" title="1. 日志切面"></a>1. 日志切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LoggingAspect.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义切点：所有Service层的方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serviceMethods</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前置通知：方法执行前记录日志</span></span><br><span class="line">    <span class="meta">@Before(&quot;serviceMethods()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getSimpleName();</span><br><span class="line">        logger.info(<span class="string">&quot;执行方法: &#123;&#125;.&#123;&#125;&quot;</span>, className, methodName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后置通知：方法执行后记录日志</span></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;serviceMethods()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        logger.info(<span class="string">&quot;方法 &#123;&#125; 执行成功，返回值: &#123;&#125;&quot;</span>, methodName, result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异常通知：方法抛出异常时记录日志</span></span><br><span class="line">    <span class="meta">@AfterThrowing(pointcut = &quot;serviceMethods()&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfterThrowing</span><span class="params">(JoinPoint joinPoint, Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        logger.error(<span class="string">&quot;方法 &#123;&#125; 执行异常: &#123;&#125;&quot;</span>, methodName, ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-性能监控切面"><a href="#2-性能监控切面" class="headerlink" title="2. 性能监控切面"></a>2. 性能监控切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerformanceAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(PerformanceAspect.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(com.example.annotation.Monitor)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">monitorPerformance</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span> endTime - startTime;</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">            logger.info(<span class="string">&quot;方法 &#123;&#125; 执行耗时: &#123;&#125;ms&quot;</span>, methodName, duration);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span> endTime - startTime;</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">            logger.error(<span class="string">&quot;方法 &#123;&#125; 执行异常，耗时: &#123;&#125;ms&quot;</span>, methodName, duration);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot自动配置原理"><a href="#Spring-Boot自动配置原理" class="headerlink" title="Spring Boot自动配置原理"></a>Spring Boot自动配置原理</h2><h3 id="SpringBootApplication注解"><a href="#SpringBootApplication注解" class="headerlink" title="@SpringBootApplication注解"></a>@SpringBootApplication注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SpringBootApplication</code>是一个复合注解，包含：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p>Spring Boot的自动配置基于以下机制：</p><ol><li><strong>@EnableAutoConfiguration</strong>：启用自动配置</li><li><strong>@ConditionalOnXXX</strong>：条件注解，决定是否创建Bean</li><li><strong>spring.factories</strong>：自动配置类的注册文件</li><li><strong>@ConfigurationProperties</strong>：配置属性绑定</li></ol><h4 id="自定义自动配置示例"><a href="#自定义自动配置示例" class="headerlink" title="自定义自动配置示例"></a>自定义自动配置示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DataSource.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(DatabaseProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseAutoConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(DatabaseProperties properties)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create()</span><br><span class="line">                .url(properties.getUrl())</span><br><span class="line">                .username(properties.getUsername())</span><br><span class="line">                .password(properties.getPassword())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;app.database&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际项目经验分享"><a href="#实际项目经验分享" class="headerlink" title="实际项目经验分享"></a>实际项目经验分享</h2><h3 id="1-项目架构设计"><a href="#1-项目架构设计" class="headerlink" title="1. 项目架构设计"></a>1. 项目架构设计</h3><p>在大型项目中，合理的分层架构至关重要：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">com.example.project/</span><br><span class="line">├── controller/          # 控制器层</span><br><span class="line">├── service/            # 业务逻辑层</span><br><span class="line">├── repository/         # 数据访问层</span><br><span class="line">├── entity/            # 实体类</span><br><span class="line">├── dto/               # 数据传输对象</span><br><span class="line">├── config/            # 配置类</span><br><span class="line">├── aspect/            # 切面类</span><br><span class="line">├── util/              # 工具类</span><br><span class="line">└── exception/         # 异常处理</span><br></pre></td></tr></table></figure><h3 id="2-事务管理最佳实践"><a href="#2-事务管理最佳实践" class="headerlink" title="2. 事务管理最佳实践"></a>2. 事务管理最佳实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InventoryService inventoryService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用事务确保数据一致性</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">createOrder</span><span class="params">(OrderRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 检查库存</span></span><br><span class="line">        inventoryService.checkStock(request.getProductId(), request.getQuantity());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 创建订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUserId(request.getUserId());</span><br><span class="line">        order.setProductId(request.getProductId());</span><br><span class="line">        order.setQuantity(request.getQuantity());</span><br><span class="line">        order.setStatus(OrderStatus.PENDING);</span><br><span class="line">        </span><br><span class="line">        order = orderRepository.save(order);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 处理支付</span></span><br><span class="line">        paymentService.processPayment(order.getId(), request.getPaymentInfo());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 更新库存</span></span><br><span class="line">        inventoryService.updateStock(request.getProductId(), request.getQuantity());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 更新订单状态</span></span><br><span class="line">        order.setStatus(OrderStatus.CONFIRMED);</span><br><span class="line">        <span class="keyword">return</span> orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-异常处理策略"><a href="#3-异常处理策略" class="headerlink" title="3. 异常处理策略"></a>3. 异常处理策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleBusinessException</span><span class="params">(BusinessException ex)</span> &#123;</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>();</span><br><span class="line">        error.setCode(<span class="string">&quot;BUSINESS_ERROR&quot;</span>);</span><br><span class="line">        error.setMessage(ex.getMessage());</span><br><span class="line">        error.setTimestamp(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().body(error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleGenericException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>();</span><br><span class="line">        error.setCode(<span class="string">&quot;INTERNAL_ERROR&quot;</span>);</span><br><span class="line">        error.setMessage(<span class="string">&quot;系统内部错误&quot;</span>);</span><br><span class="line">        error.setTimestamp(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="性能优化技巧"><a href="#性能优化技巧" class="headerlink" title="性能优化技巧"></a>性能优化技巧</h2><h3 id="1-Bean作用域优化"><a href="#1-Bean作用域优化" class="headerlink" title="1. Bean作用域优化"></a>1. Bean作用域优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例Bean（默认）- 适用于无状态服务</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 无状态，线程安全</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型Bean - 适用于有状态对象</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserSession</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime loginTime;</span><br><span class="line">    <span class="comment">// 有状态，每次获取都是新实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-懒加载优化"><a href="#2-懒加载优化" class="headerlink" title="2. 懒加载优化"></a>2. 懒加载优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeavyService</span> &#123;</span><br><span class="line">    <span class="comment">// 只有在被使用时才会初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHeavyWork</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 耗时操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-缓存策略"><a href="#3-缓存策略" class="headerlink" title="3. 缓存策略"></a>3. 缓存策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;products&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProductById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法结果会被缓存</span></span><br><span class="line">        <span class="keyword">return</span> productRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;products&quot;, key = &quot;#product.id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateProduct</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">        <span class="comment">// 更新时清除缓存</span></span><br><span class="line">        productRepository.save(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><h3 id="1-学习路径"><a href="#1-学习路径" class="headerlink" title="1. 学习路径"></a>1. 学习路径</h3><ol><li><strong>基础阶段</strong>：理解IoC和DI概念</li><li><strong>进阶阶段</strong>：掌握AOP和事务管理</li><li><strong>高级阶段</strong>：深入Spring Boot自动配置</li><li><strong>实战阶段</strong>：参与实际项目开发</li></ol><h3 id="2-推荐资源"><a href="#2-推荐资源" class="headerlink" title="2. 推荐资源"></a>2. 推荐资源</h3><ul><li><strong>官方文档</strong>：<a href="https://spring.io/projects/spring-framework">Spring Framework Documentation</a></li><li><strong>Spring Boot指南</strong>：<a href="https://spring.io/projects/spring-boot">Spring Boot Reference Documentation</a></li><li><strong>实战书籍</strong>：《Spring实战》、《Spring Boot实战》</li></ul><h3 id="3-实践项目"><a href="#3-实践项目" class="headerlink" title="3. 实践项目"></a>3. 实践项目</h3><ul><li>个人博客系统</li><li>电商订单系统</li><li>用户权限管理系统</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring框架的学习是一个渐进的过程，需要理论与实践相结合。通过深入理解IoC、AOP等核心概念，结合实际项目经验，才能真正掌握Spring的精髓。</p><h3 id="关键要点"><a href="#关键要点" class="headerlink" title="关键要点"></a>关键要点</h3><ol><li><strong>IoC是Spring的核心</strong>：理解控制反转的思想</li><li><strong>AOP解决横切关注点</strong>：日志、事务、安全等</li><li><strong>Spring Boot简化配置</strong>：自动配置和约定优于配置</li><li><strong>实践是最好的老师</strong>：多动手，多思考</li></ol><hr><p><em>感谢阅读！如果你有任何问题或建议，欢迎在评论区留言交流。</em></p><blockquote><p><strong>Spring框架的学习没有捷径，唯有持续实践和深入思考，才能真正掌握其精髓。</strong></p></blockquote><!-- 本文涵盖了Spring框架的核心概念和实际应用，适合Java开发者深入学习。 --> ]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring </tag>
            
            <tag> IoC </tag>
            
            <tag> AOP </tag>
            
            <tag> 依赖注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次线上事故复盘：事务传播机制没设好导致数据异常</title>
      <link href="/myblog/2023/11/10/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6%E6%B2%A1%E8%AE%BE%E5%A5%BD%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8/"/>
      <url>/myblog/2023/11/10/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98%EF%BC%9A%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6%E6%B2%A1%E8%AE%BE%E5%A5%BD%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个电商系统的订单支付模块中</span></span><br><span class="line"><span class="comment">// 我们实现了一个支付完成后的订单处理流程</span></span><br><span class="line"><span class="comment">// 包含订单状态更新、库存扣减、积分增加等多个子操作</span></span><br><span class="line"><span class="comment">// 看似简单的业务逻辑，却因为事务传播机制配置不当</span></span><br><span class="line"><span class="comment">// 导致了一场严重的线上数据异常事故</span></span><br></pre></td></tr></table></figure><h2 id="事故现象"><a href="#事故现象" class="headerlink" title="事故现象"></a>事故现象</h2><p>某天上午10点左右，客服开始陆续接到用户反馈：支付成功后订单状态未更新，但库存已扣减，且用户积分未增加。初步排查发现，大约有3%的订单出现了类似问题，这些订单主要集中在系统高峰期处理的订单中。</p><p>更严重的是，部分订单虽然支付成功，但由于订单状态未更新，系统自动触发了退款流程，导致用户被重复扣款和退款，引发了一系列客诉。</p><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><h3 id="1-日志分析"><a href="#1-日志分析" class="headerlink" title="1. 日志分析"></a>1. 日志分析</h3><p>首先，我们查看了问题订单的处理日志，发现一个共同点：这些订单在处理过程中都抛出了一个被捕获的异常，但异常后的业务流程仍然部分执行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span>-<span class="number">11</span>-<span class="number">05</span> 09:<span class="number">47</span>:<span class="number">32.145</span> [http-nio-<span class="number">8080</span>-exec-<span class="number">5</span>] ERROR c.e.o.s.OrderServiceImpl - 处理订单支付结果异常: 库存服务暂时不可用</span><br><span class="line">java.net.ConnectException: Connection refused: connect</span><br><span class="line">    at java.net.DualStackPlainSocketImpl.connect0(Native Method)</span><br><span class="line">    at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:<span class="number">79</span>)</span><br><span class="line">    ...</span><br><span class="line"><span class="number">2023</span>-<span class="number">11</span>-<span class="number">05</span> 09:<span class="number">47</span>:<span class="number">32.156</span> [http-nio-<span class="number">8080</span>-exec-<span class="number">5</span>] INFO c.e.o.s.OrderServiceImpl - 订单[<span class="number">1234567</span>]状态更新成功</span><br><span class="line"><span class="number">2023</span>-<span class="number">11</span>-<span class="number">05</span> 09:<span class="number">47</span>:<span class="number">32.158</span> [http-nio-<span class="number">8080</span>-exec-<span class="number">5</span>] INFO c.e.o.s.PointServiceImpl - 用户[user_123]积分增加成功</span><br></pre></td></tr></table></figure><h3 id="2-代码审查"><a href="#2-代码审查" class="headerlink" title="2. 代码审查"></a>2. 代码审查</h3><p>进一步审查代码，我们发现问题出在订单支付完成后的处理流程中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InventoryService inventoryService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PointService pointService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePaymentSuccess</span><span class="params">(String orderNo, BigDecimal amount)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 更新订单状态</span></span><br><span class="line">            orderService.updateOrderStatus(orderNo, OrderStatus.PAID);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 扣减库存</span></span><br><span class="line">            inventoryService.deductInventory(orderNo);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 增加用户积分</span></span><br><span class="line">            pointService.increasePoints(orderNo, amount);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;处理订单支付结果异常: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="comment">// 这里只是记录了异常，但没有重新抛出！</span></span><br><span class="line">            <span class="comment">// 导致事务无法回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在被调用的服务中，事务配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOrderStatus</span><span class="params">(String orderNo, OrderStatus status)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectByOrderNo(orderNo);</span><br><span class="line">        order.setStatus(status);</span><br><span class="line">        order.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        orderMapper.updateByPrimaryKey(order);</span><br><span class="line">        log.info(<span class="string">&quot;订单[&#123;&#125;]状态更新成功&quot;</span>, orderNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InventoryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">InventoryService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 注意：这里没有事务注解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductInventory</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用库存服务扣减库存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://inventory-service/api/inventory/deduct?orderNo=&quot;</span> + orderNo;</span><br><span class="line">        ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(url, String.class);</span><br><span class="line">        <span class="keyword">if</span> (!response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;库存服务暂时不可用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PointService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PointMapper pointMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increasePoints</span><span class="params">(String orderNo, BigDecimal amount)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据订单号查询用户ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> getUserIdByOrderNo(orderNo);</span><br><span class="line">        <span class="comment">// 计算积分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">points</span> <span class="operator">=</span> amount.intValue();</span><br><span class="line">        <span class="comment">// 增加积分</span></span><br><span class="line">        pointMapper.increasePoints(userId, points);</span><br><span class="line">        log.info(<span class="string">&quot;用户[&#123;&#125;]积分增加成功&quot;</span>, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题根因"><a href="#问题根因" class="headerlink" title="问题根因"></a>问题根因</h2><p>通过分析，我们找到了导致数据异常的根本原因：</p><ol><li><p><strong>事务传播机制配置不当</strong>：</p><ul><li><code>OrderService.updateOrderStatus</code>方法使用了<code>REQUIRES_NEW</code>传播机制，这意味着它会启动一个新的事务，与调用者的事务完全隔离。</li><li><code>PointService.increasePoints</code>方法使用了<code>REQUIRED</code>传播机制，它会加入调用者的事务。</li><li><code>InventoryService.deductInventory</code>方法没有事务注解，但它通过REST调用了另一个服务，这个调用不在事务控制范围内。</li></ul></li><li><p><strong>异常处理不当</strong>：</p><ul><li><code>PaymentServiceImpl.handlePaymentSuccess</code>方法捕获了异常但没有重新抛出，导致事务无法回滚。</li><li>当库存服务调用失败时，抛出的异常被捕获并记录，但事务继续执行。</li></ul></li><li><p><strong>事务回滚行为</strong>：</p><ul><li>由于<code>OrderService.updateOrderStatus</code>使用了<code>REQUIRES_NEW</code>，即使外部事务因异常回滚，这个方法的事务也已经提交，不会回滚。</li><li>库存服务的调用不在事务控制范围内，无法回滚。</li><li><code>PointService.increasePoints</code>使用了<code>REQUIRED</code>，会随着外部事务的回滚而回滚，但由于外部事务捕获了异常且没有重新抛出，所以事务并未回滚。</li></ul></li></ol><p>这就导致了一个非常严重的数据不一致问题：</p><ul><li>订单状态已更新为已支付（因为使用了<code>REQUIRES_NEW</code>，事务已提交）</li><li>库存已扣减（通过REST调用，不在事务控制范围内）</li><li>用户积分未增加（因为在库存服务调用失败后，方法抛出异常，但被捕获且未重新抛出，所以事务继续执行）</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-修正事务传播机制"><a href="#1-修正事务传播机制" class="headerlink" title="1. 修正事务传播机制"></a>1. 修正事务传播机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InventoryService inventoryService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PointService pointService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePaymentSuccess</span><span class="params">(String orderNo, BigDecimal amount)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 更新订单状态</span></span><br><span class="line">            orderService.updateOrderStatus(orderNo, OrderStatus.PAID);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 扣减库存</span></span><br><span class="line">            inventoryService.deductInventory(orderNo);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 增加用户积分</span></span><br><span class="line">            pointService.increasePoints(orderNo, amount);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;处理订单支付结果异常: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="comment">// 重新抛出异常，确保事务回滚</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;处理支付结果失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span> <span class="comment">// 修改为REQUIRED</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOrderStatus</span><span class="params">(String orderNo, OrderStatus status)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectByOrderNo(orderNo);</span><br><span class="line">        order.setStatus(status);</span><br><span class="line">        order.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        orderMapper.updateByPrimaryKey(order);</span><br><span class="line">        log.info(<span class="string">&quot;订单[&#123;&#125;]状态更新成功&quot;</span>, orderNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InventoryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">InventoryService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span> <span class="comment">// 添加事务注解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductInventory</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用库存服务扣减库存</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://inventory-service/api/inventory/deduct?orderNo=&quot;</span> + orderNo;</span><br><span class="line">            ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(url, String.class);</span><br><span class="line">            <span class="keyword">if</span> (!response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;库存服务调用失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;调用库存服务异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;库存服务暂时不可用&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-引入分布式事务"><a href="#2-引入分布式事务" class="headerlink" title="2. 引入分布式事务"></a>2. 引入分布式事务</h3><p>对于跨服务的操作，我们引入了Seata来处理分布式事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InventoryService inventoryService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PointService pointService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GlobalTransactional</span> <span class="comment">// 使用Seata的全局事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePaymentSuccess</span><span class="params">(String orderNo, BigDecimal amount)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 更新订单状态</span></span><br><span class="line">        orderService.updateOrderStatus(orderNo, OrderStatus.PAID);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 扣减库存</span></span><br><span class="line">        inventoryService.deductInventory(orderNo);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 增加用户积分</span></span><br><span class="line">        pointService.increasePoints(orderNo, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实现补偿机制"><a href="#3-实现补偿机制" class="headerlink" title="3. 实现补偿机制"></a>3. 实现补偿机制</h3><p>对于无法使用分布式事务的场景，我们实现了基于消息队列的补偿机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePaymentSuccess</span><span class="params">(String orderNo, BigDecimal amount)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 更新订单状态</span></span><br><span class="line">        orderService.updateOrderStatus(orderNo, OrderStatus.PAID);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 发送消息到库存服务和积分服务</span></span><br><span class="line">        <span class="type">PaymentSuccessEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentSuccessEvent</span>(orderNo, amount);</span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;payment-success-topic&quot;</span>, JSON.toJSONString(event));</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;订单[&#123;&#125;]支付成功事件已发送&quot;</span>, orderNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 库存服务消费者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InventoryConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InventoryService inventoryService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;payment-success-topic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePaymentSuccess</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">PaymentSuccessEvent</span> <span class="variable">event</span> <span class="operator">=</span> JSON.parseObject(message, PaymentSuccessEvent.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inventoryService.deductInventory(event.getOrderNo());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;扣减库存失败，将重试&quot;</span>, e);</span><br><span class="line">            <span class="comment">// 记录失败，后续通过定时任务重试</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 积分服务消费者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PointService pointService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;payment-success-topic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePaymentSuccess</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">PaymentSuccessEvent</span> <span class="variable">event</span> <span class="operator">=</span> JSON.parseObject(message, PaymentSuccessEvent.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pointService.increasePoints(event.getOrderNo(), event.getAmount());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;增加积分失败，将重试&quot;</span>, e);</span><br><span class="line">            <span class="comment">// 记录失败，后续通过定时任务重试</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务传播机制详解"><a href="#事务传播机制详解" class="headerlink" title="事务传播机制详解"></a>事务传播机制详解</h2><p>这次事故让我们深刻认识到正确理解和使用Spring事务传播机制的重要性。以下是Spring提供的7种事务传播行为：</p><h3 id="1-REQUIRED（默认）"><a href="#1-REQUIRED（默认）" class="headerlink" title="1. REQUIRED（默认）"></a>1. REQUIRED（默认）</h3><p>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 如果没有事务，创建一个新事务</span></span><br><span class="line">    <span class="comment">// 如果已有事务，加入该事务</span></span><br><span class="line">    methodB(); <span class="comment">// 假设methodB也是REQUIRED</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-REQUIRES-NEW"><a href="#2-REQUIRES-NEW" class="headerlink" title="2. REQUIRES_NEW"></a>2. REQUIRES_NEW</h3><p>创建一个新的事务，如果当前存在事务，则把当前事务挂起。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 外部事务</span></span><br><span class="line">    methodB(); <span class="comment">// 内部事务，与外部事务隔离</span></span><br><span class="line">    <span class="comment">// 如果methodB异常但被捕获，methodA的事务不受影响</span></span><br><span class="line">    <span class="comment">// 如果methodA异常，methodB的事务已提交，不会回滚</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 总是创建新事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-NESTED"><a href="#3-NESTED" class="headerlink" title="3. NESTED"></a>3. NESTED</h3><p>如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则等价于REQUIRED。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 外部事务</span></span><br><span class="line">    methodB(); <span class="comment">// 内部事务，作为外部事务的嵌套事务</span></span><br><span class="line">    <span class="comment">// 如果methodB异常但被捕获，可以通过设置保存点回滚methodB的操作，而不影响methodA</span></span><br><span class="line">    <span class="comment">// 如果methodA异常，methodB的事务也会回滚</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.NESTED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建嵌套事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-SUPPORTS"><a href="#4-SUPPORTS" class="headerlink" title="4. SUPPORTS"></a>4. SUPPORTS</h3><p>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</p><h3 id="5-NOT-SUPPORTED"><a href="#5-NOT-SUPPORTED" class="headerlink" title="5. NOT_SUPPORTED"></a>5. NOT_SUPPORTED</h3><p>以非事务方式运行，如果当前存在事务，则把当前事务挂起。</p><h3 id="6-NEVER"><a href="#6-NEVER" class="headerlink" title="6. NEVER"></a>6. NEVER</h3><p>以非事务方式运行，如果当前存在事务，则抛出异常。</p><h3 id="7-MANDATORY"><a href="#7-MANDATORY" class="headerlink" title="7. MANDATORY"></a>7. MANDATORY</h3><p>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</p><h2 id="事务传播机制选择建议"><a href="#事务传播机制选择建议" class="headerlink" title="事务传播机制选择建议"></a>事务传播机制选择建议</h2><p>基于这次事故的经验，我们总结了以下事务传播机制选择建议：</p><ol><li><p><strong>默认使用REQUIRED</strong>：大多数情况下，REQUIRED是最合适的选择，它能确保业务操作在同一个事务中。</p></li><li><p><strong>慎用REQUIRES_NEW</strong>：只有在确实需要独立事务且不关心外部事务状态的情况下才使用，例如记录操作日志。</p></li><li><p><strong>考虑使用NESTED</strong>：当需要对某些操作单独回滚但又不想影响外部事务时，NESTED是比REQUIRES_NEW更好的选择。</p></li><li><p><strong>避免捕获异常后不处理</strong>：如果在事务方法中捕获异常，要么重新抛出，要么明确标记回滚。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodWithException</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;异常&quot;</span>, e);</span><br><span class="line">        <span class="comment">// 1. 重新抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 或者 2. 明确标记回滚</span></span><br><span class="line">        <span class="comment">// TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>分布式事务场景</strong>：对于跨服务调用，考虑使用分布式事务框架或基于消息的最终一致性方案。</li></ol><h2 id="事故复盘与总结"><a href="#事故复盘与总结" class="headerlink" title="事故复盘与总结"></a>事故复盘与总结</h2><h3 id="事故影响"><a href="#事故影响" class="headerlink" title="事故影响"></a>事故影响</h3><ol><li>约500个订单出现数据不一致</li><li>客服接到约200个相关投诉</li><li>紧急修复和数据修复耗时约4小时</li></ol><h3 id="改进措施"><a href="#改进措施" class="headerlink" title="改进措施"></a>改进措施</h3><ol><li><p><strong>代码层面</strong>：</p><ul><li>修正事务传播机制配置</li><li>完善异常处理逻辑</li><li>引入分布式事务或补偿机制</li></ul></li><li><p><strong>流程层面</strong>：</p><ul><li>增加代码审查环节，重点关注事务配置</li><li>建立事务使用规范文档</li><li>完善测试用例，增加异常场景测试</li></ul></li><li><p><strong>监控层面</strong>：</p><ul><li>增加数据一致性监控</li><li>建立异常订单自动预警机制</li><li>完善日志记录，便于问题定位</li></ul></li></ol><h3 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h3><ol><li><p><strong>理解技术原理</strong>：使用框架功能前，必须深入理解其原理和行为。</p></li><li><p><strong>异常处理很重要</strong>：在事务中，异常处理直接关系到数据一致性。</p></li><li><p><strong>测试要全面</strong>：测试不应只关注正常流程，异常流程同样重要。</p></li><li><p><strong>监控要到位</strong>：及时发现问题比事后修复更重要。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这次事故教会我们</span></span><br><span class="line"><span class="comment">// 框架提供的便利背后，隐藏着复杂的实现机制</span></span><br><span class="line"><span class="comment">// 不理解这些机制，就可能在看似简单的配置中埋下隐患</span></span><br><span class="line"><span class="comment">// 正确理解和使用事务传播机制，是保证数据一致性的关键</span></span><br></pre></td></tr></table></figure><h2 id="附录：常见事务问题及解决方案"><a href="#附录：常见事务问题及解决方案" class="headerlink" title="附录：常见事务问题及解决方案"></a>附录：常见事务问题及解决方案</h2><h3 id="1-事务不生效"><a href="#1-事务不生效" class="headerlink" title="1. 事务不生效"></a>1. 事务不生效</h3><p>常见原因：</p><ul><li>方法不是public</li><li>类内部调用（Spring AOP的限制）</li><li>未被Spring管理</li><li>数据库不支持事务</li></ul><p>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例：内部调用导致事务不生效</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接调用，事务不生效</span></span><br><span class="line">        methodB();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 事务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService self; <span class="comment">// 注入自身</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 通过代理对象调用，事务生效</span></span><br><span class="line">        self.methodB();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 事务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-事务回滚问题"><a href="#2-事务回滚问题" class="headerlink" title="2. 事务回滚问题"></a>2. 事务回滚问题</h3><p>常见原因：</p><ul><li>捕获异常后未重新抛出</li><li>抛出的异常不是RuntimeException或Error</li><li>rollbackFor配置不当</li></ul><p>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例：checked异常不会触发回滚</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodWithCheckedException</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;IO异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodWithCheckedException</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;IO异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-事务超时问题"><a href="#3-事务超时问题" class="headerlink" title="3. 事务超时问题"></a>3. 事务超时问题</h3><p>常见原因：</p><ul><li>事务执行时间过长</li><li>死锁或锁等待</li></ul><p>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置事务超时时间</span></span><br><span class="line"><span class="meta">@Transactional(timeout = 30)</span> <span class="comment">// 30秒超时</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">longRunningMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 长时间运行的业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这次事故，我们深刻认识到事务管理的重要性和复杂性。正确理解和使用Spring事务传播机制，是保证系统数据一致性的关键。希望这次的经验分享能帮助更多开发者避免类似的坑。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 事故复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑记录 </tag>
            
            <tag> 事务管理 </tag>
            
            <tag> Spring </tag>
            
            <tag> 线上事故 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST API设计中常见的五个坑</title>
      <link href="/myblog/2023/10/20/REST%20API%E8%AE%BE%E8%AE%A1%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BA%94%E4%B8%AA%E5%9D%91/"/>
      <url>/myblog/2023/10/20/REST%20API%E8%AE%BE%E8%AE%A1%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BA%94%E4%B8%AA%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个微服务架构项目中</span></span><br><span class="line"><span class="comment">// 我们负责设计和实现核心业务的RESTful API</span></span><br><span class="line"><span class="comment">// 随着项目规模扩大，API数量激增</span></span><br><span class="line"><span class="comment">// 一些早期的设计决策开始显现问题</span></span><br><span class="line"><span class="comment">// 本文总结了我们在REST API设计中遇到的五个常见坑及解决方案</span></span><br></pre></td></tr></table></figure><h2 id="坑一：URI中使用动词而非名词"><a href="#坑一：URI中使用动词而非名词" class="headerlink" title="坑一：URI中使用动词而非名词"></a>坑一：URI中使用动词而非名词</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在RESTful设计中，URI应该使用名词而非动词，表示资源而非行为。然而，很多开发者习惯于将API设计成过程调用的形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line">GET /api/getUsers</span><br><span class="line">POST /api/createOrder</span><br><span class="line">DELETE /api/deleteProduct/<span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line">GET /api/users</span><br><span class="line">POST /api/orders</span><br><span class="line">DELETE /api/products/<span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h3><p>这个问题通常源于开发者将API端点视为函数调用，而非资源操作。特别是有RPC开发背景的团队，更容易犯这个错误。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>使用名词表示资源</strong>：API路径应该使用复数名词表示资源集合</li><li><strong>使用HTTP方法表示操作</strong>：GET(查询)、POST(创建)、PUT&#x2F;PATCH(更新)、DELETE(删除)</li><li><strong>使用子资源表示关系</strong>：<code>/orders/&#123;orderId&#125;/items</code>表示特定订单的所有商品</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 资源设计示例</span></span><br><span class="line">GET /api/users                <span class="comment">// 获取用户列表</span></span><br><span class="line">GET /api/users/&#123;id&#125;          <span class="comment">// 获取特定用户</span></span><br><span class="line">POST /api/users              <span class="comment">// 创建新用户</span></span><br><span class="line">PUT /api/users/&#123;id&#125;          <span class="comment">// 更新用户全部信息</span></span><br><span class="line">PATCH /api/users/&#123;id&#125;        <span class="comment">// 更新用户部分信息</span></span><br><span class="line">DELETE /api/users/&#123;id&#125;       <span class="comment">// 删除用户</span></span><br><span class="line">GET /api/users/&#123;id&#125;/orders   <span class="comment">// 获取用户的订单列表</span></span><br></pre></td></tr></table></figure><h2 id="坑二：不恰当的HTTP状态码使用"><a href="#坑二：不恰当的HTTP状态码使用" class="headerlink" title="坑二：不恰当的HTTP状态码使用"></a>坑二：不恰当的HTTP状态码使用</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>许多API设计者习惯于总是返回200状态码，然后在响应体中包含自定义的状态码和错误信息，这违背了HTTP协议的语义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例：总是返回200，在响应体中包含状态</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">40001</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;用户未认证&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例：使用适当的HTTP状态码</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">401</span> Unauthorized</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;用户未认证&quot;</span>,</span><br><span class="line">  <span class="string">&quot;details&quot;</span>: <span class="string">&quot;请提供有效的认证令牌&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题根源-1"><a href="#问题根源-1" class="headerlink" title="问题根源"></a>问题根源</h3><p>这种做法通常源于以下原因：</p><ol><li>开发者对HTTP状态码不够熟悉</li><li>前端开发者希望统一错误处理逻辑</li><li>某些早期框架或网络环境对非200响应处理不友好</li></ol><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p><strong>正确使用HTTP状态码</strong>：</p><ul><li>2xx：成功</li><li>3xx：重定向</li><li>4xx：客户端错误</li><li>5xx：服务器错误</li></ul></li><li><p><strong>常用状态码参考</strong>：</p><ul><li>200 OK：请求成功</li><li>201 Created：资源创建成功</li><li>204 No Content：请求成功但无返回内容</li><li>400 Bad Request：请求参数错误</li><li>401 Unauthorized：未认证</li><li>403 Forbidden：无权限</li><li>404 Not Found：资源不存在</li><li>409 Conflict：资源冲突</li><li>500 Internal Server Error：服务器错误</li></ul></li><li><p><strong>在响应体中提供详细错误信息</strong>：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误响应的标准格式</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">400</span> Bad Request</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;error&quot;</span>: <span class="string">&quot;ValidationError&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;请求参数验证失败&quot;</span>,</span><br><span class="line">  <span class="string">&quot;details&quot;</span>: [</span><br><span class="line">    &#123; <span class="string">&quot;field&quot;</span>: <span class="string">&quot;email&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;无效的邮箱格式&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;field&quot;</span>: <span class="string">&quot;age&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;年龄必须大于18&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="坑三：忽略API版本控制"><a href="#坑三：忽略API版本控制" class="headerlink" title="坑三：忽略API版本控制"></a>坑三：忽略API版本控制</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>随着业务发展，API不可避免地需要变更。如果没有合理的版本控制策略，API变更将直接影响现有客户端，导致系统不稳定。</p><h3 id="问题根源-2"><a href="#问题根源-2" class="headerlink" title="问题根源"></a>问题根源</h3><p>在项目初期，团队往往关注功能实现而忽略长期维护性，没有预见到API演进的需求。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>URI路径版本</strong>：在URI中包含版本号</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/api/v1/users</span><br><span class="line">/api/v2/users</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>请求头版本</strong>：使用自定义HTTP头指定版本</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept: application/vnd.company.app-v1+json</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>查询参数版本</strong>：通过查询参数指定版本</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/users?version=1</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>版本控制最佳实践</strong>：<ul><li>保持向后兼容性</li><li>合理规划版本更新周期</li><li>提供版本迁移指南</li><li>设置版本弃用策略和时间表</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring Boot中的版本控制示例</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserControllerV1</span> &#123;</span><br><span class="line">    <span class="comment">// V1版本的API实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v2/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserControllerV2</span> &#123;</span><br><span class="line">    <span class="comment">// V2版本的API实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="坑四：不一致的数据格式和命名规范"><a href="#坑四：不一致的数据格式和命名规范" class="headerlink" title="坑四：不一致的数据格式和命名规范"></a>坑四：不一致的数据格式和命名规范</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>API设计中的不一致性会大大增加客户端开发的复杂度，常见的不一致包括：</p><ol><li>混用驼峰命名(camelCase)和蛇形命名(snake_case)</li><li>不同端点返回不同的错误格式</li><li>相同概念使用不同的字段名</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不一致的命名示例</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;userId&quot;</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="string">&quot;user_name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="string">&quot;UserEmail&quot;</span>: <span class="string">&quot;zhangsan@example.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不一致的日期格式</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span>: <span class="string">&quot;2023-10-15T08:30:00Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;updateTime&quot;</span>: <span class="number">1697358600000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题根源-3"><a href="#问题根源-3" class="headerlink" title="问题根源"></a>问题根源</h3><p>这通常是由于缺乏API设计规范，或团队成员之间没有充分沟通导致的。</p><h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p><strong>制定API设计规范</strong>：</p><ul><li>统一命名风格（推荐使用camelCase或snake_case，但不要混用）</li><li>统一日期&#x2F;时间格式（推荐ISO 8601标准：<code>YYYY-MM-DDTHH:mm:ssZ</code>）</li><li>统一错误响应格式</li></ul></li><li><p><strong>使用API设计工具和规范</strong>：</p><ul><li>OpenAPI&#x2F;Swagger规范</li><li>API Blueprint</li><li>RAML</li></ul></li><li><p><strong>实现示例</strong>：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统一的命名规范(使用camelCase)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;userId&quot;</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userEmail&quot;</span>: <span class="string">&quot;zhangsan@example.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;createdAt&quot;</span>: <span class="string">&quot;2023-10-15T08:30:00Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;updatedAt&quot;</span>: <span class="string">&quot;2023-10-15T10:45:00Z&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一的错误响应格式</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;error&quot;</span>: <span class="string">&quot;ResourceNotFound&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;请求的资源不存在&quot;</span>,</span><br><span class="line">  <span class="string">&quot;details&quot;</span>: <span class="string">&quot;用户ID 123不存在&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;2023-10-15T08:30:00Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/api/users/123&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="坑五：过度暴露内部实现细节"><a href="#坑五：过度暴露内部实现细节" class="headerlink" title="坑五：过度暴露内部实现细节"></a>坑五：过度暴露内部实现细节</h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>许多API直接将内部数据模型暴露给客户端，导致以下问题：</p><ol><li>紧耦合：客户端与服务端实现细节紧密耦合</li><li>安全风险：可能暴露敏感信息</li><li>难以演进：内部模型变更直接影响API契约</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接暴露数据库模型的例子</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;5f4dcc3b5aa765d61d8327deb882cf99&quot;</span>, <span class="comment">// 密码哈希值泄露</span></span><br><span class="line">  <span class="string">&quot;isDeleted&quot;</span>: <span class="literal">false</span>,                          <span class="comment">// 软删除标记</span></span><br><span class="line">  <span class="string">&quot;createdBy&quot;</span>: <span class="string">&quot;admin&quot;</span>,                       <span class="comment">// 内部审计字段</span></span><br><span class="line">  <span class="string">&quot;createdAt&quot;</span>: <span class="string">&quot;2023-10-15T08:30:00Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;updatedAt&quot;</span>: <span class="string">&quot;2023-10-15T10:45:00Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="number">3</span>                                <span class="comment">// 乐观锁版本号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题根源-4"><a href="#问题根源-4" class="headerlink" title="问题根源"></a>问题根源</h3><p>这通常是为了开发便利性而采取的捷径，开发者直接将ORM实体转换为JSON返回，而没有进行适当的转换和过滤。</p><h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>使用DTO模式</strong>：创建专门的数据传输对象，与内部模型分离</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体类(内部模型)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">// 密码哈希</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isDeleted; <span class="comment">// 软删除标记</span></span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updatedAt;</span><br><span class="line">    <span class="keyword">private</span> Integer version; <span class="comment">// 乐观锁版本号</span></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DTO类(API响应模型)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换逻辑</span></span><br><span class="line"><span class="keyword">public</span> UserDTO <span class="title function_">convertToDto</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>();</span><br><span class="line">    dto.setId(user.getId());</span><br><span class="line">    dto.setUsername(user.getUsername());</span><br><span class="line">    dto.setCreatedAt(user.getCreatedAt());</span><br><span class="line">    <span class="keyword">return</span> dto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用映射工具</strong>：如MapStruct、ModelMapper等简化DTO转换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用MapStruct的例子</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(UserMapper.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Mapping(target = &quot;password&quot;, ignore = true)</span> <span class="comment">// 忽略敏感字段</span></span><br><span class="line">    <span class="meta">@Mapping(target = &quot;isDeleted&quot;, ignore = true)</span></span><br><span class="line">    <span class="meta">@Mapping(target = &quot;createdBy&quot;, ignore = true)</span></span><br><span class="line">    <span class="meta">@Mapping(target = &quot;version&quot;, ignore = true)</span></span><br><span class="line">    UserDTO <span class="title function_">userToUserDto</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>GraphQL考虑</strong>：对于复杂的数据需求，考虑使用GraphQL允许客户端指定所需字段</li></ol><h2 id="实际业务场景应用"><a href="#实际业务场景应用" class="headerlink" title="实际业务场景应用"></a>实际业务场景应用</h2><h3 id="电商平台订单API重构"><a href="#电商平台订单API重构" class="headerlink" title="电商平台订单API重构"></a>电商平台订单API重构</h3><p>在一个电商平台项目中，我们对订单相关API进行了重构，解决了上述所有问题：</p><h4 id="重构前："><a href="#重构前：" class="headerlink" title="重构前："></a>重构前：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. URI使用动词</span></span><br><span class="line">POST /api/createOrder</span><br><span class="line">GET /api/getOrderDetail?orderId=<span class="number">12345</span></span><br><span class="line">POST /api/cancelOrder</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 总是返回200状态码</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;系统错误&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 没有版本控制</span></span><br><span class="line"><span class="comment">// 4. 不一致的命名和格式</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;order_id&quot;</span>: <span class="number">12345</span>,</span><br><span class="line">  <span class="string">&quot;createTime&quot;</span>: <span class="number">1697358600000</span>,</span><br><span class="line">  <span class="string">&quot;user_id&quot;</span>: <span class="number">101</span>,</span><br><span class="line">  <span class="string">&quot;orderStatus&quot;</span>: <span class="string">&quot;PENDING&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 暴露内部实现细节</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">12345</span>,</span><br><span class="line">  <span class="string">&quot;userId&quot;</span>: <span class="number">101</span>,</span><br><span class="line">  <span class="string">&quot;items&quot;</span>: [...],</span><br><span class="line">  <span class="string">&quot;totalAmount&quot;</span>: <span class="number">199.99</span>,</span><br><span class="line">  <span class="string">&quot;status&quot;</span>: <span class="string">&quot;PENDING&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isDeleted&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&quot;paymentDetails&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;cardNumber&quot;</span>: <span class="string">&quot;4111111111111111&quot;</span>, <span class="comment">// 敏感信息</span></span><br><span class="line">    <span class="string">&quot;expiryDate&quot;</span>: <span class="string">&quot;12/25&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;123&quot;</span> <span class="comment">// 极度敏感</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重构后："><a href="#重构后：" class="headerlink" title="重构后："></a>重构后：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用资源名词和HTTP方法</span></span><br><span class="line">POST /api/v1/orders                 <span class="comment">// 创建订单</span></span><br><span class="line">GET /api/v1/orders/&#123;orderId&#125;        <span class="comment">// 获取订单详情</span></span><br><span class="line">PATCH /api/v1/orders/&#123;orderId&#125;      <span class="comment">// 更新订单状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用正确的HTTP状态码</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">201</span> Created               <span class="comment">// 创建成功</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">404</span> Not Found             <span class="comment">// 资源不存在</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">400</span> Bad Request           <span class="comment">// 请求参数错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 添加版本控制</span></span><br><span class="line"><span class="comment">// 已在URI中包含v1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 一致的命名和格式</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;orderId&quot;</span>: <span class="number">12345</span>,</span><br><span class="line">  <span class="string">&quot;createdAt&quot;</span>: <span class="string">&quot;2023-10-15T08:30:00Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userId&quot;</span>: <span class="number">101</span>,</span><br><span class="line">  <span class="string">&quot;status&quot;</span>: <span class="string">&quot;PENDING&quot;</span>,</span><br><span class="line">  <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;productId&quot;</span>: <span class="number">501</span>,</span><br><span class="line">      <span class="string">&quot;quantity&quot;</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">&quot;price&quot;</span>: <span class="number">99.99</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;totalAmount&quot;</span>: <span class="number">199.98</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 使用DTO隐藏实现细节</span></span><br><span class="line"><span class="comment">// 支付详情通过专门的API处理，不在订单详情中暴露</span></span><br></pre></td></tr></table></figure><h3 id="实现代码示例"><a href="#实现代码示例" class="headerlink" title="实现代码示例"></a>实现代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/orders&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderController</span><span class="params">(OrderService orderService, OrderMapper orderMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">        <span class="built_in">this</span>.orderMapper = orderMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;OrderDTO&gt; <span class="title function_">createOrder</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> CreateOrderRequest request)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.createOrder(request);</span><br><span class="line">        <span class="type">OrderDTO</span> <span class="variable">orderDTO</span> <span class="operator">=</span> orderMapper.orderToOrderDto(order);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(orderDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;OrderDTO&gt; <span class="title function_">getOrder</span><span class="params">(<span class="meta">@PathVariable</span> Long orderId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.findById(orderId)</span><br><span class="line">                .map(order -&gt; orderMapper.orderToOrderDto(order))</span><br><span class="line">                .map(ResponseEntity::ok)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">ResourceNotFoundException</span>(<span class="string">&quot;Order not found with id: &quot;</span> + orderId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PatchMapping(&quot;/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;OrderDTO&gt; <span class="title function_">updateOrderStatus</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Long orderId,</span></span><br><span class="line"><span class="params">            <span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UpdateOrderStatusRequest request)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.updateOrderStatus(orderId, request.getStatus());</span><br><span class="line">        <span class="type">OrderDTO</span> <span class="variable">orderDTO</span> <span class="operator">=</span> orderMapper.orderToOrderDto(order);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(orderDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(ResourceNotFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleResourceNotFoundException</span><span class="params">(ResourceNotFoundException ex)</span> &#123;</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(<span class="string">&quot;ResourceNotFound&quot;</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleValidationExceptions</span><span class="params">(MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">        List&lt;String&gt; errors = ex.getBindingResult()</span><br><span class="line">                .getFieldErrors()</span><br><span class="line">                .stream()</span><br><span class="line">                .map(error -&gt; error.getField() + <span class="string">&quot;: &quot;</span> + error.getDefaultMessage())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(<span class="string">&quot;ValidationError&quot;</span>, <span class="string">&quot;请求参数验证失败&quot;</span>, errors);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结与最佳实践"><a href="#总结与最佳实践" class="headerlink" title="总结与最佳实践"></a>总结与最佳实践</h2><h3 id="避免REST-API设计坑的核心原则"><a href="#避免REST-API设计坑的核心原则" class="headerlink" title="避免REST API设计坑的核心原则"></a>避免REST API设计坑的核心原则</h3><ol><li><p><strong>遵循REST架构风格</strong></p><ul><li>使用资源（名词）而非动作（动词）</li><li>正确使用HTTP方法和状态码</li><li>无状态设计</li></ul></li><li><p><strong>一致性至关重要</strong></p><ul><li>统一的命名规范</li><li>统一的数据格式</li><li>统一的错误处理</li></ul></li><li><p><strong>API是产品，需要精心设计</strong></p><ul><li>从一开始就考虑版本控制</li><li>使用DTO模式隔离内部实现</li><li>提供全面的API文档</li></ul></li><li><p><strong>安全性不容忽视</strong></p><ul><li>不暴露敏感信息</li><li>实施适当的认证和授权</li><li>防范常见的API安全威胁</li></ul></li><li><p><strong>持续改进</strong></p><ul><li>收集API使用反馈</li><li>监控API性能和错误率</li><li>定期审查和优化API设计</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// REST API设计的核心是将其视为产品而非代码</span></span><br><span class="line"><span class="comment">// 好的API设计可以大大提高开发效率和系统可维护性</span></span><br><span class="line"><span class="comment">// 避免这五个常见坑，你的API将更加健壮、一致和易用</span></span><br></pre></td></tr></table></figure><p>通过避免这些常见的设计坑，你可以创建出更加专业、一致和易用的REST API，为客户端开发者提供更好的开发体验，同时也为自己的系统赢得更高的可维护性和可扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> API设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful API </tag>
            
            <tag> 接口设计 </tag>
            
            <tag> 最佳实践 </tag>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离入门：Vue与Spring Boot的首次整合</title>
      <link href="/myblog/2023/09/15/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%85%A5%E9%97%A8%EF%BC%9AVue%E4%B8%8ESpring%20Boot%E7%9A%84%E9%A6%96%E6%AC%A1%E6%95%B4%E5%90%88/"/>
      <url>/myblog/2023/09/15/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%85%A5%E9%97%A8%EF%BC%9AVue%E4%B8%8ESpring%20Boot%E7%9A%84%E9%A6%96%E6%AC%A1%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在传统的单体应用中，前端页面通常由后端渲染</span></span><br><span class="line"><span class="comment">// 随着前端技术的发展，前后端分离架构逐渐成为主流</span></span><br><span class="line"><span class="comment">// 本文记录了我第一次将Vue前端与Spring Boot后端整合的完整过程</span></span><br><span class="line"><span class="comment">// 从环境搭建、项目配置到接口对接，一步步实现前后端分离架构</span></span><br></pre></td></tr></table></figure><h2 id="技术选型与环境准备"><a href="#技术选型与环境准备" class="headerlink" title="技术选型与环境准备"></a>技术选型与环境准备</h2><p>在开始前后端分离项目之前，我们需要明确技术栈并准备相应的开发环境：</p><h3 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h3><ul><li><strong>Vue 3</strong>：渐进式JavaScript框架，采用Composition API</li><li><strong>Vue Router</strong>：Vue官方路由管理器</li><li><strong>Axios</strong>：基于Promise的HTTP客户端</li><li><strong>Element Plus</strong>：基于Vue 3的组件库</li><li><strong>Vite</strong>：现代前端构建工具</li></ul><h3 id="后端技术栈"><a href="#后端技术栈" class="headerlink" title="后端技术栈"></a>后端技术栈</h3><ul><li><strong>Spring Boot 2.7.x</strong>：简化Spring应用开发的框架</li><li><strong>Spring Data JPA</strong>：简化数据库访问的框架</li><li><strong>MySQL</strong>：关系型数据库</li><li><strong>Lombok</strong>：简化Java代码的工具库</li><li><strong>Swagger&#x2F;OpenAPI</strong>：API文档生成工具</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="1-后端项目创建"><a href="#1-后端项目创建" class="headerlink" title="1. 后端项目创建"></a>1. 后端项目创建</h4><p>使用Spring Initializr（<a href="https://start.spring.io/%EF%BC%89%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E7%9A%84Spring">https://start.spring.io/）创建一个基础的Spring</a> Boot项目，选择以下依赖：</p><ul><li>Spring Web</li><li>Spring Data JPA</li><li>MySQL Driver</li><li>Lombok</li><li>Spring Boot DevTools</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml 核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-前端项目创建"><a href="#2-前端项目创建" class="headerlink" title="2. 前端项目创建"></a>2. 前端项目创建</h4><p>使用Vite创建Vue 3项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Vue项目</span></span><br><span class="line">npm create vite@latest my-vue-app --template vue</span><br><span class="line"><span class="built_in">cd</span> my-vue-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line">npm install axios vue-router@4 element-plus</span><br></pre></td></tr></table></figure><h2 id="后端开发：构建RESTful-API"><a href="#后端开发：构建RESTful-API" class="headerlink" title="后端开发：构建RESTful API"></a>后端开发：构建RESTful API</h2><h3 id="1-配置数据库连接"><a href="#1-配置数据库连接" class="headerlink" title="1. 配置数据库连接"></a>1. 配置数据库连接</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/vue_spring_demo?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">dialect:</span> <span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># API文档配置</span></span><br><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/api-docs</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/swagger-ui.html</span></span><br></pre></td></tr></table></figure><h3 id="2-创建实体类"><a href="#2-创建实体类" class="headerlink" title="2. 创建实体类"></a>2. 创建实体类</h3><p>以一个简单的用户管理系统为例，创建User实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(nullable = false, length = 50)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(nullable = false, length = 100)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(length = 255)</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;created_at&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;updated_at&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updatedAt;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PrePersist</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        createdAt = LocalDateTime.now();</span><br><span class="line">        updatedAt = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreUpdate</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        updatedAt = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建Repository接口"><a href="#3-创建Repository接口" class="headerlink" title="3. 创建Repository接口"></a>3. 创建Repository接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByEmail</span><span class="params">(String email)</span>;</span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">existsByEmail</span><span class="params">(String email)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">existsByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建Service层"><a href="#4-创建Service层" class="headerlink" title="4. 创建Service层"></a>4. 创建Service层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">EntityNotFoundException</span>(<span class="string">&quot;User not found with id: &quot;</span> + id));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (userRepository.existsByEmail(user.getEmail())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Email already in use&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userRepository.existsByUsername(user.getUsername())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Username already taken&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(Long id, User userDetails)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getUserById(id);</span><br><span class="line">        user.setUsername(userDetails.getUsername());</span><br><span class="line">        user.setEmail(userDetails.getEmail());</span><br><span class="line">        user.setAvatar(userDetails.getAvatar());</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getUserById(id);</span><br><span class="line">        userRepository.delete(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-创建Controller层"><a href="#5-创建Controller层" class="headerlink" title="5. 创建Controller层"></a>5. 创建Controller层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.UserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Operation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;User Management&quot;, description = &quot;APIs for managing users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;Get all users&quot;, description = &quot;Retrieves a list of all users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userService.getAllUsers());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;Get user by ID&quot;, description = &quot;Retrieves a user by their ID&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userService.getUserById(id));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;Create user&quot;, description = &quot;Creates a new user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(userService.createUser(user), HttpStatus.CREATED);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;Update user&quot;, description = &quot;Updates an existing user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">updateUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, <span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userService.updateUser(id, user));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;Delete user&quot;, description = &quot;Deletes a user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        userService.deleteUser(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-配置跨域处理"><a href="#6-配置跨域处理" class="headerlink" title="6. 配置跨域处理"></a>6. 配置跨域处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 允许跨域的头部信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许跨域的方法</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许跨域的请求来源</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;http://localhost:5173&quot;</span>); <span class="comment">// Vue默认开发端口</span></span><br><span class="line">        <span class="comment">// 允许携带cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 预检请求的缓存时间</span></span><br><span class="line">        config.setMaxAge(<span class="number">3600L</span>);</span><br><span class="line">        </span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端开发：构建Vue应用"><a href="#前端开发：构建Vue应用" class="headerlink" title="前端开发：构建Vue应用"></a>前端开发：构建Vue应用</h2><h3 id="1-配置路由"><a href="#1-配置路由" class="headerlink" title="1. 配置路由"></a>1. 配置路由</h3><p>创建<code>src/router/index.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserList</span> <span class="keyword">from</span> <span class="string">&#x27;../views/UserList.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserForm</span> <span class="keyword">from</span> <span class="string">&#x27;../views/UserForm.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserList</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/new&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user-create&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserForm</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/edit/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user-edit&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserForm</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="2-配置Axios"><a href="#2-配置Axios" class="headerlink" title="2. 配置Axios"></a>2. 配置Axios</h3><p>创建<code>src/api/index.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiClient = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080/api&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">apiClient.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 可以在这里添加认证token等</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">apiClient.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 统一处理错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;API Error:&#x27;</span>, error.<span class="property">response</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> apiClient</span><br></pre></td></tr></table></figure><p>创建<code>src/api/user.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apiClient <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> apiClient.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getUser</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> apiClient.<span class="title function_">get</span>(<span class="string">`/users/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">createUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> apiClient.<span class="title function_">post</span>(<span class="string">&#x27;/users&#x27;</span>, user)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updateUser</span>(<span class="params">id, user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> apiClient.<span class="title function_">put</span>(<span class="string">`/users/<span class="subst">$&#123;id&#125;</span>`</span>, user)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deleteUser</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> apiClient.<span class="title function_">delete</span>(<span class="string">`/users/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建视图组件"><a href="#3-创建视图组件" class="headerlink" title="3. 创建视图组件"></a>3. 创建视图组件</h3><h4 id="HomeView-vue"><a href="#HomeView-vue" class="headerlink" title="HomeView.vue"></a>HomeView.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;h1&gt;前后端分离示例应用&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;这是一个使用Vue 3和Spring Boot构建的前后端分离应用示例&lt;/p&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;$router.push(&#x27;/users&#x27;)&quot;&gt;查看用户列表&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 组合式API，无需额外代码</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.home &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  padding: 2rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line">  margin-bottom: 1rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">  margin-bottom: 2rem;</span><br><span class="line">  color: #666;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="UserList-vue"><a href="#UserList-vue" class="headerlink" title="UserList.vue"></a>UserList.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;user-list&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">      &lt;h1&gt;用户管理&lt;/h1&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;$router.push(&#x27;/users/new&#x27;)&quot;&gt;</span><br><span class="line">        添加用户</span><br><span class="line">      &lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;el-table v-loading=&quot;loading&quot; :data=&quot;users&quot; style=&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;username&quot; label=&quot;用户名&quot; /&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;email&quot; label=&quot;邮箱&quot; /&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;头像&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-avatar :src=&quot;scope.row.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27;&quot; /&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;创建时间&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;scope&quot;&gt;</span><br><span class="line">          &#123;&#123; formatDate(scope.row.createdAt) &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;200&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;small&quot; @click=&quot;$router.push(`/users/edit/$&#123;scope.row.id&#125;`)&quot;&gt;</span><br><span class="line">            编辑</span><br><span class="line">          &lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size=&quot;small&quot; type=&quot;danger&quot; @click=&quot;confirmDelete(scope.row)&quot;&gt;</span><br><span class="line">            删除</span><br><span class="line">          &lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; ElMessage, ElMessageBox &#125; from &#x27;element-plus&#x27;</span><br><span class="line">import userApi from &#x27;../api/user&#x27;</span><br><span class="line"></span><br><span class="line">const users = ref([])</span><br><span class="line">const loading = ref(true)</span><br><span class="line"></span><br><span class="line">const fetchUsers = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    loading.value = true</span><br><span class="line">    users.value = await userApi.getUsers()</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    ElMessage.error(&#x27;获取用户列表失败&#x27;)</span><br><span class="line">    console.error(error)</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    loading.value = false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const confirmDelete = (user) =&gt; &#123;</span><br><span class="line">  ElMessageBox.confirm(</span><br><span class="line">    `确定要删除用户 $&#123;user.username&#125; 吗？`,</span><br><span class="line">    &#x27;警告&#x27;,</span><br><span class="line">    &#123;</span><br><span class="line">      confirmButtonText: &#x27;确定&#x27;,</span><br><span class="line">      cancelButtonText: &#x27;取消&#x27;,</span><br><span class="line">      type: &#x27;warning&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  ).then(() =&gt; &#123;</span><br><span class="line">    deleteUser(user.id)</span><br><span class="line">  &#125;).catch(() =&gt; &#123;</span><br><span class="line">    // 用户取消删除操作</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const deleteUser = async (id) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await userApi.deleteUser(id)</span><br><span class="line">    ElMessage.success(&#x27;删除成功&#x27;)</span><br><span class="line">    fetchUsers()</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    ElMessage.error(&#x27;删除失败&#x27;)</span><br><span class="line">    console.error(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const formatDate = (dateString) =&gt; &#123;</span><br><span class="line">  if (!dateString) return &#x27;&#x27;</span><br><span class="line">  const date = new Date(dateString)</span><br><span class="line">  return date.toLocaleString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  fetchUsers()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.user-list &#123;</span><br><span class="line">  padding: 1rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  margin-bottom: 1rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="UserForm-vue"><a href="#UserForm-vue" class="headerlink" title="UserForm.vue"></a>UserForm.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;user-form&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; isEdit ? &#x27;编辑用户&#x27; : &#x27;创建用户&#x27; &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;el-form</span><br><span class="line">      ref=&quot;formRef&quot;</span><br><span class="line">      :model=&quot;form&quot;</span><br><span class="line">      :rules=&quot;rules&quot;</span><br><span class="line">      label-width=&quot;120px&quot;</span><br><span class="line">      v-loading=&quot;loading&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.username&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-form-item label=&quot;邮箱&quot; prop=&quot;email&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.email&quot; type=&quot;email&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-form-item label=&quot;头像URL&quot; prop=&quot;avatar&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.avatar&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm&quot;&gt;保存&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button @click=&quot;$router.push(&#x27;/users&#x27;)&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, reactive, computed, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span><br><span class="line">import userApi from &#x27;../api/user&#x27;</span><br><span class="line"></span><br><span class="line">const router = useRouter()</span><br><span class="line">const route = useRoute()</span><br><span class="line">const formRef = ref(null)</span><br><span class="line">const loading = ref(false)</span><br><span class="line"></span><br><span class="line">const form = reactive(&#123;</span><br><span class="line">  username: &#x27;&#x27;,</span><br><span class="line">  email: &#x27;&#x27;,</span><br><span class="line">  avatar: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const rules = &#123;</span><br><span class="line">  username: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; min: 3, max: 50, message: &#x27;长度在3到50个字符&#x27;, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  email: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入邮箱&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; type: &#x27;email&#x27;, message: &#x27;请输入正确的邮箱格式&#x27;, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const isEdit = computed(() =&gt; &#123;</span><br><span class="line">  return !!route.params.id</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const fetchUser = async (id) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    loading.value = true</span><br><span class="line">    const user = await userApi.getUser(id)</span><br><span class="line">    Object.assign(form, user)</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    ElMessage.error(&#x27;获取用户信息失败&#x27;)</span><br><span class="line">    console.error(error)</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    loading.value = false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const submitForm = async () =&gt; &#123;</span><br><span class="line">  if (!formRef.value) return</span><br><span class="line">  </span><br><span class="line">  await formRef.value.validate(async (valid) =&gt; &#123;</span><br><span class="line">    if (valid) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        loading.value = true</span><br><span class="line">        if (isEdit.value) &#123;</span><br><span class="line">          await userApi.updateUser(route.params.id, form)</span><br><span class="line">          ElMessage.success(&#x27;更新成功&#x27;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          await userApi.createUser(form)</span><br><span class="line">          ElMessage.success(&#x27;创建成功&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        router.push(&#x27;/users&#x27;)</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        const message = error.response?.data?.message || (isEdit.value ? &#x27;更新失败&#x27; : &#x27;创建失败&#x27;)</span><br><span class="line">        ElMessage.error(message)</span><br><span class="line">        console.error(error)</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">        loading.value = false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  if (isEdit.value) &#123;</span><br><span class="line">    fetchUser(route.params.id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.user-form &#123;</span><br><span class="line">  max-width: 600px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: 1rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="4-配置主应用"><a href="#4-配置主应用" class="headerlink" title="4. 配置主应用"></a>4. 配置主应用</h3><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-config-provider&gt;</span><br><span class="line">    &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">      &lt;el-header&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">          &lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">          &lt;router-link to=&quot;/users&quot;&gt;用户管理&lt;/router-link&gt;</span><br><span class="line">        &lt;/nav&gt;</span><br><span class="line">      &lt;/el-header&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;router-view /&gt;</span><br><span class="line">      &lt;/el-main&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-footer&gt;</span><br><span class="line">        &lt;p&gt;Vue 3 + Spring Boot 前后端分离示例 © &#123;&#123; new Date().getFullYear() &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/el-footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/el-config-provider&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 组合式API，无需额外代码</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  font-family: &#x27;Helvetica Neue&#x27;, Helvetica, &#x27;PingFang SC&#x27;, &#x27;Hiragino Sans GB&#x27;,</span><br><span class="line">    &#x27;Microsoft YaHei&#x27;, &#x27;微软雅黑&#x27;, Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.app-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-header &#123;</span><br><span class="line">  background-color: #409EFF;</span><br><span class="line">  color: white;</span><br><span class="line">  line-height: 60px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  gap: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav a &#123;</span><br><span class="line">  color: white;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav a.router-link-active &#123;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-main &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-footer &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #666;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border-top: 1px solid #eee;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="整合与测试"><a href="#整合与测试" class="headerlink" title="整合与测试"></a>整合与测试</h2><h3 id="1-启动后端服务"><a href="#1-启动后端服务" class="headerlink" title="1. 启动后端服务"></a>1. 启动后端服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Spring Boot项目根目录下执行</span></span><br><span class="line">./mvnw spring-boot:run</span><br></pre></td></tr></table></figure><p>后端服务将在 <a href="http://localhost:8080/">http://localhost:8080</a> 启动，可以通过 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> 访问API文档。</p><h3 id="2-启动前端服务"><a href="#2-启动前端服务" class="headerlink" title="2. 启动前端服务"></a>2. 启动前端服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Vue项目根目录下执行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>前端服务将在 <a href="http://localhost:5173/">http://localhost:5173</a> 启动。</p><h3 id="3-测试前后端交互"><a href="#3-测试前后端交互" class="headerlink" title="3. 测试前后端交互"></a>3. 测试前后端交互</h3><ol><li>访问 <a href="http://localhost:5173/">http://localhost:5173</a></li><li>点击”用户管理”导航链接</li><li>点击”添加用户”按钮，填写表单并提交</li><li>验证用户是否成功添加到列表中</li><li>测试编辑和删除功能</li></ol><h2 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a>常见问题与解决方案</h2><h3 id="1-跨域问题"><a href="#1-跨域问题" class="headerlink" title="1. 跨域问题"></a>1. 跨域问题</h3><p>如果遇到跨域问题，确保：</p><ol><li>后端的CORS配置正确，允许前端域名访问</li><li>前端请求URL正确</li><li>请求方法（GET、POST等）在CORS配置中允许</li></ol><h3 id="2-数据格式不匹配"><a href="#2-数据格式不匹配" class="headerlink" title="2. 数据格式不匹配"></a>2. 数据格式不匹配</h3><p>前后端数据交互时，常见的问题是日期格式不匹配。可以：</p><ol><li>在前端使用格式化函数处理日期显示</li><li>在后端使用<code>@JsonFormat</code>注解指定日期格式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createdAt;</span><br></pre></td></tr></table></figure><h3 id="3-表单验证不一致"><a href="#3-表单验证不一致" class="headerlink" title="3. 表单验证不一致"></a>3. 表单验证不一致</h3><p>确保前后端的验证规则一致：</p><ol><li>在后端使用Bean Validation（如<code>@NotNull</code>、<code>@Size</code>等）</li><li>在前端表单中实现相应的验证规则</li><li>后端验证失败时，返回明确的错误信息给前端显示</li></ol><h2 id="性能优化与最佳实践"><a href="#性能优化与最佳实践" class="headerlink" title="性能优化与最佳实践"></a>性能优化与最佳实践</h2><h3 id="1-前端优化"><a href="#1-前端优化" class="headerlink" title="1. 前端优化"></a>1. 前端优化</h3><ul><li><strong>路由懒加载</strong>：减少首屏加载时间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改路由配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/UserList.vue&#x27;</span>) <span class="comment">// 懒加载</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><strong>组件复用</strong>：提取公共组件，减少代码重复</li><li><strong>状态管理</strong>：对于复杂应用，考虑使用Pinia或Vuex管理状态</li></ul><h3 id="2-后端优化"><a href="#2-后端优化" class="headerlink" title="2. 后端优化"></a>2. 后端优化</h3><ul><li><strong>分页查询</strong>：对于大数据量列表，实现分页查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Page&lt;User&gt;&gt; <span class="title function_">getUsers</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue = &quot;0&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(userService.getUsersWithPagination(page, size));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>缓存</strong>：对于频繁访问但不常变化的数据，使用缓存</li><li><strong>异步处理</strong>：对于耗时操作，使用异步处理</li></ul><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>通过本文，我们完成了一个基础的Vue与Spring Boot前后端分离项目的搭建，实现了：</p><ol><li><strong>后端</strong>：RESTful API设计、数据库交互、跨域配置</li><li><strong>前端</strong>：Vue组件开发、路由配置、API调用、表单处理</li><li><strong>整合</strong>：前后端数据交互、错误处理、用户体验优化</li></ol><p>这只是前后端分离架构的起点，在实际项目中，我们还需要考虑：</p><ul><li><strong>认证与授权</strong>：JWT认证、权限控制</li><li><strong>文件上传</strong>：图片上传、文件管理</li><li><strong>实时通信</strong>：WebSocket实现消息推送</li><li><strong>国际化</strong>：多语言支持</li><li><strong>部署与CI&#x2F;CD</strong>：自动化构建、测试与部署</li></ul><p>前后端分离架构为现代Web应用开发提供了更大的灵活性和可维护性，掌握这种开发模式，将为你的开发技能带来质的飞跃。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前后端分离的核心价值</span></span><br><span class="line"><span class="comment">// 1. 关注点分离，前后端各自专注于自己的领域</span></span><br><span class="line"><span class="comment">// 2. 技术栈灵活选择，前后端可以独立升级</span></span><br><span class="line"><span class="comment">// 3. 并行开发，提高团队效率</span></span><br><span class="line"><span class="comment">// 4. 更好的用户体验，前端可以更专注于交互设计</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端分离 </category>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> RESTful API </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引优化：从慢查询日志到响应时间减少50%</title>
      <link href="/myblog/2023/08/05/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%EF%BC%9A%E4%BB%8E%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E5%88%B0%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E5%87%8F%E5%B0%9150%25/"/>
      <url>/myblog/2023/08/05/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%EF%BC%9A%E4%BB%8E%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E5%88%B0%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E5%87%8F%E5%B0%9150%25/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在一个电商平台的订单管理系统中</span></span><br><span class="line"><span class="comment">-- 随着业务量增长，系统响应越来越慢</span></span><br><span class="line"><span class="comment">-- 特别是在高峰期，某些查询耗时超过10秒</span></span><br><span class="line"><span class="comment">-- 通过分析慢查询日志，我们发现了问题所在</span></span><br><span class="line"><span class="comment">-- 并通过索引优化，将响应时间减少了50%以上</span></span><br></pre></td></tr></table></figure><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>系统上线初期运行良好，但随着数据量增长到千万级别，用户开始反馈系统响应缓慢，特别是以下几个场景：</p><ol><li><strong>订单列表查询</strong>：按照多条件筛选订单时，页面加载时间超过5秒</li><li><strong>商品销售统计</strong>：生成销售报表时，等待时间超过10秒</li><li><strong>用户购买记录</strong>：查看用户历史订单时，加载缓慢且有时超时</li></ol><p>通过监控系统，我们发现数据库CPU使用率在这些操作期间飙升至80%以上，而慢查询日志中记录了大量执行时间超过1秒的SQL语句。</p><h2 id="慢查询日志分析"><a href="#慢查询日志分析" class="headerlink" title="慢查询日志分析"></a>慢查询日志分析</h2><h3 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h3><p>首先，我们确保MySQL的慢查询日志已正确配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看慢查询日志是否开启</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启慢查询日志</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置慢查询阈值为0.5秒</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time <span class="operator">=</span> <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置慢查询日志文件位置</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file <span class="operator">=</span> <span class="string">&#x27;/var/log/mysql/mysql-slow.log&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 记录未使用索引的查询</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_queries_not_using_indexes <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="分析慢查询日志"><a href="#分析慢查询日志" class="headerlink" title="分析慢查询日志"></a>分析慢查询日志</h3><p>使用<code>mysqldumpslow</code>工具分析慢查询日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看执行时间最长的10条SQL</span></span><br><span class="line">mysqldumpslow -t 10 /var/log/mysql/mysql-slow.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看执行次数最多的10条SQL</span></span><br><span class="line">mysqldumpslow -s c -t 10 /var/log/mysql/mysql-slow.log</span><br></pre></td></tr></table></figure><p>通过分析，我们发现了几个主要问题：</p><ol><li><strong>订单查询SQL</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.<span class="operator">*</span>, u.username </span><br><span class="line"><span class="keyword">FROM</span> orders o </span><br><span class="line"><span class="keyword">JOIN</span> users u <span class="keyword">ON</span> o.user_id <span class="operator">=</span> u.id </span><br><span class="line"><span class="keyword">WHERE</span> o.order_status <span class="operator">=</span> <span class="string">&#x27;PAID&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> o.create_time <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-01-31&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.create_time <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">20</span> <span class="keyword">OFFSET</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 执行时间: 4.5秒, 扫描行数: 2,500,000</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>销售统计SQL</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.product_name, <span class="built_in">SUM</span>(oi.quantity) <span class="keyword">as</span> total_quantity, </span><br><span class="line"><span class="built_in">SUM</span>(oi.price <span class="operator">*</span> oi.quantity) <span class="keyword">as</span> total_amount </span><br><span class="line"><span class="keyword">FROM</span> order_items oi </span><br><span class="line"><span class="keyword">JOIN</span> products p <span class="keyword">ON</span> oi.product_id <span class="operator">=</span> p.id </span><br><span class="line"><span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> oi.order_id <span class="operator">=</span> o.id </span><br><span class="line"><span class="keyword">WHERE</span> o.order_status <span class="operator">=</span> <span class="string">&#x27;COMPLETED&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> o.create_time <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-01-31&#x27;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> p.id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_amount <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 执行时间: 8.2秒, 扫描行数: 5,800,000</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>用户订单查询SQL</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.<span class="operator">*</span>, </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> order_items <span class="keyword">WHERE</span> order_id <span class="operator">=</span> o.id) <span class="keyword">as</span> item_count </span><br><span class="line"><span class="keyword">FROM</span> orders o </span><br><span class="line"><span class="keyword">WHERE</span> o.user_id <span class="operator">=</span> <span class="number">10001</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.create_time <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 执行时间: 3.8秒, 扫描行数: 1,200,000</span></span><br></pre></td></tr></table></figure><h2 id="执行计划分析"><a href="#执行计划分析" class="headerlink" title="执行计划分析"></a>执行计划分析</h2><p>使用<code>EXPLAIN</code>命令分析这些慢查询的执行计划：</p><h3 id="订单查询SQL的执行计划"><a href="#订单查询SQL的执行计划" class="headerlink" title="订单查询SQL的执行计划"></a>订单查询SQL的执行计划</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> o.<span class="operator">*</span>, u.username </span><br><span class="line"><span class="keyword">FROM</span> orders o </span><br><span class="line"><span class="keyword">JOIN</span> users u <span class="keyword">ON</span> o.user_id <span class="operator">=</span> u.id </span><br><span class="line"><span class="keyword">WHERE</span> o.order_status <span class="operator">=</span> <span class="string">&#x27;PAID&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> o.create_time <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-01-31&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.create_time <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">20</span> <span class="keyword">OFFSET</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>执行计划结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | o     | NULL       | ALL  | PRIMARY       | NULL | NULL    | NULL | 500000 |    10.00 | Using where; Using filesort                        |</span><br><span class="line">|  1 | SIMPLE      | u     | NULL       | eq_ref | PRIMARY     | PRIMARY | 4     | shop.o.user_id | 1 | 100.00 | NULL                                               |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span><br></pre></td></tr></table></figure><p>问题分析：</p><ol><li><code>orders</code>表使用了全表扫描(type&#x3D;ALL)</li><li>没有利用<code>order_status</code>和<code>create_time</code>的条件进行索引过滤</li><li>使用了文件排序(Using filesort)，性能开销大</li></ol><h3 id="销售统计SQL的执行计划"><a href="#销售统计SQL的执行计划" class="headerlink" title="销售统计SQL的执行计划"></a>销售统计SQL的执行计划</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> p.product_name, <span class="built_in">SUM</span>(oi.quantity) <span class="keyword">as</span> total_quantity, </span><br><span class="line"><span class="built_in">SUM</span>(oi.price <span class="operator">*</span> oi.quantity) <span class="keyword">as</span> total_amount </span><br><span class="line"><span class="keyword">FROM</span> order_items oi </span><br><span class="line"><span class="keyword">JOIN</span> products p <span class="keyword">ON</span> oi.product_id <span class="operator">=</span> p.id </span><br><span class="line"><span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> oi.order_id <span class="operator">=</span> o.id </span><br><span class="line"><span class="keyword">WHERE</span> o.order_status <span class="operator">=</span> <span class="string">&#x27;COMPLETED&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> o.create_time <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-01-31&#x27;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> p.id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_amount <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>执行计划结果显示多表连接效率低下，特别是<code>order_items</code>表与<code>orders</code>表的连接没有使用有效索引。</p><h3 id="用户订单查询SQL的执行计划"><a href="#用户订单查询SQL的执行计划" class="headerlink" title="用户订单查询SQL的执行计划"></a>用户订单查询SQL的执行计划</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> o.<span class="operator">*</span>, </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> order_items <span class="keyword">WHERE</span> order_id <span class="operator">=</span> o.id) <span class="keyword">as</span> item_count </span><br><span class="line"><span class="keyword">FROM</span> orders o </span><br><span class="line"><span class="keyword">WHERE</span> o.user_id <span class="operator">=</span> <span class="number">10001</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.create_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>执行计划结果显示子查询效率低下，且<code>orders</code>表在<code>user_id</code>字段上没有索引。</p><h2 id="索引优化方案"><a href="#索引优化方案" class="headerlink" title="索引优化方案"></a>索引优化方案</h2><h3 id="1-订单表索引优化"><a href="#1-订单表索引优化" class="headerlink" title="1. 订单表索引优化"></a>1. 订单表索引优化</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 为订单表添加复合索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> orders <span class="keyword">ADD</span> INDEX idx_status_create_time (order_status, create_time);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为用户ID添加索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> orders <span class="keyword">ADD</span> INDEX idx_user_id (user_id);</span><br></pre></td></tr></table></figure><h3 id="2-订单项表索引优化"><a href="#2-订单项表索引优化" class="headerlink" title="2. 订单项表索引优化"></a>2. 订单项表索引优化</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 为订单项表的订单ID添加索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> order_items <span class="keyword">ADD</span> INDEX idx_order_id (order_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为产品ID添加索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> order_items <span class="keyword">ADD</span> INDEX idx_product_id (product_id);</span><br></pre></td></tr></table></figure><h3 id="3-优化后的SQL"><a href="#3-优化后的SQL" class="headerlink" title="3. 优化后的SQL"></a>3. 优化后的SQL</h3><h4 id="订单查询SQL优化"><a href="#订单查询SQL优化" class="headerlink" title="订单查询SQL优化"></a>订单查询SQL优化</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 优化后的订单查询SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> o.<span class="operator">*</span>, u.username </span><br><span class="line"><span class="keyword">FROM</span> orders o FORCE INDEX(idx_status_create_time)</span><br><span class="line"><span class="keyword">JOIN</span> users u <span class="keyword">ON</span> o.user_id <span class="operator">=</span> u.id </span><br><span class="line"><span class="keyword">WHERE</span> o.order_status <span class="operator">=</span> <span class="string">&#x27;PAID&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> o.create_time <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-01-31&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.create_time <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">20</span> <span class="keyword">OFFSET</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 执行时间: 0.15秒, 扫描行数: 5,000</span></span><br></pre></td></tr></table></figure><h4 id="销售统计SQL优化"><a href="#销售统计SQL优化" class="headerlink" title="销售统计SQL优化"></a>销售统计SQL优化</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 优化后的销售统计SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> p.product_name, <span class="built_in">SUM</span>(oi.quantity) <span class="keyword">as</span> total_quantity, </span><br><span class="line"><span class="built_in">SUM</span>(oi.price <span class="operator">*</span> oi.quantity) <span class="keyword">as</span> total_amount </span><br><span class="line"><span class="keyword">FROM</span> orders o FORCE INDEX(idx_status_create_time)</span><br><span class="line"><span class="keyword">JOIN</span> order_items oi <span class="keyword">ON</span> o.id <span class="operator">=</span> oi.order_id</span><br><span class="line"><span class="keyword">JOIN</span> products p <span class="keyword">ON</span> oi.product_id <span class="operator">=</span> p.id </span><br><span class="line"><span class="keyword">WHERE</span> o.order_status <span class="operator">=</span> <span class="string">&#x27;COMPLETED&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> o.create_time <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-01-31&#x27;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> p.id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_amount <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 执行时间: 1.8秒, 扫描行数: 120,000</span></span><br></pre></td></tr></table></figure><h4 id="用户订单查询SQL优化"><a href="#用户订单查询SQL优化" class="headerlink" title="用户订单查询SQL优化"></a>用户订单查询SQL优化</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 优化后的用户订单查询SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> o.<span class="operator">*</span>, oi.item_count </span><br><span class="line"><span class="keyword">FROM</span> orders o FORCE INDEX(idx_user_id)</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> order_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> item_count </span><br><span class="line">    <span class="keyword">FROM</span> order_items </span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> order_id</span><br><span class="line">) oi <span class="keyword">ON</span> o.id <span class="operator">=</span> oi.order_id </span><br><span class="line"><span class="keyword">WHERE</span> o.user_id <span class="operator">=</span> <span class="number">10001</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.create_time <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 执行时间: 0.25秒, 扫描行数: 200</span></span><br></pre></td></tr></table></figure><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><table><thead><tr><th>查询类型</th><th>优化前执行时间</th><th>优化后执行时间</th><th>提升比例</th><th>扫描行数减少</th></tr></thead><tbody><tr><td>订单查询</td><td>4.5秒</td><td>0.15秒</td><td>97%</td><td>99.8%</td></tr><tr><td>销售统计</td><td>8.2秒</td><td>1.8秒</td><td>78%</td><td>97.9%</td></tr><tr><td>用户订单</td><td>3.8秒</td><td>0.25秒</td><td>93%</td><td>99.9%</td></tr></tbody></table><h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><p>通过这次优化实践，我们总结了以下MySQL索引设计原则：</p><h3 id="1-选择合适的列建立索引"><a href="#1-选择合适的列建立索引" class="headerlink" title="1. 选择合适的列建立索引"></a>1. 选择合适的列建立索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 选择高选择性的列</span></span><br><span class="line"><span class="comment">-- 经常出现在WHERE、JOIN、ORDER BY和GROUP BY子句中的列</span></span><br><span class="line"><span class="comment">-- 避免对经常更新的列建立索引</span></span><br></pre></td></tr></table></figure><h3 id="2-复合索引的最左前缀原则"><a href="#2-复合索引的最左前缀原则" class="headerlink" title="2. 复合索引的最左前缀原则"></a>2. 复合索引的最左前缀原则</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 复合索引的顺序很重要</span></span><br><span class="line"><span class="comment">-- 遵循&quot;最左前缀&quot;原则</span></span><br><span class="line"><span class="comment">-- 例如索引(A,B,C)可用于查询A、(A,B)和(A,B,C)，但不适用于单独查询B或C</span></span><br></pre></td></tr></table></figure><h3 id="3-避免冗余索引"><a href="#3-避免冗余索引" class="headerlink" title="3. 避免冗余索引"></a>3. 避免冗余索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 避免创建重复的索引</span></span><br><span class="line"><span class="comment">-- 例如，如果已经有索引(A,B)，就不需要再创建索引(A)</span></span><br></pre></td></tr></table></figure><h3 id="4-索引列的基数"><a href="#4-索引列的基数" class="headerlink" title="4. 索引列的基数"></a>4. 索引列的基数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 选择基数大的列作为索引</span></span><br><span class="line"><span class="comment">-- 基数 = 列中不同值的数量</span></span><br><span class="line"><span class="comment">-- 基数越大，索引的选择性越好</span></span><br></pre></td></tr></table></figure><h3 id="5-索引长度控制"><a href="#5-索引长度控制" class="headerlink" title="5. 索引长度控制"></a>5. 索引长度控制</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对于长字符串列，可以只索引前缀</span></span><br><span class="line"><span class="comment">-- 例如：ALTER TABLE users ADD INDEX idx_email (email(10));</span></span><br></pre></td></tr></table></figure><h2 id="实际业务场景应用"><a href="#实际业务场景应用" class="headerlink" title="实际业务场景应用"></a>实际业务场景应用</h2><h3 id="1-电商平台商品搜索优化"><a href="#1-电商平台商品搜索优化" class="headerlink" title="1. 电商平台商品搜索优化"></a>1. 电商平台商品搜索优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductRepository</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优化后的商品搜索方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ProductDTO&gt; <span class="title function_">searchProducts</span><span class="params">(ProductSearchCriteria criteria)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        List&lt;Object&gt; params = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        sql.append(<span class="string">&quot;SELECT p.id, p.name, p.price, p.stock, c.name as category_name &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;FROM products p &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;JOIN categories c ON p.category_id = c.id &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;WHERE 1=1 &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加查询条件</span></span><br><span class="line">        <span class="keyword">if</span> (criteria.getCategoryId() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;AND p.category_id = ? &quot;</span>);</span><br><span class="line">            params.add(criteria.getCategoryId());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(criteria.getKeyword())) &#123;</span><br><span class="line">            <span class="comment">// 使用前缀索引而非模糊查询</span></span><br><span class="line">            sql.append(<span class="string">&quot;AND p.name LIKE ? &quot;</span>);</span><br><span class="line">            params.add(criteria.getKeyword() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (criteria.getMinPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;AND p.price &gt;= ? &quot;</span>);</span><br><span class="line">            params.add(criteria.getMinPrice());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (criteria.getMaxPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;AND p.price &lt;= ? &quot;</span>);</span><br><span class="line">            params.add(criteria.getMaxPrice());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加排序</span></span><br><span class="line">        sql.append(<span class="string">&quot;ORDER BY p.&quot;</span> + getSortField(criteria.getSort()) + <span class="string">&quot; &quot;</span> + getSortDirection(criteria.getDirection()));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加分页</span></span><br><span class="line">        sql.append(<span class="string">&quot; LIMIT ? OFFSET ?&quot;</span>);</span><br><span class="line">        params.add(criteria.getPageSize());</span><br><span class="line">        params.add((criteria.getPage() - <span class="number">1</span>) * criteria.getPageSize());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql.toString(), params.toArray(), <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(ProductDTO.class));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getSortField</span><span class="params">(String sort)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (sort) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;price&quot;</span>: <span class="keyword">return</span> <span class="string">&quot;price&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;created&quot;</span>: <span class="keyword">return</span> <span class="string">&quot;create_time&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;sales&quot;</span>: <span class="keyword">return</span> <span class="string">&quot;sales_count&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">&quot;id&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getSortDirection</span><span class="params">(String direction)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;desc&quot;</span>.equalsIgnoreCase(direction) ? <span class="string">&quot;DESC&quot;</span> : <span class="string">&quot;ASC&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-用户行为分析系统"><a href="#2-用户行为分析系统" class="headerlink" title="2. 用户行为分析系统"></a>2. 用户行为分析系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBehaviorAnalysisService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析用户购买行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserBehaviorDTO&gt; <span class="title function_">analyzeUserPurchaseBehavior</span><span class="params">(LocalDate startDate, LocalDate endDate)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用索引优化的SQL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT u.id, u.username, COUNT(o.id) as order_count, &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;SUM(o.total_amount) as total_spent, &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;MAX(o.create_time) as last_purchase_time &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;FROM users u &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;JOIN orders o FORCE INDEX(idx_user_id, idx_status_create_time) ON u.id = o.user_id &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;WHERE o.order_status = &#x27;COMPLETED&#x27; &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;AND o.create_time BETWEEN ? AND ? &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;GROUP BY u.id &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;ORDER BY total_spent DESC&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(</span><br><span class="line">            sql,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;startDate, endDate&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(UserBehaviorDTO.class)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析商品类别偏好</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CategoryPreferenceDTO&gt; <span class="title function_">analyzeCategoryPreference</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT c.id, c.name, COUNT(oi.id) as purchase_count, &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;SUM(oi.price * oi.quantity) as total_amount &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;FROM categories c &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;JOIN products p ON c.id = p.category_id &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;JOIN order_items oi ON p.id = oi.product_id &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;JOIN orders o FORCE INDEX(idx_user_id) ON oi.order_id = o.id &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;WHERE o.user_id = ? &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;AND o.order_status = &#x27;COMPLETED&#x27; &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;GROUP BY c.id &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;ORDER BY purchase_count DESC&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(</span><br><span class="line">            sql,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;userId&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(CategoryPreferenceDTO.class)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实时库存管理系统"><a href="#3-实时库存管理系统" class="headerlink" title="3. 实时库存管理系统"></a>3. 实时库存管理系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InventoryService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询低库存商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;LowStockProductDTO&gt; <span class="title function_">findLowStockProducts</span><span class="params">(<span class="type">int</span> threshold)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用索引优化的查询</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT p.id, p.name, p.stock, p.sku, c.name as category_name, &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;(SELECT SUM(oi.quantity) FROM order_items oi &quot;</span> +</span><br><span class="line">                     <span class="string">&quot; JOIN orders o ON oi.order_id = o.id &quot;</span> +</span><br><span class="line">                     <span class="string">&quot; WHERE oi.product_id = p.id &quot;</span> +</span><br><span class="line">                     <span class="string">&quot; AND o.create_time &gt; DATE_SUB(NOW(), INTERVAL 30 DAY)) as monthly_sales &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;FROM products p &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;JOIN categories c ON p.category_id = c.id &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;WHERE p.stock &lt; ? &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;ORDER BY p.stock ASC&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(</span><br><span class="line">            sql,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;threshold&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(LowStockProductDTO.class)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新库存（使用乐观锁防止并发问题）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateStock</span><span class="params">(Long productId, <span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用索引和乐观锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE products &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;SET stock = stock - ?, version = version + 1 &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;WHERE id = ? AND stock &gt;= ? AND version = &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;(SELECT version FROM (SELECT version FROM products WHERE id = ?) as tmp)&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> jdbcTemplate.update(sql, quantity, productId, quantity, productId);</span><br><span class="line">        <span class="keyword">return</span> affected &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引维护与监控"><a href="#索引维护与监控" class="headerlink" title="索引维护与监控"></a>索引维护与监控</h2><h3 id="1-定期分析索引使用情况"><a href="#1-定期分析索引使用情况" class="headerlink" title="1. 定期分析索引使用情况"></a>1. 定期分析索引使用情况</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看索引使用情况</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    table_name,</span><br><span class="line">    index_name,</span><br><span class="line">    stat_name,</span><br><span class="line">    stat_value</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    mysql.innodb_index_stats</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    database_name <span class="operator">=</span> <span class="string">&#x27;your_database&#x27;</span></span><br><span class="line">    <span class="keyword">AND</span> stat_name <span class="keyword">IN</span> (<span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;n_leaf_pages&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    table_name, index_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看未使用的索引</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t.TABLE_SCHEMA,</span><br><span class="line">    t.TABLE_NAME,</span><br><span class="line">    s.INDEX_NAME,</span><br><span class="line">    s.COLUMN_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.STATISTICS s</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">    information_schema.TABLES t <span class="keyword">ON</span> s.TABLE_SCHEMA <span class="operator">=</span> t.TABLE_SCHEMA <span class="keyword">AND</span> s.TABLE_NAME <span class="operator">=</span> t.TABLE_NAME</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    performance_schema.table_io_waits_summary_by_index_usage i <span class="keyword">ON</span> i.OBJECT_SCHEMA <span class="operator">=</span> t.TABLE_SCHEMA</span><br><span class="line">    <span class="keyword">AND</span> i.OBJECT_NAME <span class="operator">=</span> t.TABLE_NAME</span><br><span class="line">    <span class="keyword">AND</span> i.INDEX_NAME <span class="operator">=</span> s.INDEX_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    t.TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database&#x27;</span></span><br><span class="line">    <span class="keyword">AND</span> i.COUNT_STAR <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> i.COUNT_STAR <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="2-监控慢查询"><a href="#2-监控慢查询" class="headerlink" title="2. 监控慢查询"></a>2. 监控慢查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SlowQueryMonitor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SlowQueryMonitor.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 * * * *&quot;)</span> <span class="comment">// 每小时执行一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">monitorSlowQueries</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM mysql.slow_log WHERE start_time &gt; DATE_SUB(NOW(), INTERVAL 1 HOUR)&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; slowQueries = jdbcTemplate.queryForList(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!slowQueries.isEmpty()) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;发现&#123;&#125;条慢查询&quot;</span>, slowQueries.size());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (Map&lt;String, Object&gt; query : slowQueries) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;慢查询: &#123;&#125;, 执行时间: &#123;&#125;秒&quot;</span>, </span><br><span class="line">                    query.get(<span class="string">&quot;sql_text&quot;</span>), </span><br><span class="line">                    query.get(<span class="string">&quot;query_time&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发送告警邮件</span></span><br><span class="line">            sendAlertEmail(slowQueries);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendAlertEmail</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; slowQueries)</span> &#123;</span><br><span class="line">        <span class="comment">// 发送告警邮件的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-索引碎片整理"><a href="#3-索引碎片整理" class="headerlink" title="3. 索引碎片整理"></a>3. 索引碎片整理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表的碎片情况</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;orders&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 整理表碎片</span></span><br><span class="line">OPTIMIZE <span class="keyword">TABLE</span> orders;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过分析慢查询日志，我们发现了系统中的性能瓶颈</span></span><br><span class="line"><span class="comment">-- 针对性地设计和优化索引，使查询性能得到显著提升</span></span><br><span class="line"><span class="comment">-- 系统整体响应时间减少了50%以上，用户体验大幅改善</span></span><br><span class="line"><span class="comment">-- 索引优化是一个持续的过程，需要结合业务变化不断调整</span></span><br></pre></td></tr></table></figure><p>通过这次MySQL索引优化实践，我们不仅解决了当前的性能问题，还建立了一套完整的数据库性能监控和优化机制。主要收获包括：</p><ol><li><p><strong>慢查询日志是发现性能问题的有效工具</strong>：通过分析慢查询日志，我们能够精确定位性能瓶颈所在。</p></li><li><p><strong>合理的索引设计至关重要</strong>：根据查询模式设计合适的索引，能够显著提升查询性能。</p></li><li><p><strong>SQL优化与索引优化相辅相成</strong>：有时需要重写SQL以充分利用索引。</p></li><li><p><strong>持续监控与维护不可或缺</strong>：建立长效机制，定期分析和优化数据库性能。</p></li></ol><p>在实际项目中，我们应该在系统设计初期就考虑数据库索引设计，并随着业务发展不断优化调整，这样才能保证系统在数据量增长的情况下依然保持良好的性能。</p><h2 id="注意事项与容易忽略点"><a href="#注意事项与容易忽略点" class="headerlink" title="注意事项与容易忽略点"></a>注意事项与容易忽略点</h2><ol><li><strong>索引并非越多越好</strong>：过多的索引会影响写入性能，增加存储空间</li><li><strong>复合索引的顺序很重要</strong>：遵循最左前缀原则，合理安排索引列顺序</li><li><strong>避免在索引列上使用函数</strong>：会导致索引失效</li><li><strong>定期更新统计信息</strong>：<code>ANALYZE TABLE</code>命令可以更新索引统计信息</li><li><strong>注意索引的选择性</strong>：选择性低的列不适合单独建立索引</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 索引优化 </tag>
            
            <tag> 慢查询 </tag>
            
            <tag> 性能调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次踩坑：MyBatis 动态SQL写炸库的经历</title>
      <link href="/myblog/2023/07/10/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%B8%A9%E5%9D%91%EF%BC%9AMyBatis%20%E5%8A%A8%E6%80%81SQL%E5%86%99%E7%82%B8%E5%BA%93%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
      <url>/myblog/2023/07/10/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%B8%A9%E5%9D%91%EF%BC%9AMyBatis%20%E5%8A%A8%E6%80%81SQL%E5%86%99%E7%82%B8%E5%BA%93%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个电商系统的订单查询模块中</span></span><br><span class="line"><span class="comment">// 我们需要实现一个复杂的多条件查询功能</span></span><br><span class="line"><span class="comment">// 用户可以根据订单号、时间范围、商品名称、订单状态等多个条件进行组合查询</span></span><br><span class="line"><span class="comment">// 看似简单的需求，却因为动态SQL的不当使用，引发了一场数据库灾难</span></span><br></pre></td></tr></table></figure><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>某天下午，运维突然反馈生产环境数据库CPU使用率飙升至100%，大量查询请求超时，系统几乎处于瘫痪状态。通过紧急排查，我们发现问题出在订单查询接口上，该接口使用了MyBatis的动态SQL来构建复杂的查询条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题接口的调用量并不大，每分钟约100次</span></span><br><span class="line"><span class="comment">// 但每次查询都会导致数据库CPU飙升</span></span><br><span class="line"><span class="comment">// 查询执行时间从正常的200ms飙升至10000ms以上</span></span><br><span class="line"><span class="comment">// 数据库连接池很快被耗尽，导致其他业务也受到影响</span></span><br></pre></td></tr></table></figure><h2 id="问题代码分析"><a href="#问题代码分析" class="headerlink" title="问题代码分析"></a>问题代码分析</h2><h3 id="原始的动态SQL"><a href="#原始的动态SQL" class="headerlink" title="原始的动态SQL"></a>原始的动态SQL</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 问题SQL：订单多条件查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findOrders&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Order&quot;</span>&gt;</span></span><br><span class="line">    SELECT o.*, u.username as userName</span><br><span class="line">    FROM t_order o</span><br><span class="line">    LEFT JOIN t_user u ON o.user_id = u.id</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;orderNo != null and orderNo != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND o.order_no LIKE CONCAT(&#x27;%&#x27;, #&#123;orderNo&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;startTime != null&quot;</span>&gt;</span></span><br><span class="line">            AND o.create_time &gt;= #&#123;startTime&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;endTime != null&quot;</span>&gt;</span></span><br><span class="line">            AND o.create_time <span class="symbol">&amp;lt;</span>= #&#123;endTime&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            AND o.status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;productName != null and productName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND EXISTS (</span><br><span class="line">                SELECT 1 FROM t_order_item oi </span><br><span class="line">                LEFT JOIN t_product p ON oi.product_id = p.id</span><br><span class="line">                WHERE oi.order_id = o.id AND p.name LIKE CONCAT(&#x27;%&#x27;, #&#123;productName&#125;, &#x27;%&#x27;)</span><br><span class="line">            )</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userPhone != null and userPhone != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND u.phone LIKE CONCAT(&#x27;%&#x27;, #&#123;userPhone&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    ORDER BY o.create_time DESC</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>通过分析执行计划和SQL日志，我们发现了几个严重问题：</p><ol><li><strong>模糊查询的滥用</strong>：几乎所有的字符串条件都使用了前后模糊匹配（<code>%关键词%</code>），导致无法使用索引</li><li><strong>EXISTS子查询</strong>：产品名称的查询使用了EXISTS子查询，对于每一行订单记录都要执行一次子查询</li><li><strong>多表关联</strong>：查询涉及了多个表的关联，增加了查询复杂度</li><li><strong>排序问题</strong>：大结果集的排序操作消耗了大量内存和CPU资源</li><li><strong>缺少分页</strong>：查询没有限制返回结果的数量，可能返回大量数据</li></ol><p>最致命的是，当用户不输入任何查询条件时（全部为null），这个查询会返回所有订单记录并进行排序，随着订单表数据量的增长，这个操作变得异常昂贵。</p><h2 id="执行计划分析"><a href="#执行计划分析" class="headerlink" title="执行计划分析"></a>执行计划分析</h2><p>使用MySQL的EXPLAIN命令分析问题SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> o.<span class="operator">*</span>, u.username <span class="keyword">as</span> userName</span><br><span class="line"><span class="keyword">FROM</span> t_order o</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_user u <span class="keyword">ON</span> o.user_id <span class="operator">=</span> u.id</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> t_order_item oi </span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_product p <span class="keyword">ON</span> oi.product_id <span class="operator">=</span> p.id</span><br><span class="line">    <span class="keyword">WHERE</span> oi.order_id <span class="operator">=</span> o.id <span class="keyword">AND</span> p.name <span class="keyword">LIKE</span> <span class="string">&#x27;%手机%&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.create_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>执行计划结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+--------------------+-------+------------+--------+---------------+---------+---------+--------------------+------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type        | table | partitions | type   | possible_keys | key     | key_len | ref                | rows | filtered | Extra                                              |</span><br><span class="line">+----+--------------------+-------+------------+--------+---------------+---------+---------+--------------------+------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | PRIMARY            | o     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL               | 1000 |   100.00 | Using temporary; Using filesort                    |</span><br><span class="line">|  1 | PRIMARY            | u     | NULL       | eq_ref | PRIMARY       | PRIMARY | 8       | shop.o.user_id     |    1 |   100.00 | NULL                                               |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | oi    | NULL       | ref    | order_id      | order_id| 8       | shop.o.id          |   10 |   100.00 | Using index                                        |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | p     | NULL       | eq_ref | PRIMARY       | PRIMARY | 8       | shop.oi.product_id |    1 |    10.00 | Using where                                        |</span><br><span class="line">+----+--------------------+-------+------------+--------+---------------+---------+---------+--------------------+------+----------+----------------------------------------------------+</span><br></pre></td></tr></table></figure><p>从执行计划可以看出：</p><ol><li>主查询对t_order表进行了全表扫描（type&#x3D;ALL）</li><li>使用了临时表和文件排序（Using temporary; Using filesort）</li><li>子查询是一个依赖子查询（DEPENDENT SUBQUERY），需要为外部查询的每一行执行一次</li><li>产品名称的模糊查询（p.name LIKE ‘%手机%’）无法使用索引</li></ol><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><h3 id="1-重写动态SQL"><a href="#1-重写动态SQL" class="headerlink" title="1. 重写动态SQL"></a>1. 重写动态SQL</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 优化后的SQL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findOrders&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Order&quot;</span>&gt;</span></span><br><span class="line">    SELECT o.*, u.username as userName</span><br><span class="line">    FROM t_order o</span><br><span class="line">    LEFT JOIN t_user u ON o.user_id = u.id</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用精确匹配或右模糊，可以利用索引 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;orderNo != null and orderNo != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND o.order_no = #&#123;orderNo&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;startTime != null&quot;</span>&gt;</span></span><br><span class="line">            AND o.create_time &gt;= #&#123;startTime&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;endTime != null&quot;</span>&gt;</span></span><br><span class="line">            AND o.create_time <span class="symbol">&amp;lt;</span>= #&#123;endTime&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            AND o.status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userPhone != null and userPhone != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND u.phone = #&#123;userPhone&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 商品名称查询改为JOIN方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;productName != null and productName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND o.id IN (</span><br><span class="line">                SELECT DISTINCT oi.order_id </span><br><span class="line">                FROM t_order_item oi </span><br><span class="line">                JOIN t_product p ON oi.product_id = p.id</span><br><span class="line">                WHERE p.name = #&#123;productName&#125;</span><br><span class="line">            )</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    ORDER BY o.create_time DESC</span><br><span class="line">    LIMIT #&#123;offset&#125;, #&#123;limit&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-添加合适的索引"><a href="#2-添加合适的索引" class="headerlink" title="2. 添加合适的索引"></a>2. 添加合适的索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 为订单表添加复合索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> t_order <span class="keyword">ADD</span> INDEX idx_order_create_time_status (create_time, status);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为用户表的手机号添加索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> t_user <span class="keyword">ADD</span> INDEX idx_user_phone (phone);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为商品表的名称添加索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> t_product <span class="keyword">ADD</span> INDEX idx_product_name (name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为订单项表添加索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> t_order_item <span class="keyword">ADD</span> INDEX idx_order_item_product (product_id);</span><br></pre></td></tr></table></figure><h3 id="3-服务层优化"><a href="#3-服务层优化" class="headerlink" title="3. 服务层优化"></a>3. 服务层优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;Order&gt; <span class="title function_">findOrders</span><span class="params">(OrderQueryDTO queryDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数校验和默认值设置</span></span><br><span class="line">        <span class="keyword">if</span> (queryDTO.getPageSize() == <span class="literal">null</span> || queryDTO.getPageSize() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            queryDTO.setPageSize(<span class="number">10</span>); <span class="comment">// 默认每页10条</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (queryDTO.getPageNum() == <span class="literal">null</span> || queryDTO.getPageNum() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            queryDTO.setPageNum(<span class="number">1</span>); <span class="comment">// 默认第一页</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算分页参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> (queryDTO.getPageNum() - <span class="number">1</span>) * queryDTO.getPageSize();</span><br><span class="line">        queryDTO.setOffset(offset);</span><br><span class="line">        queryDTO.setLimit(queryDTO.getPageSize());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果查询条件全部为空，强制使用最近一周的时间范围</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allEmpty</span> <span class="operator">=</span> StringUtils.isEmpty(queryDTO.getOrderNo()) </span><br><span class="line">                &amp;&amp; queryDTO.getStatus() == <span class="literal">null</span></span><br><span class="line">                &amp;&amp; StringUtils.isEmpty(queryDTO.getProductName())</span><br><span class="line">                &amp;&amp; StringUtils.isEmpty(queryDTO.getUserPhone());</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> (allEmpty &amp;&amp; queryDTO.getStartTime() == <span class="literal">null</span> &amp;&amp; queryDTO.getEndTime() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 设置默认时间范围为最近7天</span></span><br><span class="line">            queryDTO.setEndTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            calendar.add(Calendar.DAY_OF_MONTH, -<span class="number">7</span>);</span><br><span class="line">            queryDTO.setStartTime(calendar.getTime());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Order&gt; orders = orderMapper.findOrders(queryDTO);</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> orderMapper.countOrders(queryDTO);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;(orders, total, queryDTO.getPageNum(), queryDTO.getPageSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-添加缓存"><a href="#4-添加缓存" class="headerlink" title="4. 添加缓存"></a>4. 添加缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加缓存，热门查询条件的结果可以缓存</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;Order&gt; <span class="title function_">findOrders</span><span class="params">(OrderQueryDTO queryDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建缓存key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cacheKey</span> <span class="operator">=</span> buildCacheKey(queryDTO);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试从缓存获取</span></span><br><span class="line">        PageResult&lt;Order&gt; cachedResult = (PageResult&lt;Order&gt;) redisTemplate.opsForValue().get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (cachedResult != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedResult;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 缓存未命中，执行查询</span></span><br><span class="line">        <span class="comment">// ... 执行之前的查询逻辑 ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将结果放入缓存，设置过期时间</span></span><br><span class="line">        redisTemplate.opsForValue().set(cacheKey, pageResult, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pageResult;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">buildCacheKey</span><span class="params">(OrderQueryDTO queryDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建缓存key，包含所有查询条件</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;order:query:&quot;</span>);</span><br><span class="line">        sb.append(queryDTO.getPageNum()).append(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        sb.append(queryDTO.getPageSize()).append(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        <span class="comment">// ... 添加其他查询条件 ...</span></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><table><thead><tr><th>优化项</th><th>优化前</th><th>优化后</th><th>提升比例</th></tr></thead><tbody><tr><td>平均查询时间</td><td>10000ms</td><td>150ms</td><td>98.5%</td></tr><tr><td>数据库CPU使用率</td><td>95%</td><td>20%</td><td>78.9%</td></tr><tr><td>每秒查询数(QPS)</td><td>5</td><td>200</td><td>3900%</td></tr><tr><td>超时请求比例</td><td>60%</td><td>0.1%</td><td>99.8%</td></tr></tbody></table><h2 id="踩坑总结与最佳实践"><a href="#踩坑总结与最佳实践" class="headerlink" title="踩坑总结与最佳实践"></a>踩坑总结与最佳实践</h2><h3 id="1-动态SQL编写原则"><a href="#1-动态SQL编写原则" class="headerlink" title="1. 动态SQL编写原则"></a>1. 动态SQL编写原则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 避免使用前置模糊查询（LIKE &#x27;%关键词&#x27;）</span></span><br><span class="line"><span class="comment">// 2. 尽量使用索引字段作为查询条件</span></span><br><span class="line"><span class="comment">// 3. 复杂的子查询考虑改写为JOIN或IN子查询</span></span><br><span class="line"><span class="comment">// 4. 大数据量查询必须分页</span></span><br><span class="line"><span class="comment">// 5. 避免不必要的LEFT JOIN，能用INNER JOIN就不用LEFT JOIN</span></span><br></pre></td></tr></table></figure><h3 id="2-索引设计原则"><a href="#2-索引设计原则" class="headerlink" title="2. 索引设计原则"></a>2. 索引设计原则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 为WHERE条件、JOIN条件、ORDER BY和GROUP BY字段创建索引</span></span><br><span class="line"><span class="comment">// 2. 合理使用复合索引，遵循最左前缀原则</span></span><br><span class="line"><span class="comment">// 3. 避免索引冗余，控制索引数量</span></span><br><span class="line"><span class="comment">// 4. 定期分析索引使用情况，删除无用索引</span></span><br></pre></td></tr></table></figure><h3 id="3-查询保护措施"><a href="#3-查询保护措施" class="headerlink" title="3. 查询保护措施"></a>3. 查询保护措施</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 为所有查询设置默认分页参数</span></span><br><span class="line"><span class="comment">// 2. 为空条件查询设置默认限制条件（如时间范围）</span></span><br><span class="line"><span class="comment">// 3. 使用数据库连接池的查询超时设置</span></span><br><span class="line"><span class="comment">// 4. 实现服务降级策略，防止雪崩效应</span></span><br></pre></td></tr></table></figure><h3 id="4-SQL性能监控"><a href="#4-SQL性能监控" class="headerlink" title="4. SQL性能监控"></a>4. SQL性能监控</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用慢查询日志记录性能问题SQL</span></span><br><span class="line"><span class="comment">// 2. 定期分析执行计划，优化问题查询</span></span><br><span class="line"><span class="comment">// 3. 使用APM工具监控SQL执行情况</span></span><br><span class="line"><span class="comment">// 4. 建立SQL审计机制，上线前进行性能评估</span></span><br></pre></td></tr></table></figure><h2 id="实际业务场景应用"><a href="#实际业务场景应用" class="headerlink" title="实际业务场景应用"></a>实际业务场景应用</h2><h3 id="1-大数据量报表查询优化"><a href="#1-大数据量报表查询优化" class="headerlink" title="1. 大数据量报表查询优化"></a>1. 大数据量报表查询优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReportServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ReportService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售报表查询优化示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SalesReportVO&gt; <span class="title function_">getSalesReport</span><span class="params">(ReportQueryDTO queryDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 使用物化视图或预计算表</span></span><br><span class="line">        <span class="keyword">if</span> (isLatestData(queryDTO)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getFromMaterializedView(queryDTO);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 针对大时间范围，使用分区表查询</span></span><br><span class="line">        <span class="keyword">if</span> (isLargeTimeRange(queryDTO)) &#123;</span><br><span class="line">            <span class="keyword">return</span> queryFromPartitionTable(queryDTO);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 常规查询使用优化的SQL</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sql.append(<span class="string">&quot;SELECT DATE_FORMAT(o.create_time, &#x27;%Y-%m-%d&#x27;) as date, &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;SUM(o.total_amount) as total_sales, COUNT(o.id) as order_count &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;FROM t_order o &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;WHERE o.status = &#x27;COMPLETED&#x27; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加时间范围条件</span></span><br><span class="line">        <span class="keyword">if</span> (queryDTO.getStartDate() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;AND o.create_time &gt;= ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (queryDTO.getEndDate() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;AND o.create_time &lt;= ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sql.append(<span class="string">&quot;GROUP BY DATE_FORMAT(o.create_time, &#x27;%Y-%m-%d&#x27;) &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;ORDER BY date ASC&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 准备参数</span></span><br><span class="line">        List&lt;Object&gt; params = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (queryDTO.getStartDate() != <span class="literal">null</span>) &#123;</span><br><span class="line">            params.add(queryDTO.getStartDate());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (queryDTO.getEndDate() != <span class="literal">null</span>) &#123;</span><br><span class="line">            params.add(queryDTO.getEndDate());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql.toString(), params.toArray(), <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(SalesReportVO.class));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他辅助方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-复杂条件筛选的商品搜索"><a href="#2-复杂条件筛选的商品搜索" class="headerlink" title="2. 复杂条件筛选的商品搜索"></a>2. 复杂条件筛选的商品搜索</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优化的商品多条件搜索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">searchProducts</span><span class="params">(ProductSearchDTO searchDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用MyBatis的SqlBuilder手动构建SQL，更灵活控制SQL生成</span></span><br><span class="line">        <span class="type">SQL</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SQL</span>()</span><br><span class="line">            .SELECT(<span class="string">&quot;p.id, p.name, p.price, p.stock, p.category_id, c.name as category_name&quot;</span>)</span><br><span class="line">            .FROM(<span class="string">&quot;t_product p&quot;</span>)</span><br><span class="line">            .JOIN(<span class="string">&quot;t_category c ON p.category_id = c.id&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动态添加查询条件</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(searchDTO.getKeyword())) &#123;</span><br><span class="line">            <span class="comment">// 使用全文索引而不是LIKE</span></span><br><span class="line">            sql.WHERE(<span class="string">&quot;MATCH(p.name, p.description) AGAINST(#&#123;keyword&#125; IN BOOLEAN MODE)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (searchDTO.getCategoryId() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.WHERE(<span class="string">&quot;p.category_id = #&#123;categoryId&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (searchDTO.getMinPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.WHERE(<span class="string">&quot;p.price &gt;= #&#123;minPrice&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (searchDTO.getMaxPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.WHERE(<span class="string">&quot;p.price &lt;= #&#123;maxPrice&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加库存条件</span></span><br><span class="line">        <span class="keyword">if</span> (Boolean.TRUE.equals(searchDTO.getInStock())) &#123;</span><br><span class="line">            sql.WHERE(<span class="string">&quot;p.stock &gt; 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加排序</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderBy</span> <span class="operator">=</span> <span class="string">&quot;p.create_time DESC&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(searchDTO.getOrderBy())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;price_asc&quot;</span>.equals(searchDTO.getOrderBy())) &#123;</span><br><span class="line">                orderBy = <span class="string">&quot;p.price ASC&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;price_desc&quot;</span>.equals(searchDTO.getOrderBy())) &#123;</span><br><span class="line">                orderBy = <span class="string">&quot;p.price DESC&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;sales&quot;</span>.equals(searchDTO.getOrderBy())) &#123;</span><br><span class="line">                orderBy = <span class="string">&quot;p.sales_count DESC&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sql.ORDER_BY(orderBy);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加分页</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">finalSql</span> <span class="operator">=</span> sql.toString() + <span class="string">&quot; LIMIT #&#123;offset&#125;, #&#123;limit&#125;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用MyBatis的SelectBuilder执行SQL</span></span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;keyword&quot;</span>, searchDTO.getKeyword());</span><br><span class="line">        params.put(<span class="string">&quot;categoryId&quot;</span>, searchDTO.getCategoryId());</span><br><span class="line">        params.put(<span class="string">&quot;minPrice&quot;</span>, searchDTO.getMinPrice());</span><br><span class="line">        params.put(<span class="string">&quot;maxPrice&quot;</span>, searchDTO.getMaxPrice());</span><br><span class="line">        params.put(<span class="string">&quot;offset&quot;</span>, (searchDTO.getPageNum() - <span class="number">1</span>) * searchDTO.getPageSize());</span><br><span class="line">        params.put(<span class="string">&quot;limit&quot;</span>, searchDTO.getPageSize());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sqlSessionTemplate.selectList(<span class="string">&quot;com.example.mapper.ProductMapper.searchProductsWithRawSql&quot;</span>, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-用户行为分析查询"><a href="#3-用户行为分析查询" class="headerlink" title="3. 用户行为分析查询"></a>3. 用户行为分析查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBehaviorMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户行为分析 - 使用分库分表策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserBehaviorVO&gt; <span class="title function_">analyzeUserBehavior</span><span class="params">(UserBehaviorQueryDTO queryDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 确定查询的分表</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tableSuffix</span> <span class="operator">=</span> getTableSuffix(queryDTO.getUserId());</span><br><span class="line">        <span class="type">String</span> <span class="variable">behaviorTable</span> <span class="operator">=</span> <span class="string">&quot;t_user_behavior_&quot;</span> + tableSuffix;</span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sql.append(<span class="string">&quot;SELECT b.behavior_type, COUNT(*) as count, &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;AVG(TIMESTAMPDIFF(SECOND, b.start_time, b.end_time)) as avg_duration &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;FROM &quot;</span>).append(behaviorTable).append(<span class="string">&quot; b &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;WHERE b.user_id = ? &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;Object&gt; params = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        params.add(queryDTO.getUserId());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加时间范围</span></span><br><span class="line">        <span class="keyword">if</span> (queryDTO.getStartTime() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;AND b.create_time &gt;= ? &quot;</span>);</span><br><span class="line">            params.add(queryDTO.getStartTime());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (queryDTO.getEndTime() != <span class="literal">null</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;AND b.create_time &lt;= ? &quot;</span>);</span><br><span class="line">            params.add(queryDTO.getEndTime());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加行为类型过滤</span></span><br><span class="line">        <span class="keyword">if</span> (queryDTO.getBehaviorTypes() != <span class="literal">null</span> &amp;&amp; !queryDTO.getBehaviorTypes().isEmpty()) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;AND b.behavior_type IN (&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queryDTO.getBehaviorTypes().size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    sql.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">                params.add(queryDTO.getBehaviorTypes().get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            sql.append(<span class="string">&quot;) &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sql.append(<span class="string">&quot;GROUP BY b.behavior_type &quot;</span>);</span><br><span class="line">        sql.append(<span class="string">&quot;ORDER BY count DESC&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用JdbcTemplate执行查询</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql.toString(), params.toArray(), <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(UserBehaviorVO.class));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID确定分表后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getTableSuffix</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="comment">// 简单的分表策略：用户ID取模</span></span><br><span class="line">        <span class="keyword">return</span> String.valueOf(userId % <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这次踩坑经历让我深刻认识到MyBatis动态SQL的强大与危险</span></span><br><span class="line"><span class="comment">// 在处理复杂查询时，必须充分考虑SQL性能和数据库负载</span></span><br><span class="line"><span class="comment">// 通过合理的索引设计、SQL优化、分页限制和缓存策略</span></span><br><span class="line"><span class="comment">// 我们不仅解决了当前问题，还建立了更健壮的查询机制</span></span><br><span class="line"><span class="comment">// 记住：一个不经意的SQL可能会成为整个系统的性能瓶颈</span></span><br></pre></td></tr></table></figure><h2 id="注意事项与容易忽略点"><a href="#注意事项与容易忽略点" class="headerlink" title="注意事项与容易忽略点"></a>注意事项与容易忽略点</h2><ol><li><strong>动态SQL的条件顺序</strong>：在复合索引中，条件的顺序会影响索引的使用效率</li><li><strong>COUNT查询优化</strong>：分页查询中的总数统计可能同样耗时，需要单独优化</li><li><strong>参数校验</strong>：永远不要信任前端传来的参数，必须进行有效性验证</li><li><strong>监控告警</strong>：建立有效的监控机制，及早发现性能问题</li><li><strong>定期维护</strong>：数据量增长后，原本高效的查询可能变得低效，需要定期检查和优化</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> 性能调优 </tag>
            
            <tag> SQL优化 </tag>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业级CRM系统的第一次模块开发：需求到落地</title>
      <link href="/myblog/2023/06/15/%E4%BC%81%E4%B8%9A%E7%BA%A7CRM%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%9A%E9%9C%80%E6%B1%82%E5%88%B0%E8%90%BD%E5%9C%B0/"/>
      <url>/myblog/2023/06/15/%E4%BC%81%E4%B8%9A%E7%BA%A7CRM%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%9A%E9%9C%80%E6%B1%82%E5%88%B0%E8%90%BD%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 企业级CRM系统是现代企业管理客户关系的核心工具</span></span><br><span class="line"><span class="comment">// 第一个模块的开发往往决定了整个系统的技术基调和架构方向</span></span><br><span class="line"><span class="comment">// 本文记录从需求收集到功能落地的完整过程，为后续模块开发提供参考</span></span><br></pre></td></tr></table></figure><h2 id="需求分析与规划"><a href="#需求分析与规划" class="headerlink" title="需求分析与规划"></a>需求分析与规划</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 需求收集：与业务部门深入沟通，明确痛点</span></span><br><span class="line"><span class="comment">// 2. 用户故事梳理：将业务需求转化为用户故事</span></span><br><span class="line"><span class="comment">// 3. 功能优先级排序：使用MoSCoW方法划分必要功能和可选功能</span></span><br><span class="line"><span class="comment">// 4. 迭代规划：确定MVP(最小可行产品)范围和交付时间线</span></span><br></pre></td></tr></table></figure><h3 id="核心需求提炼"><a href="#核心需求提炼" class="headerlink" title="核心需求提炼"></a>核心需求提炼</h3><p>在与销售、市场和客服等多个部门的研讨会后，我们提炼出客户管理模块的核心需求：</p><ol><li><strong>客户信息管理</strong>：包括基础信息录入、查询、编辑和删除</li><li><strong>客户分类与标签</strong>：支持多维度客户分类和自定义标签</li><li><strong>客户跟进记录</strong>：记录与客户的每次互动，支持多种互动类型</li><li><strong>客户生命周期管理</strong>：跟踪客户从潜在到成交的全过程</li><li><strong>数据导入导出</strong>：支持批量操作和与其他系统的数据交换</li></ol><h2 id="技术选型与架构设计"><a href="#技术选型与架构设计" class="headerlink" title="技术选型与架构设计"></a>技术选型与架构设计</h2><h3 id="技术栈选择"><a href="#技术栈选择" class="headerlink" title="技术栈选择"></a>技术栈选择</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端技术栈</span></span><br><span class="line"><span class="type">SpringBoot</span> <span class="variable">springBoot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringBoot</span>(<span class="string">&quot;2.7.0&quot;</span>);</span><br><span class="line"><span class="type">MyBatisPlus</span> <span class="variable">mybatisPlus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBatisPlus</span>(<span class="string">&quot;3.5.1&quot;</span>);</span><br><span class="line"><span class="type">Redis</span> <span class="variable">redis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Redis</span>(<span class="string">&quot;6.2&quot;</span>);</span><br><span class="line"><span class="type">Shiro</span> <span class="variable">shiro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shiro</span>(<span class="string">&quot;1.9.0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端技术栈</span></span><br><span class="line"><span class="type">Vue</span> <span class="variable">vue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vue</span>(<span class="string">&quot;3.2&quot;</span>);</span><br><span class="line"><span class="type">ElementPlus</span> <span class="variable">elementPlus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ElementPlus</span>(<span class="string">&quot;2.2.0&quot;</span>);</span><br><span class="line"><span class="type">Axios</span> <span class="variable">axios</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Axios</span>(<span class="string">&quot;0.27.2&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p>采用经典的三层架构，但在微服务的背景下做了适当调整：</p><ol><li><strong>表现层</strong>：Vue3 + Element Plus 构建的SPA应用</li><li><strong>业务层</strong>：Spring Boot 微服务，按业务领域划分</li><li><strong>数据层</strong>：MySQL + Redis，考虑读写分离和缓存策略</li></ol><h3 id="数据模型设计"><a href="#数据模型设计" class="headerlink" title="数据模型设计"></a>数据模型设计</h3><p>客户管理模块的核心实体关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;crm_customer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;        <span class="comment">// 客户名称</span></span><br><span class="line">    <span class="keyword">private</span> String contactName; <span class="comment">// 联系人</span></span><br><span class="line">    <span class="keyword">private</span> String phone;       <span class="comment">// 联系电话</span></span><br><span class="line">    <span class="keyword">private</span> String email;       <span class="comment">// 电子邮箱</span></span><br><span class="line">    <span class="keyword">private</span> String address;     <span class="comment">// 地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;customer_type&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer customerType; <span class="comment">// 客户类型：1-潜在，2-意向，3-成交，4-流失</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String source;      <span class="comment">// 客户来源</span></span><br><span class="line">    <span class="keyword">private</span> Long ownerId;       <span class="comment">// 负责人ID</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;create_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime; <span class="comment">// 创建时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;update_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime; <span class="comment">// 更新时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;is_deleted&quot;)</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;  <span class="comment">// 逻辑删除标记</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;crm_follow_record&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowRecord</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;customer_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long customerId;    <span class="comment">// 客户ID</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;follow_type&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer followType; <span class="comment">// 跟进类型：1-电话，2-邮件，3-拜访，4-会议</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String content;     <span class="comment">// 跟进内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;next_follow_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime nextFollowTime; <span class="comment">// 下次跟进时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;create_user_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUserId;  <span class="comment">// 创建人ID</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;create_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime; <span class="comment">// 创建时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口设计与开发"><a href="#接口设计与开发" class="headerlink" title="接口设计与开发"></a>接口设计与开发</h2><h3 id="RESTful-API-设计"><a href="#RESTful-API-设计" class="headerlink" title="RESTful API 设计"></a>RESTful API 设计</h3><p>遵循RESTful设计原则，为客户管理模块设计以下接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户管理接口</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/customers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建客户</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Customer&gt; <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> CustomerDTO customerDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(customerService.createCustomer(customerDTO));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取客户详情</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;CustomerVO&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(customerService.getCustomerById(id));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新客户信息</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable</span> Long id, <span class="meta">@RequestBody</span> CustomerDTO customerDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(customerService.updateCustomer(id, customerDTO));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除客户</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(customerService.deleteCustomer(id));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分页查询客户列表</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;PageResult&lt;CustomerVO&gt;&gt; <span class="title function_">page</span><span class="params">(CustomerQuery query)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(customerService.pageCustomers(query));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 导出客户数据</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/export&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(CustomerQuery query, HttpServletResponse response)</span> &#123;</span><br><span class="line">        customerService.exportCustomers(query, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 导入客户数据</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/import&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;ImportResult&gt; <span class="title function_">importCustomers</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(customerService.importCustomers(file));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务层实现"><a href="#服务层实现" class="headerlink" title="服务层实现"></a>服务层实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerMapper customerMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FollowRecordMapper followRecordMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">createCustomer</span><span class="params">(CustomerDTO dto)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 数据转换</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        BeanUtils.copyProperties(dto, customer);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 设置默认值</span></span><br><span class="line">        customer.setCreateTime(LocalDateTime.now());</span><br><span class="line">        customer.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        customer.setIsDeleted(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 获取当前用户作为负责人</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentUserId</span> <span class="operator">=</span> SecurityUtils.getCurrentUserId();</span><br><span class="line">        customer.setOwnerId(currentUserId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 保存客户信息</span></span><br><span class="line">        customerMapper.insert(customer);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 如果有初始跟进记录，保存跟进记录</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(dto.getInitialFollowContent())) &#123;</span><br><span class="line">            <span class="type">FollowRecord</span> <span class="variable">record</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FollowRecord</span>();</span><br><span class="line">            record.setCustomerId(customer.getId());</span><br><span class="line">            record.setFollowType(dto.getInitialFollowType());</span><br><span class="line">            record.setContent(dto.getInitialFollowContent());</span><br><span class="line">            record.setCreateUserId(currentUserId);</span><br><span class="line">            record.setCreateTime(LocalDateTime.now());</span><br><span class="line">            followRecordMapper.insert(record);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CustomerVO <span class="title function_">getCustomerById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 查询客户基本信息</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (customer == <span class="literal">null</span> || customer.getIsDeleted() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;客户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 数据转换</span></span><br><span class="line">        <span class="type">CustomerVO</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerVO</span>();</span><br><span class="line">        BeanUtils.copyProperties(customer, vo);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 查询最近的跟进记录</span></span><br><span class="line">        List&lt;FollowRecord&gt; records = followRecordMapper.selectRecentByCustomerId(id, <span class="number">5</span>);</span><br><span class="line">        vo.setRecentFollowRecords(records);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 查询负责人信息</span></span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">owner</span> <span class="operator">=</span> userService.getUserById(customer.getOwnerId());</span><br><span class="line">        vo.setOwnerName(owner != <span class="literal">null</span> ? owner.getName() : <span class="string">&quot;未知&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他方法实现...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端开发与交互设计"><a href="#前端开发与交互设计" class="headerlink" title="前端开发与交互设计"></a>前端开发与交互设计</h2><h3 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h3><p>客户管理模块的前端组件结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户列表页面</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;customer-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 搜索区域 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">&quot;search-card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;queryParams&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;queryForm&quot;</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;客户名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;queryParams.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入客户名称&quot;</span> <span class="attr">clearable</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;客户类型&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;customerType&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;queryParams.customerType&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择客户类型&quot;</span> <span class="attr">clearable</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in customerTypeOptions&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;timeRange&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-date-picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-model</span>=<span class="string">&quot;queryParams.timeRange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleQuery&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetQuery&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 操作区域 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">&quot;table-card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleAdd&quot;</span>&gt;</span>新增客户<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleImport&quot;</span>&gt;</span>导入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleExport&quot;</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 表格区域 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;customerList&quot;</span> <span class="attr">border</span> <span class="attr">stripe</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;客户名称&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">show-overflow-tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;contactName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;联系人&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">show-overflow-tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">label</span>=<span class="string">&quot;联系电话&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">show-overflow-tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;customerTypeName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;客户类型&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;ownerName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;负责人&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;160&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fixed</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleView(scope.row)&quot;</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleEdit(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleFollow(scope.row)&quot;</span>&gt;</span>跟进<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;delete-btn&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 分页区域 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:current-page</span>=<span class="string">&quot;queryParams.pageNum&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:page-sizes</span>=<span class="string">&quot;[10, 20, 50, 100]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:page-size</span>=<span class="string">&quot;queryParams.pageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 客户表单对话框 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">customer-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-if</span>=<span class="string">&quot;formVisible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:visible</span>=<span class="string">&quot;formVisible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:customer</span>=<span class="string">&quot;selectedCustomer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">close</span>=<span class="string">&quot;formVisible = false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">success</span>=<span class="string">&quot;handleFormSuccess&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 跟进记录对话框 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">follow-record-dialog</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-if</span>=<span class="string">&quot;followDialogVisible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:visible</span>=<span class="string">&quot;followDialogVisible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:customer-id</span>=<span class="string">&quot;selectedCustomerId&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">close</span>=<span class="string">&quot;followDialogVisible = false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">success</span>=<span class="string">&quot;handleFollowSuccess&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, reactive, onMounted, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; getCustomerPage, deleteCustomer, exportCustomers &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/crm/customer&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">CustomerForm</span> <span class="keyword">from</span> <span class="string">&#x27;./components/CustomerForm.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">FollowRecordDialog</span> <span class="keyword">from</span> <span class="string">&#x27;./components/FollowRecordDialog.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;CustomerList&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">CustomerForm</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">FollowRecordDialog</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 查询参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">queryParams</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">pageNum</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">pageSize</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">customerType</span>: <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">timeRange</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 客户列表数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">customerList</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 总记录数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">total</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 表单可见性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">formVisible</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 跟进对话框可见性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">followDialogVisible</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 选中的客户</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">selectedCustomer</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 选中的客户ID</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">selectedCustomerId</span>: <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 客户类型选项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">customerTypeOptions</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">&#x27;潜在客户&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">&#x27;意向客户&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123; <span class="attr">value</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">&#x27;成交客户&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123; <span class="attr">value</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">&#x27;流失客户&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取客户列表数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">getList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> <span class="title function_">getCustomerPage</span>(state.<span class="property">queryParams</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        state.<span class="property">customerList</span> = data.<span class="property">records</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 转换客户类型名称</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> typeOption = state.<span class="property">customerTypeOptions</span>.<span class="title function_">find</span>(<span class="function"><span class="params">opt</span> =&gt;</span> opt.<span class="property">value</span> === item.<span class="property">customerType</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          item.<span class="property">customerTypeName</span> = typeOption ? typeOption.<span class="property">label</span> : <span class="string">&#x27;未知&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> item</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        state.<span class="property">total</span> = data.<span class="property">total</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">catch</span> (error) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取客户列表失败&#x27;</span>, error)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 搜索按钮点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleQuery</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">queryParams</span>.<span class="property">pageNum</span> = <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 重置按钮点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">resetQuery</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">queryParams</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">pageNum</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">pageSize</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">customerType</span>: <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">timeRange</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 新增客户按钮点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleAdd</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">selectedCustomer</span> = &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">formVisible</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 查看客户按钮点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleView</span> = (<span class="params">row</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 跳转到客户详情页</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      router.<span class="title function_">push</span>(<span class="string">`/crm/customer/detail/<span class="subst">$&#123;row.id&#125;</span>`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 编辑客户按钮点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleEdit</span> = (<span class="params">row</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">selectedCustomer</span> = &#123; ...row &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">formVisible</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 跟进按钮点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleFollow</span> = (<span class="params">row</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">selectedCustomerId</span> = row.<span class="property">id</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">followDialogVisible</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 删除按钮点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleDelete</span> = (<span class="params">row</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">`确认删除客户「<span class="subst">$&#123;row.name&#125;</span>」吗？`</span>, <span class="string">&#x27;警告&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;).<span class="title function_">then</span>(<span class="title function_">async</span> () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">await</span> <span class="title function_">deleteCustomer</span>(row.<span class="property">id</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">getList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">catch</span> (error) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;删除客户失败&#x27;</span>, error)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 导出按钮点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleExport</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">exportCustomers</span>(state.<span class="property">queryParams</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 表单提交成功回调</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleFormSuccess</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">formVisible</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 跟进记录提交成功回调</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleFollowSuccess</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">followDialogVisible</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;跟进记录添加成功&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 页码改变事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleCurrentChange</span> = (<span class="params">pageNum</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">queryParams</span>.<span class="property">pageNum</span> = pageNum</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 每页条数改变事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleSizeChange</span> = (<span class="params">pageSize</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">queryParams</span>.<span class="property">pageSize</span> = pageSize</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state.<span class="property">queryParams</span>.<span class="property">pageNum</span> = <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ...<span class="title function_">toRefs</span>(state),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleQuery,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      resetQuery,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleAdd,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleView,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleEdit,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleFollow,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleDelete,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleExport,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleFormSuccess,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleFollowSuccess,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleCurrentChange,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      handleSizeChange</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="测试与部署"><a href="#测试与部署" class="headerlink" title="测试与部署"></a>测试与部署</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerServiceTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 准备测试数据</span></span><br><span class="line">        <span class="type">CustomerDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerDTO</span>();</span><br><span class="line">        dto.setName(<span class="string">&quot;测试客户&quot;</span>);</span><br><span class="line">        dto.setContactName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        dto.setPhone(<span class="string">&quot;13800138000&quot;</span>);</span><br><span class="line">        dto.setEmail(<span class="string">&quot;test@example.com&quot;</span>);</span><br><span class="line">        dto.setCustomerType(<span class="number">1</span>);</span><br><span class="line">        dto.setSource(<span class="string">&quot;网站&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerService.createCustomer(dto);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证结果</span></span><br><span class="line">        assertNotNull(customer);</span><br><span class="line">        assertNotNull(customer.getId());</span><br><span class="line">        assertEquals(<span class="string">&quot;测试客户&quot;</span>, customer.getName());</span><br><span class="line">        assertEquals(<span class="string">&quot;张三&quot;</span>, customer.getContactName());</span><br><span class="line">        assertEquals(<span class="string">&quot;13800138000&quot;</span>, customer.getPhone());</span><br><span class="line">        assertEquals(<span class="string">&quot;网站&quot;</span>, customer.getSource());</span><br><span class="line">        assertEquals(Integer.valueOf(<span class="number">1</span>), customer.getCustomerType());</span><br><span class="line">        assertNotNull(customer.getCreateTime());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCustomerById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 准备测试数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">customerId</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Mock用户服务</span></span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">        userVO.setId(<span class="number">10L</span>);</span><br><span class="line">        userVO.setName(<span class="string">&quot;销售经理&quot;</span>);</span><br><span class="line">        <span class="keyword">when</span>(userService.getUserById(anyLong())).thenReturn(userVO);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        <span class="type">CustomerVO</span> <span class="variable">vo</span> <span class="operator">=</span> customerService.getCustomerById(customerId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证结果</span></span><br><span class="line">        assertNotNull(vo);</span><br><span class="line">        assertEquals(<span class="string">&quot;销售经理&quot;</span>, vo.getOwnerName());</span><br><span class="line">        assertNotNull(vo.getRecentFollowRecords());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他测试方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerControllerTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateCustomer</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 准备测试数据</span></span><br><span class="line">        <span class="type">CustomerDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerDTO</span>();</span><br><span class="line">        dto.setName(<span class="string">&quot;集成测试客户&quot;</span>);</span><br><span class="line">        dto.setContactName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        dto.setPhone(<span class="string">&quot;13900139000&quot;</span>);</span><br><span class="line">        dto.setEmail(<span class="string">&quot;integration@example.com&quot;</span>);</span><br><span class="line">        dto.setCustomerType(<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        mockMvc.perform(post(<span class="string">&quot;/api/customers&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(objectMapper.writeValueAsString(dto)))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.code&quot;</span>).value(<span class="number">200</span>))</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.data.name&quot;</span>).value(<span class="string">&quot;集成测试客户&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCustomerById</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        mockMvc.perform(get(<span class="string">&quot;/api/customers/1&quot;</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.code&quot;</span>).value(<span class="number">200</span>))</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.data&quot;</span>).exists());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他测试方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上线与效果评估"><a href="#上线与效果评估" class="headerlink" title="上线与效果评估"></a>上线与效果评估</h2><h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><ol><li><strong>环境准备</strong>：配置测试、预发布和生产环境</li><li><strong>数据库脚本</strong>：执行数据库初始化脚本</li><li><strong>应用部署</strong>：使用Jenkins流水线自动化部署</li><li><strong>监控配置</strong>：设置应用监控和告警</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部署脚本示例</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    </span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                checkout scm</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">&#x27;编译构建&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;mvn clean package -DskipTests&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">&#x27;单元测试&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;mvn test&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">&#x27;构建镜像&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;docker build -t crm-service:$&#123;BUILD_NUMBER&#125; .&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">&#x27;部署测试环境&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">when</span> &#123;</span><br><span class="line">                branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;kubectl apply -f k8s/test/&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;kubectl set image deployment/crm-service crm-service=crm-service:$&#123;BUILD_NUMBER&#125; -n test&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">&#x27;部署生产环境&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">when</span> &#123;</span><br><span class="line">                branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                input message: <span class="string">&#x27;确认部署到生产环境?&#x27;</span>, ok: <span class="string">&#x27;确认&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;kubectl apply -f k8s/prod/&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;kubectl set image deployment/crm-service crm-service=crm-service:$&#123;BUILD_NUMBER&#125; -n prod&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo <span class="string">&#x27;部署成功&#x27;</span></span><br><span class="line">            <span class="comment">// 发送成功通知</span></span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            echo <span class="string">&#x27;部署失败&#x27;</span></span><br><span class="line">            <span class="comment">// 发送失败通知</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果评估"><a href="#效果评估" class="headerlink" title="效果评估"></a>效果评估</h3><p>上线一个月后，我们收集了以下关键指标：</p><ol><li><strong>用户满意度</strong>：销售团队满意度从65%提升到92%</li><li><strong>效率提升</strong>：客户信息录入时间减少60%，查询效率提升80%</li><li><strong>数据质量</strong>：客户信息完整度从70%提升到95%</li><li><strong>业务指标</strong>：销售线索转化率提升15%，客户跟进频次增加40%</li></ol><h2 id="经验总结与后续规划"><a href="#经验总结与后续规划" class="headerlink" title="经验总结与后续规划"></a>经验总结与后续规划</h2><h3 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h3><ol><li><strong>需求理解至关重要</strong>：与业务部门的深入沟通是项目成功的基础</li><li><strong>技术选型要前瞻</strong>：考虑系统未来扩展性，避免技术债务</li><li><strong>测试驱动开发</strong>：单元测试和集成测试大大减少了上线后的问题</li><li><strong>用户体验优先</strong>：简洁直观的界面设计提高了系统接受度</li></ol><h3 id="后续规划"><a href="#后续规划" class="headerlink" title="后续规划"></a>后续规划</h3><p>基于第一个模块的成功经验，我们规划了后续的开发路线：</p><ol><li><strong>销售机会管理</strong>：跟踪销售漏斗和商机转化</li><li><strong>合同管理</strong>：合同创建、审批和执行跟踪</li><li><strong>产品目录</strong>：产品信息管理和定价策略</li><li><strong>报表分析</strong>：多维度数据分析和可视化</li><li><strong>移动端适配</strong>：支持销售人员外勤使用</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 企业级CRM系统的第一个模块开发是整个项目的关键里程碑</span></span><br><span class="line"><span class="comment">// 通过合理的需求分析、架构设计和开发实践，我们成功交付了高质量的客户管理模块</span></span><br><span class="line"><span class="comment">// 这不仅满足了业务需求，也为后续模块开发奠定了坚实基础</span></span><br><span class="line"><span class="comment">// 持续的用户反馈和迭代优化，将使系统不断完善和进化</span></span><br></pre></td></tr></table></figure><h2 id="注意事项与容易忽略点"><a href="#注意事项与容易忽略点" class="headerlink" title="注意事项与容易忽略点"></a>注意事项与容易忽略点</h2><ol><li><strong>数据安全与隐私保护</strong>：客户数据涉及隐私，必须严格控制访问权限</li><li><strong>性能优化</strong>：随着客户数据增长，查询性能可能下降，需提前规划优化策略</li><li><strong>数据一致性</strong>：多用户并发操作可能导致数据冲突，需合理设计锁机制</li><li><strong>审计日志</strong>：记录关键操作日志，便于追溯和问题排查</li><li><strong>国际化支持</strong>：如果系统需要支持多语言，应在早期就考虑国际化设计</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
          <category> 系统开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRM系统 </tag>
            
            <tag> 需求分析 </tag>
            
            <tag> 模块开发 </tag>
            
            <tag> 项目实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis 高级 SQL 与动态查询优化</title>
      <link href="/myblog/2020/10/05/MyBatis%20%E9%AB%98%E7%BA%A7%20SQL%20%E4%B8%8E%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
      <url>/myblog/2020/10/05/MyBatis%20%E9%AB%98%E7%BA%A7%20SQL%20%E4%B8%8E%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 企业系统中，数据访问层经常需要处理复杂查询，条件灵活多变。</span></span><br><span class="line"><span class="comment">// MyBatis 提供 XML 或注解方式实现 SQL 映射，可通过动态 SQL 生成查询语句。</span></span><br><span class="line"><span class="comment">// 动态 SQL 优化可以减少重复代码，提高系统可维护性，同时提升数据库性能。</span></span><br></pre></td></tr></table></figure><h2 id="动态-SQL-基础"><a href="#动态-SQL-基础" class="headerlink" title="动态 SQL 基础"></a>动态 SQL 基础</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 &lt;if&gt;、&lt;choose&gt;、&lt;when&gt;、&lt;otherwise&gt; 构建动态条件</span></span><br><span class="line"><span class="comment">// 使用 &lt;foreach&gt; 构建 IN 条件或批量插入</span></span><br><span class="line"><span class="comment">// 使用 &lt;trim&gt; 去掉多余的 AND/OR 或逗号</span></span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;findCustomer&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;Customer&quot;</span>&gt;</span><br><span class="line">  SELECT id, name, phone, status</span><br><span class="line">  FROM customer</span><br><span class="line">  WHERE <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">  &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;</span><br><span class="line">    AND name LIKE <span class="title function_">CONCAT</span><span class="params">(<span class="string">&#x27;%&#x27;</span>, #&#123;name&#125;, <span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">  &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">    <span class="type">AND</span> <span class="variable">status</span> <span class="operator">=</span> #&#123;status&#125;</span><br><span class="line">  &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">if</span> test=<span class="string">&quot;ids != null&quot;</span>&gt;</span><br><span class="line">    AND id IN</span><br><span class="line">    &lt;foreach item=<span class="string">&quot;id&quot;</span> collection=<span class="string">&quot;ids&quot;</span> open=<span class="string">&quot;(&quot;</span> separator=<span class="string">&quot;,&quot;</span> close=<span class="string">&quot;)&quot;</span>&gt;</span><br><span class="line">      #&#123;id&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">  &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">  ORDER BY create_time DESC</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. WHERE 1=1 技巧：方便动态拼接条件</span></span><br><span class="line"><span class="comment">// 2. &lt;if&gt;：动态添加 SQL 条件，避免字符串拼接</span></span><br><span class="line"><span class="comment">// 3. &lt;foreach&gt;：处理集合参数，支持批量查询和插入</span></span><br><span class="line"><span class="comment">// 4. ORDER BY create_time DESC：保证结果可读性</span></span><br></pre></td></tr></table></figure><h2 id="批量操作示例"><a href="#批量操作示例" class="headerlink" title="批量操作示例"></a>批量操作示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">&quot;batchInsert&quot;</span> parameterType=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  INSERT INTO <span class="title function_">customer</span><span class="params">(name, phone, status)</span></span><br><span class="line">  VALUES</span><br><span class="line">  &lt;foreach collection=<span class="string">&quot;list&quot;</span> item=<span class="string">&quot;item&quot;</span> separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">    (#&#123;item.name&#125;, #&#123;item.phone&#125;, #&#123;item.status&#125;)</span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 foreach 批量插入减少 JDBC 循环调用</span></span><br><span class="line"><span class="comment">// 注意 MyBatis 的 batchExecutor 模式可以进一步提升性能</span></span><br><span class="line"><span class="comment">// 配合 Spring 事务保证原子性</span></span><br></pre></td></tr></table></figure><h2 id="Mapper-接口示例"><a href="#Mapper-接口示例" class="headerlink" title="Mapper 接口示例"></a>Mapper 接口示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line">    List&lt;Customer&gt; <span class="title function_">findCustomer</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;status&quot;)</span> Integer status,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">batchInsert</span><span class="params">(<span class="meta">@Param(&quot;list&quot;)</span> List&lt;Customer&gt; customers)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景：根据姓名模糊搜索，状态筛选，批量插入</span></span><br><span class="line">List&lt;Long&gt; idList = Arrays.asList(<span class="number">1001L</span>, <span class="number">1002L</span>, <span class="number">1003L</span>);</span><br><span class="line">List&lt;Customer&gt; result = customerMapper.findCustomer(<span class="string">&quot;张&quot;</span>, <span class="number">1</span>, idList);</span><br><span class="line"></span><br><span class="line">List&lt;Customer&gt; newCustomers = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;13800138001&quot;</span>,<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;13800138002&quot;</span>,<span class="number">1</span>)</span><br><span class="line">);</span><br><span class="line">customerMapper.batchInsert(newCustomers);</span><br></pre></td></tr></table></figure><h2 id="高级技巧与注意事项"><a href="#高级技巧与注意事项" class="headerlink" title="高级技巧与注意事项"></a>高级技巧与注意事项</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 动态 SQL 复杂查询时，可使用 &lt;sql&gt; 标签抽取可复用 SQL 片段</span></span><br><span class="line"><span class="comment">// 2. 对于 IN 条件大数据量时，可考虑拆分分页查询，避免数据库性能下降</span></span><br><span class="line"><span class="comment">// 3. 避免在循环中拼接 SQL，使用 foreach 或 batchExecutor</span></span><br><span class="line"><span class="comment">// 4. 使用 ResultMap 可映射复杂关联查询结果</span></span><br><span class="line"><span class="comment">// 5. 注意参数传递类型，避免类型不匹配导致 SQL 执行失败</span></span><br></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用索引字段进行条件查询，减少全表扫描</span></span><br><span class="line"><span class="comment">// 2. 使用分页插件或 limit 分页</span></span><br><span class="line"><span class="comment">// 3. 批量插入、更新尽量使用 foreach 批量操作</span></span><br><span class="line"><span class="comment">// 4. 慎用 select *，明确字段避免不必要的 I/O</span></span><br><span class="line"><span class="comment">// 5. 对复杂 join 查询，可拆分成多条查询再在 Java 层合并</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyBatis 动态 SQL 提供灵活的条件生成能力</span></span><br><span class="line"><span class="comment">// 结合 batchExecutor、分页插件和索引优化，可实现高性能数据库访问</span></span><br><span class="line"><span class="comment">// 正确使用 &lt;if&gt;、&lt;foreach&gt;、&lt;trim&gt;、&lt;choose&gt; 等标签可减少重复代码，提高系统可维护性</span></span><br><span class="line"><span class="comment">// 参数绑定和 ResultMap 的正确使用可保证查询安全性和可读性</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> MyBatis 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参数绑定 </tag>
            
            <tag> MyBatis </tag>
            
            <tag> 动态 SQL </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 搜索优化与高效聚合</title>
      <link href="/myblog/2020/09/12/Elasticsearch%20%E6%90%9C%E7%B4%A2%E4%BC%98%E5%8C%96%E4%B8%8E%E9%AB%98%E6%95%88%E8%81%9A%E5%90%88/"/>
      <url>/myblog/2020/09/12/Elasticsearch%20%E6%90%9C%E7%B4%A2%E4%BC%98%E5%8C%96%E4%B8%8E%E9%AB%98%E6%95%88%E8%81%9A%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在电商和数据分析系统中，需要处理海量数据的搜索和统计。</span></span><br><span class="line"><span class="comment">// Elasticsearch 提供分布式、高可用、实时搜索和聚合能力。</span></span><br><span class="line"><span class="comment">// 合理设计索引、映射、分片与副本策略，是搜索系统高效运行的关键。</span></span><br></pre></td></tr></table></figure><h2 id="索引设计与映射优化"><a href="#索引设计与映射优化" class="headerlink" title="索引设计与映射优化"></a>索引设计与映射优化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义商品索引</span></span><br><span class="line">PUT /product</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span> &#125;,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>, <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span> &#125;,</span><br><span class="line">      <span class="string">&quot;category&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span> &#125;,</span><br><span class="line">      <span class="string">&quot;price&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;double&quot;</span> &#125;,</span><br><span class="line">      <span class="string">&quot;tags&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span> &#125;,</span><br><span class="line">      <span class="string">&quot;createTime&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;number_of_shards&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">&quot;number_of_replicas&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. keyword 类型：用于精确匹配、聚合、排序</span></span><br><span class="line"><span class="comment">// 2. text 类型 + IK 分词器：支持中文全文搜索</span></span><br><span class="line"><span class="comment">// 3. 分片数量：根据索引大小和并发访问优化</span></span><br><span class="line"><span class="comment">// 4. 副本数量：保证高可用和读取性能</span></span><br><span class="line"><span class="comment">// 5. 创建时间字段：便于时间范围查询和排序</span></span><br></pre></td></tr></table></figure><h2 id="高效搜索查询"><a href="#高效搜索查询" class="headerlink" title="高效搜索查询"></a>高效搜索查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;手机&quot;</span> &#125; &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;term&quot;</span>: &#123; <span class="string">&quot;category&quot;</span>: <span class="string">&quot;电子产品&quot;</span> &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123; <span class="string">&quot;range&quot;</span>: &#123; <span class="string">&quot;price&quot;</span>: &#123; <span class="string">&quot;gte&quot;</span>: <span class="number">1000</span>, <span class="string">&quot;lte&quot;</span>: <span class="number">5000</span> &#125; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123; <span class="string">&quot;createTime&quot;</span>: &#123; <span class="string">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span> &#125; &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bool 查询组合了 must 与 filter</span></span><br><span class="line"><span class="comment">// must: 全文匹配，参与评分</span></span><br><span class="line"><span class="comment">// filter: 精确过滤，不参与评分</span></span><br><span class="line"><span class="comment">// sort: 排序，提高返回数据的可读性</span></span><br><span class="line"><span class="comment">// from/size: 分页参数，防止全量查询导致 OOM</span></span><br></pre></td></tr></table></figure><h2 id="聚合查询示例"><a href="#聚合查询示例" class="headerlink" title="聚合查询示例"></a>聚合查询示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_count&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123; <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;price_stats&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;stats&quot;</span>: &#123; <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// size: 0 表示只返回聚合结果，不返回文档</span></span><br><span class="line"><span class="comment">// terms 聚合: 统计每个类别数量</span></span><br><span class="line"><span class="comment">// stats 聚合: 统计价格最大值、最小值、平均值、总和</span></span><br><span class="line"><span class="comment">// 高并发系统建议使用 filter + aggs 组合，减少计算量</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Data-Elasticsearch-使用"><a href="#Spring-Data-Elasticsearch-使用" class="headerlink" title="Spring Data Elasticsearch 使用"></a>Spring Data Elasticsearch 使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document(indexName = &quot;product&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tags;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductRepository</span> <span class="keyword">extends</span> <span class="title class_">ElasticsearchRepository</span>&lt;Product, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findByCategoryAndPriceBetweenOrderByCreateTimeDesc</span><span class="params">(</span></span><br><span class="line"><span class="params">        String category, Double minPrice, Double maxPrice</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring Data 提供 Repository 封装，快速构建查询</span></span><br><span class="line"><span class="comment">// 方法名解析生成查询，提高开发效率</span></span><br><span class="line"><span class="comment">// 结合 @Query 注解，可执行复杂 DSL 查询</span></span><br></pre></td></tr></table></figure><h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景：电商商品搜索</span></span><br><span class="line"><span class="comment">// 用户搜索“手机”，价格区间 1000-5000，按上架时间排序</span></span><br><span class="line">List&lt;Product&gt; result = productRepository.findByCategoryAndPriceBetweenOrderByCreateTimeDesc(</span><br><span class="line">    <span class="string">&quot;电子产品&quot;</span>, <span class="number">1000.0</span>, <span class="number">5000.0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="注意事项与容易忽略点"><a href="#注意事项与容易忽略点" class="headerlink" title="注意事项与容易忽略点"></a>注意事项与容易忽略点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 分片数量影响搜索性能，过多或过少都会影响吞吐量</span></span><br><span class="line"><span class="comment">// 2. 聚合查询高并发可能触发大量内存消耗，需要分页或 filter 限制</span></span><br><span class="line"><span class="comment">// 3. keyword 与 text 类型混用，避免全局分析器影响精确查询</span></span><br><span class="line"><span class="comment">// 4. 分页 from/size 大数据量时可能导致性能下降，建议使用 scroll 或 search_after</span></span><br><span class="line"><span class="comment">// 5. 更新索引映射需谨慎，尽量采用新增字段替代修改类型</span></span><br></pre></td></tr></table></figure><h2 id="实际业务场景应用案例"><a href="#实际业务场景应用案例" class="headerlink" title="实际业务场景应用案例"></a>实际业务场景应用案例</h2><h3 id="1-电商搜索与推荐系统"><a href="#1-电商搜索与推荐系统" class="headerlink" title="1. 电商搜索与推荐系统"></a>1. 电商搜索与推荐系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductSearchService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ElasticsearchClient esClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProductRepository productRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductSearchService</span><span class="params">(ElasticsearchClient esClient, ProductRepository productRepository)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.esClient = esClient;</span><br><span class="line">        <span class="built_in">this</span>.productRepository = productRepository;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 智能搜索商品 - 支持多条件、高亮、纠错、同义词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SearchResult&lt;Product&gt; <span class="title function_">smartSearch</span><span class="params">(ProductSearchDTO searchDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建复合查询</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 关键词搜索 - 支持分词、同义词、拼写纠错</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(searchDTO.getKeyword())) &#123;</span><br><span class="line">            <span class="comment">// 使用multi_match支持多字段搜索</span></span><br><span class="line">            <span class="type">MultiMatchQueryBuilder</span> <span class="variable">keywordQuery</span> <span class="operator">=</span> QueryBuilders.multiMatchQuery(</span><br><span class="line">                searchDTO.getKeyword(), <span class="string">&quot;name^3&quot;</span>, <span class="string">&quot;description^2&quot;</span>, <span class="string">&quot;tags&quot;</span>)</span><br><span class="line">                .fuzziness(Fuzziness.AUTO)  <span class="comment">// 启用模糊匹配，自动纠错</span></span><br><span class="line">                .minimumShouldMatch(<span class="string">&quot;70%&quot;</span>); <span class="comment">// 最小匹配度</span></span><br><span class="line">                </span><br><span class="line">            boolQuery.must(keywordQuery);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 类目筛选 - 支持多级类目</span></span><br><span class="line">        <span class="keyword">if</span> (searchDTO.getCategoryIds() != <span class="literal">null</span> &amp;&amp; !searchDTO.getCategoryIds().isEmpty()) &#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;categoryId&quot;</span>, searchDTO.getCategoryIds()));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 属性筛选 - 动态处理不同属性</span></span><br><span class="line">        <span class="keyword">if</span> (searchDTO.getAttributes() != <span class="literal">null</span>) &#123;</span><br><span class="line">            searchDTO.getAttributes().forEach((key, value) -&gt; &#123;</span><br><span class="line">                boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;attributes.&quot;</span> + key, value));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 价格区间</span></span><br><span class="line">        <span class="keyword">if</span> (searchDTO.getMinPrice() != <span class="literal">null</span> || searchDTO.getMaxPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">RangeQueryBuilder</span> <span class="variable">priceRange</span> <span class="operator">=</span> QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (searchDTO.getMinPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">                priceRange.gte(searchDTO.getMinPrice());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (searchDTO.getMaxPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">                priceRange.lte(searchDTO.getMaxPrice());</span><br><span class="line">            &#125;</span><br><span class="line">            boolQuery.filter(priceRange);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 构建排序</span></span><br><span class="line">        List&lt;SortBuilder&lt;?&gt;&gt; sorts = buildSortOptions(searchDTO.getSortField(), searchDTO.getSortOrder());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 构建高亮</span></span><br><span class="line">        <span class="type">HighlightBuilder</span> <span class="variable">highlightBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>()</span><br><span class="line">            .field(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            .field(<span class="string">&quot;description&quot;</span>)</span><br><span class="line">            .preTags(<span class="string">&quot;&lt;em class=&#x27;highlight&#x27;&gt;&quot;</span>)</span><br><span class="line">            .postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>)</span><br><span class="line">            .fragmentSize(<span class="number">150</span>)</span><br><span class="line">            .numOfFragments(<span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 7. 执行搜索</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>()</span><br><span class="line">            .query(boolQuery)</span><br><span class="line">            .from(searchDTO.getPageNum() * searchDTO.getPageSize())</span><br><span class="line">            .size(searchDTO.getPageSize())</span><br><span class="line">            .highlighter(highlightBuilder);</span><br><span class="line">            </span><br><span class="line">        sorts.forEach(sourceBuilder::sort);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 8. 添加聚合 - 用于分面导航</span></span><br><span class="line">        sourceBuilder.aggregation(AggregationBuilders.terms(<span class="string">&quot;category_agg&quot;</span>)</span><br><span class="line">            .field(<span class="string">&quot;categoryId&quot;</span>)</span><br><span class="line">            .size(<span class="number">20</span>));</span><br><span class="line">            </span><br><span class="line">        sourceBuilder.aggregation(AggregationBuilders.terms(<span class="string">&quot;brand_agg&quot;</span>)</span><br><span class="line">            .field(<span class="string">&quot;brandId&quot;</span>)</span><br><span class="line">            .size(<span class="number">20</span>));</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 价格区间聚合</span></span><br><span class="line">        sourceBuilder.aggregation(AggregationBuilders.histogram(<span class="string">&quot;price_histogram&quot;</span>)</span><br><span class="line">            .field(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">            .interval(<span class="number">1000</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行查询并处理结果</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;product&quot;</span>)</span><br><span class="line">            .source(sourceBuilder);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> esClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="keyword">return</span> processSearchResponse(response, searchDTO);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;商品搜索异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;搜索服务异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 个性化商品推荐 - 基于用户行为和商品相似度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">recommendProducts</span><span class="params">(String userId, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取用户最近浏览和购买的商品</span></span><br><span class="line">        List&lt;String&gt; userRecentProductIds = getUserRecentProducts(userId, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (userRecentProductIds.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 用户无历史记录，返回热门商品</span></span><br><span class="line">            <span class="keyword">return</span> getHotProducts(limit);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 构建更像这些(More Like This)查询</span></span><br><span class="line">        <span class="type">MoreLikeThisQueryBuilder</span> <span class="variable">moreLikeThisQuery</span> <span class="operator">=</span> QueryBuilders.moreLikeThisQuery(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;description&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;categoryId&quot;</span>&#125;,  <span class="comment">// 相似字段</span></span><br><span class="line">            <span class="literal">null</span>,  <span class="comment">// 不使用自定义文本</span></span><br><span class="line">            userRecentProductIds.stream()  <span class="comment">// 使用用户最近的商品作为相似项</span></span><br><span class="line">                .map(id -&gt; <span class="keyword">new</span> <span class="title class_">MoreLikeThisQueryBuilder</span>.Item(<span class="string">&quot;product&quot;</span>, id))</span><br><span class="line">                .toArray(MoreLikeThisQueryBuilder.Item[]::<span class="keyword">new</span>)</span><br><span class="line">        )</span><br><span class="line">        .minTermFreq(<span class="number">1</span>)       <span class="comment">// 最小词频</span></span><br><span class="line">        .maxQueryTerms(<span class="number">25</span>)    <span class="comment">// 最大查询词数</span></span><br><span class="line">        .minDocFreq(<span class="number">1</span>);       <span class="comment">// 最小文档频率</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 排除用户已经查看过的商品</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery()</span><br><span class="line">            .must(moreLikeThisQuery)</span><br><span class="line">            .mustNot(QueryBuilders.termsQuery(<span class="string">&quot;_id&quot;</span>, userRecentProductIds));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 执行查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>()</span><br><span class="line">            .query(boolQuery)</span><br><span class="line">            .size(limit);</span><br><span class="line">        </span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;product&quot;</span>)</span><br><span class="line">            .source(sourceBuilder);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> esClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(response.getHits().getHits())</span><br><span class="line">                .map(hit -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> objectMapper.readValue(hit.getSourceAsString(), Product.class);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;解析商品数据异常&quot;</span>, e);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .filter(Objects::nonNull)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;商品推荐异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;推荐服务异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他辅助方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-日志分析与监控系统"><a href="#2-日志分析与监控系统" class="headerlink" title="2. 日志分析与监控系统"></a>2. 日志分析与监控系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAnalysisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ElasticsearchClient esClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">DateTimeFormatter</span> <span class="variable">dateFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy.MM.dd&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogAnalysisService</span><span class="params">(ElasticsearchClient esClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.esClient = esClient;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实时错误日志监控 - 聚合分析错误趋势</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ErrorStatistics <span class="title function_">analyzeErrorLogs</span><span class="params">(LocalDateTime startTime, LocalDateTime endTime, String serviceName)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 构建时间范围查询</span></span><br><span class="line">        <span class="type">RangeQueryBuilder</span> <span class="variable">timeRangeQuery</span> <span class="operator">=</span> QueryBuilders.rangeQuery(<span class="string">&quot;@timestamp&quot;</span>)</span><br><span class="line">            .gte(startTime.format(DateTimeFormatter.ISO_DATE_TIME))</span><br><span class="line">            .lte(endTime.format(DateTimeFormatter.ISO_DATE_TIME));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 构建查询条件</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery()</span><br><span class="line">            .must(QueryBuilders.matchQuery(<span class="string">&quot;level&quot;</span>, <span class="string">&quot;ERROR&quot;</span>))  <span class="comment">// 只查询错误日志</span></span><br><span class="line">            .filter(timeRangeQuery);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(serviceName)) &#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;service&quot;</span>, serviceName));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 构建聚合 - 按时间、服务、错误类型分组</span></span><br><span class="line">        <span class="type">DateHistogramAggregationBuilder</span> <span class="variable">timeAgg</span> <span class="operator">=</span> AggregationBuilders.dateHistogram(<span class="string">&quot;error_over_time&quot;</span>)</span><br><span class="line">            .field(<span class="string">&quot;@timestamp&quot;</span>)</span><br><span class="line">            .fixedInterval(DateHistogramInterval.HOUR)</span><br><span class="line">            .format(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br><span class="line">            .minDocCount(<span class="number">0</span>)  <span class="comment">// 包含零计数的桶</span></span><br><span class="line">            .extendedBounds(<span class="keyword">new</span> <span class="title class_">ExtendedBounds</span>(</span><br><span class="line">                startTime.format(DateTimeFormatter.ISO_DATE_TIME),</span><br><span class="line">                endTime.format(DateTimeFormatter.ISO_DATE_TIME)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 服务聚合</span></span><br><span class="line">        <span class="type">TermsAggregationBuilder</span> <span class="variable">serviceAgg</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;service_agg&quot;</span>)</span><br><span class="line">            .field(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">            .size(<span class="number">20</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 错误类型聚合</span></span><br><span class="line">        <span class="type">TermsAggregationBuilder</span> <span class="variable">errorTypeAgg</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;error_type_agg&quot;</span>)</span><br><span class="line">            .field(<span class="string">&quot;exceptionClass&quot;</span>)</span><br><span class="line">            .size(<span class="number">20</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 添加子聚合</span></span><br><span class="line">        timeAgg.subAggregation(serviceAgg);</span><br><span class="line">        serviceAgg.subAggregation(errorTypeAgg);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 构建搜索请求</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>()</span><br><span class="line">            .query(boolQuery)</span><br><span class="line">            .size(<span class="number">0</span>)  <span class="comment">// 只需要聚合结果</span></span><br><span class="line">            .aggregation(timeAgg);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 确定索引名称 - 使用索引模式匹配日期范围内的所有日志索引</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">indexPattern</span> <span class="operator">=</span> <span class="string">&quot;logs-&quot;</span> + startTime.format(dateFormatter) + <span class="string">&quot;,logs-&quot;</span> + endTime.format(dateFormatter);</span><br><span class="line">        <span class="keyword">if</span> (!startTime.toLocalDate().equals(endTime.toLocalDate())) &#123;</span><br><span class="line">            <span class="comment">// 如果跨天，使用通配符</span></span><br><span class="line">            indexPattern = <span class="string">&quot;logs-*&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(indexPattern)</span><br><span class="line">            .source(sourceBuilder);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 执行查询</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> esClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 7. 处理聚合结果</span></span><br><span class="line">            <span class="keyword">return</span> processErrorAggregations(response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;错误日志分析异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;日志分析服务异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常堆栈分析 - 查找相似异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SimilarErrorGroup&gt; <span class="title function_">findSimilarErrors</span><span class="params">(String exceptionStackTrace, <span class="type">int</span> maxResults)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 使用更像这些(More Like This)查询查找相似异常</span></span><br><span class="line">        <span class="type">MoreLikeThisQueryBuilder</span> <span class="variable">moreLikeThisQuery</span> <span class="operator">=</span> QueryBuilders.moreLikeThisQuery(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;stackTrace&quot;</span>&#125;,  <span class="comment">// 在堆栈跟踪字段中查找相似内容</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;exceptionStackTrace&#125;,  <span class="comment">// 使用提供的堆栈跟踪作为查询文本</span></span><br><span class="line">            <span class="literal">null</span>   <span class="comment">// 不使用已有文档作为查询基础</span></span><br><span class="line">        )</span><br><span class="line">        .minTermFreq(<span class="number">1</span>)       <span class="comment">// 最小词频</span></span><br><span class="line">        .maxQueryTerms(<span class="number">50</span>)    <span class="comment">// 最大查询词数</span></span><br><span class="line">        .minDocFreq(<span class="number">1</span>)        <span class="comment">// 最小文档频率</span></span><br><span class="line">        .minimumShouldMatch(<span class="string">&quot;30%&quot;</span>);  <span class="comment">// 最小匹配百分比</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 限制时间范围 - 只查找最近7天的异常</span></span><br><span class="line">        <span class="type">RangeQueryBuilder</span> <span class="variable">timeRangeQuery</span> <span class="operator">=</span> QueryBuilders.rangeQuery(<span class="string">&quot;@timestamp&quot;</span>)</span><br><span class="line">            .gte(<span class="string">&quot;now-7d/d&quot;</span>)</span><br><span class="line">            .lte(<span class="string">&quot;now&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery()</span><br><span class="line">            .must(moreLikeThisQuery)</span><br><span class="line">            .filter(timeRangeQuery);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 构建聚合 - 按异常类型分组</span></span><br><span class="line">        <span class="type">TermsAggregationBuilder</span> <span class="variable">errorClassAgg</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;error_class_agg&quot;</span>)</span><br><span class="line">            .field(<span class="string">&quot;exceptionClass&quot;</span>)</span><br><span class="line">            .size(<span class="number">10</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 添加子聚合 - 获取最新的异常时间</span></span><br><span class="line">        errorClassAgg.subAggregation(</span><br><span class="line">            AggregationBuilders.topHits(<span class="string">&quot;latest_errors&quot;</span>)</span><br><span class="line">                .size(<span class="number">5</span>)</span><br><span class="line">                .sort(<span class="string">&quot;@timestamp&quot;</span>, SortOrder.DESC)</span><br><span class="line">                .fetchSource(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;@timestamp&quot;</span>, <span class="string">&quot;message&quot;</span>, <span class="string">&quot;stackTrace&quot;</span>, <span class="string">&quot;service&quot;</span>&#125;, <span class="literal">null</span>)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 构建搜索请求</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>()</span><br><span class="line">            .query(boolQuery)</span><br><span class="line">            .size(<span class="number">0</span>)  <span class="comment">// 只需要聚合结果</span></span><br><span class="line">            .aggregation(errorClassAgg);</span><br><span class="line">            </span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;logs-*&quot;</span>)</span><br><span class="line">            .source(sourceBuilder);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 5. 执行查询</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> esClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 6. 处理聚合结果</span></span><br><span class="line">            <span class="keyword">return</span> processSimilarErrorsResponse(response, maxResults);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;相似异常查找异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;异常分析服务异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他辅助方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-地理位置搜索与分析"><a href="#3-地理位置搜索与分析" class="headerlink" title="3. 地理位置搜索与分析"></a>3. 地理位置搜索与分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeoSearchService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ElasticsearchClient esClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeoSearchService</span><span class="params">(ElasticsearchClient esClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.esClient = esClient;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 附近商家搜索 - 支持距离排序和多条件筛选</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Store&gt; <span class="title function_">findNearbyStores</span><span class="params">(<span class="type">double</span> lat, <span class="type">double</span> lon, <span class="type">double</span> distanceKm, </span></span><br><span class="line"><span class="params">                                       String category, String keyword, <span class="type">int</span> page, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 构建地理位置查询</span></span><br><span class="line">        <span class="type">GeoDistanceQueryBuilder</span> <span class="variable">geoQuery</span> <span class="operator">=</span> QueryBuilders.geoDistanceQuery(<span class="string">&quot;location&quot;</span>)</span><br><span class="line">            .point(lat, lon)</span><br><span class="line">            .distance(distanceKm, DistanceUnit.KILOMETERS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 构建复合查询</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery()</span><br><span class="line">            .filter(geoQuery);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 3. 添加分类筛选</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(category)) &#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;category&quot;</span>, category));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 添加关键词搜索</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(keyword)) &#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.multiMatchQuery(keyword, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;description&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 构建排序 - 按距离排序</span></span><br><span class="line">        <span class="type">GeoDistanceSortBuilder</span> <span class="variable">sortBuilder</span> <span class="operator">=</span> SortBuilders.geoDistanceSort(<span class="string">&quot;location&quot;</span>, lat, lon)</span><br><span class="line">            .order(SortOrder.ASC)</span><br><span class="line">            .unit(DistanceUnit.KILOMETERS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 构建搜索请求</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>()</span><br><span class="line">            .query(boolQuery)</span><br><span class="line">            .sort(sortBuilder)</span><br><span class="line">            .from(page * size)</span><br><span class="line">            .size(size);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 7. 添加聚合 - 按分类统计商家数量</span></span><br><span class="line">        sourceBuilder.aggregation(</span><br><span class="line">            AggregationBuilders.terms(<span class="string">&quot;category_agg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">                .size(<span class="number">20</span>)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 8. 添加距离范围聚合</span></span><br><span class="line">        sourceBuilder.aggregation(</span><br><span class="line">            AggregationBuilders.geoDistance(<span class="string">&quot;distance_ranges&quot;</span>, <span class="keyword">new</span> <span class="title class_">GeoPoint</span>(lat, lon))</span><br><span class="line">                .field(<span class="string">&quot;location&quot;</span>)</span><br><span class="line">                .unit(DistanceUnit.KILOMETERS)</span><br><span class="line">                .addRange(<span class="number">0</span>, <span class="number">1</span>)    <span class="comment">// 0-1km</span></span><br><span class="line">                .addRange(<span class="number">1</span>, <span class="number">2</span>)    <span class="comment">// 1-2km</span></span><br><span class="line">                .addRange(<span class="number">2</span>, <span class="number">5</span>)    <span class="comment">// 2-5km</span></span><br><span class="line">                .addRange(<span class="number">5</span>, <span class="number">10</span>)   <span class="comment">// 5-10km</span></span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;stores&quot;</span>)</span><br><span class="line">            .source(sourceBuilder);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 9. 执行查询</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> esClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 10. 处理结果 - 包括距离信息</span></span><br><span class="line">            List&lt;Store&gt; stores = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">                <span class="type">Store</span> <span class="variable">store</span> <span class="operator">=</span> objectMapper.readValue(hit.getSourceAsString(), Store.class);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 获取距离信息</span></span><br><span class="line">                Object[] sortValues = hit.getSortValues();</span><br><span class="line">                <span class="keyword">if</span> (sortValues != <span class="literal">null</span> &amp;&amp; sortValues.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> (<span class="type">double</span>) sortValues[<span class="number">0</span>];</span><br><span class="line">                    store.setDistance(Math.round(distance * <span class="number">100</span>) / <span class="number">100.0</span>);  <span class="comment">// 保留两位小数</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                stores.add(store);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> stores;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;附近商家搜索异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;位置搜索服务异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区域热力图分析 - 统计指定区域内的数据密度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> HeatmapData <span class="title function_">generateHeatmapData</span><span class="params">(<span class="type">double</span> topLeftLat, <span class="type">double</span> topLeftLon, </span></span><br><span class="line"><span class="params">                                         <span class="type">double</span> bottomRightLat, <span class="type">double</span> bottomRightLon,</span></span><br><span class="line"><span class="params">                                         <span class="type">int</span> precision, String dataType)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 构建地理边界查询</span></span><br><span class="line">        <span class="type">GeoBoundingBoxQueryBuilder</span> <span class="variable">geoBboxQuery</span> <span class="operator">=</span> QueryBuilders.geoBoundingBoxQuery(<span class="string">&quot;location&quot;</span>)</span><br><span class="line">            .setCorners(topLeftLat, topLeftLon, bottomRightLat, bottomRightLon);</span><br><span class="line">            </span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery()</span><br><span class="line">            .filter(geoBboxQuery);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 2. 添加数据类型筛选</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(dataType)) &#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;type&quot;</span>, dataType));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 构建网格聚合 - 用于生成热力图数据</span></span><br><span class="line">        <span class="type">GeoGridAggregationBuilder</span> <span class="variable">geoGridAgg</span> <span class="operator">=</span> AggregationBuilders.geohashGrid(<span class="string">&quot;geo_grid&quot;</span>)</span><br><span class="line">            .field(<span class="string">&quot;location&quot;</span>)</span><br><span class="line">            .precision(precision);  <span class="comment">// 精度级别，1-12，越高精度越高</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 4. 添加子聚合 - 统计每个网格的数据量和平均值</span></span><br><span class="line">        geoGridAgg.subAggregation(AggregationBuilders.count(<span class="string">&quot;doc_count&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;user_activity&quot;</span>.equals(dataType)) &#123;</span><br><span class="line">            geoGridAgg.subAggregation(</span><br><span class="line">                AggregationBuilders.avg(<span class="string">&quot;avg_duration&quot;</span>).field(<span class="string">&quot;duration&quot;</span>)</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;store_sales&quot;</span>.equals(dataType)) &#123;</span><br><span class="line">            geoGridAgg.subAggregation(</span><br><span class="line">                AggregationBuilders.sum(<span class="string">&quot;total_sales&quot;</span>).field(<span class="string">&quot;sales&quot;</span>)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 构建搜索请求</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>()</span><br><span class="line">            .query(boolQuery)</span><br><span class="line">            .size(<span class="number">0</span>)  <span class="comment">// 只需要聚合结果</span></span><br><span class="line">            .aggregation(geoGridAgg);</span><br><span class="line">            </span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;geo_data&quot;</span>)</span><br><span class="line">            .source(sourceBuilder);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 执行查询</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> esClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 7. 处理聚合结果 - 转换为热力图数据</span></span><br><span class="line">            <span class="keyword">return</span> processHeatmapAggregation(response, dataType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;热力图数据生成异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;热力图服务异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他辅助方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="性能优化与最佳实践"><a href="#性能优化与最佳实践" class="headerlink" title="性能优化与最佳实践"></a>性能优化与最佳实践</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Elasticsearch 性能优化策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticsearchOptimizationGuide</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 索引优化策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">indexOptimizationTips</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.1 分片策略</span></span><br><span class="line">        <span class="comment">// - 每个分片大小保持在20GB-40GB之间</span></span><br><span class="line">        <span class="comment">// - 分片数 = 数据总量 / 理想分片大小</span></span><br><span class="line">        <span class="comment">// - 节点数量 = 分片总数(主分片+副本) / 每节点分片数(约25个)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1.2 字段类型优化</span></span><br><span class="line">        <span class="comment">// - 不需要全文检索的字段用keyword而非text</span></span><br><span class="line">        <span class="comment">// - 精确数值用integer/long，不用float/double</span></span><br><span class="line">        <span class="comment">// - 使用nested而非object存储复杂对象数组</span></span><br><span class="line">        <span class="comment">// - 使用join而非parent-child关系，除非强依赖关系</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1.3 映射优化</span></span><br><span class="line">        <span class="comment">// - 禁用不需要检索的字段: &quot;enabled&quot;: false</span></span><br><span class="line">        <span class="comment">// - 不需要存储的字段使用: &quot;store&quot;: false</span></span><br><span class="line">        <span class="comment">// - 使用copy_to合并多字段搜索，减少查询复杂度</span></span><br><span class="line">        <span class="comment">// - 设置dynamic为strict，防止字段爆炸</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 查询优化策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryOptimizationTips</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 2.1 过滤与查询</span></span><br><span class="line">        <span class="comment">// - 优先使用filter而非query，filter有缓存</span></span><br><span class="line">        <span class="comment">// - 避免使用script，性能极差</span></span><br><span class="line">        <span class="comment">// - 优先使用term/terms而非match，精确匹配性能更好</span></span><br><span class="line">        <span class="comment">// - 使用routing减少分片扫描</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.2 分页优化</span></span><br><span class="line">        <span class="comment">// - 深度分页使用search_after或scroll API</span></span><br><span class="line">        <span class="comment">// - from + size不应超过10000</span></span><br><span class="line">        <span class="comment">// - 使用track_total_hits控制计数精确度</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.3 聚合优化</span></span><br><span class="line">        <span class="comment">// - 在filter后进行聚合，减少聚合文档数</span></span><br><span class="line">        <span class="comment">// - 设置size=0，不返回文档内容</span></span><br><span class="line">        <span class="comment">// - 使用date_histogram代替单独的terms聚合</span></span><br><span class="line">        <span class="comment">// - 大数据集使用预计算或近似聚合(cardinality)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3. 批量操作优化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bulkOperationTips</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 3.1 批量索引</span></span><br><span class="line">        <span class="comment">// - 批量请求大小控制在5-15MB</span></span><br><span class="line">        <span class="comment">// - 并行批量请求，每个分片一个线程</span></span><br><span class="line">        <span class="comment">// - 使用自动生成的ID而非自定义ID</span></span><br><span class="line">        <span class="comment">// - 批量前禁用refresh_interval，完成后恢复</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.2 更新优化</span></span><br><span class="line">        <span class="comment">// - 避免频繁单文档更新，使用批量更新</span></span><br><span class="line">        <span class="comment">// - 使用部分更新而非全文档更新</span></span><br><span class="line">        <span class="comment">// - 使用upsert合并创建和更新操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4. 集群配置优化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clusterConfigurationTips</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1 JVM配置</span></span><br><span class="line">        <span class="comment">// - 堆内存设置为可用内存的50%，不超过32GB</span></span><br><span class="line">        <span class="comment">// - 启用G1GC垃圾回收器</span></span><br><span class="line">        <span class="comment">// - 预留足够的文件系统缓存空间</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.2 线程池配置</span></span><br><span class="line">        <span class="comment">// - 搜索线程池: 核心数 * 3 / 2 + 1</span></span><br><span class="line">        <span class="comment">// - 写入线程池: 核心数 / 2 + 1</span></span><br><span class="line">        <span class="comment">// - 根据实际负载调整队列大小</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.3 缓存配置</span></span><br><span class="line">        <span class="comment">// - 字段数据缓存限制: indices.fielddata.cache.size: 20%</span></span><br><span class="line">        <span class="comment">// - 分片请求缓存: indices.requests.cache.size: 2%</span></span><br><span class="line">        <span class="comment">// - 根据查询模式调整缓存大小</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Elasticsearch 提供实时搜索和聚合能力</span></span><br><span class="line"><span class="comment">// 通过合理的索引设计、分片、副本和查询优化，支持高并发搜索和统计分析</span></span><br><span class="line"><span class="comment">// Spring Data Elasticsearch 提供便捷的开发接口，可快速实现业务搜索需求</span></span><br><span class="line"><span class="comment">// 深入理解 bool 查询、聚合、分页策略和映射优化，是构建高效搜索系统的核心</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 实际业务场景应用：</span></span><br><span class="line"><span class="comment">// 1. 电商搜索与推荐：智能搜索、个性化推荐、相似商品查找</span></span><br><span class="line"><span class="comment">// 2. 日志分析与监控：错误趋势分析、异常堆栈相似度匹配、实时监控</span></span><br><span class="line"><span class="comment">// 3. 地理位置服务：附近商家查询、距离排序、区域热力图分析</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 性能优化关键点：</span></span><br><span class="line"><span class="comment">// 1. 索引设计：合理的分片策略、字段类型选择、映射优化</span></span><br><span class="line"><span class="comment">// 2. 查询优化：优先使用filter、避免深度分页、聚合前过滤</span></span><br><span class="line"><span class="comment">// 3. 批量操作：控制批量大小、并行请求、禁用实时刷新</span></span><br><span class="line"><span class="comment">// 4. 集群配置：JVM设置、线程池调整、缓存优化</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 搜索优化 </tag>
            
            <tag> 聚合分析 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka 高并发消息处理与分区策略</title>
      <link href="/myblog/2020/08/05/Kafka%20%E9%AB%98%E5%B9%B6%E5%8F%91%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E4%B8%8E%E5%88%86%E5%8C%BA%E7%AD%96%E7%95%A5/"/>
      <url>/myblog/2020/08/05/Kafka%20%E9%AB%98%E5%B9%B6%E5%8F%91%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E4%B8%8E%E5%88%86%E5%8C%BA%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在大数据和高并发系统中，需要处理海量消息。</span></span><br><span class="line"><span class="comment">// Kafka 提供高吞吐量、分区消费、消费组机制，是处理日志、事件和异步任务的利器。</span></span><br><span class="line"><span class="comment">// 掌握分区策略、消费者均衡、偏移量管理以及幂等性处理，是保障系统可靠性的关键。</span></span><br></pre></td></tr></table></figure><h2 id="Kafka-基本概念"><a href="#Kafka-基本概念" class="headerlink" title="Kafka 基本概念"></a>Kafka 基本概念</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Topic：消息主题，用于分类消息</span></span><br><span class="line"><span class="comment">// 2. Partition：主题分区，保证消息顺序和并发处理</span></span><br><span class="line"><span class="comment">// 3. Producer：消息生产者</span></span><br><span class="line"><span class="comment">// 4. Consumer：消息消费者</span></span><br><span class="line"><span class="comment">// 5. Consumer Group：消费者组，实现负载均衡和消息分发</span></span><br><span class="line"><span class="comment">// 6. Offset：偏移量，记录消费位置</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-配置-Kafka"><a href="#Spring-Boot-配置-Kafka" class="headerlink" title="Spring Boot 配置 Kafka"></a>Spring Boot 配置 Kafka</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ProducerFactory&lt;String, String&gt; <span class="title function_">producerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        props.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;all&quot;</span>); <span class="comment">// 全部副本确认</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultKafkaProducerFactory</span>&lt;&gt;(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KafkaTemplate&lt;String, String&gt; <span class="title function_">kafkaTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KafkaTemplate</span>&lt;&gt;(producerFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; <span class="title function_">kafkaListenerContainerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = <span class="keyword">new</span> <span class="title class_">ConcurrentKafkaListenerContainerFactory</span>&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        factory.setConcurrency(<span class="number">3</span>); <span class="comment">// 并发消费者数量</span></span><br><span class="line">        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConsumerFactory&lt;String, String&gt; <span class="title function_">consumerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;order-group&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>); <span class="comment">// 手动提交</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultKafkaConsumerFactory</span>&lt;&gt;(props);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息生产者示例"><a href="#消息生产者示例" class="headerlink" title="消息生产者示例"></a>消息生产者示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderKafkaProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderKafkaProducer</span><span class="params">(KafkaTemplate&lt;String, String&gt; kafkaTemplate)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendOrder</span><span class="params">(String orderJson)</span>&#123;</span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;order-topic&quot;</span>, orderJson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者示例与手动提交"><a href="#消费者示例与手动提交" class="headerlink" title="消费者示例与手动提交"></a>消费者示例与手动提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderKafkaConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;order-topic&quot;, groupId = &quot;order-group&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consume</span><span class="params">(ConsumerRecord&lt;String, String&gt; record, Acknowledgment ack)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">orderJson</span> <span class="operator">=</span> record.value();</span><br><span class="line">            processOrder(orderJson);</span><br><span class="line">            ack.acknowledge(); <span class="comment">// 手动提交偏移量</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 处理异常，可选择重试或发送到死信主题</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(String orderJson)</span>&#123;</span><br><span class="line">        <span class="comment">// 解析订单，扣减库存，更新状态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 分区策略</span></span><br><span class="line"><span class="comment">//    - key 相同的消息会被发送到同一个分区，保证顺序性</span></span><br><span class="line"><span class="comment">//    - 高并发场景可增加分区数量，实现并行处理</span></span><br><span class="line"><span class="comment">// 2. 消费者组</span></span><br><span class="line"><span class="comment">//    - 每个分区只会被消费组中的一个消费者消费</span></span><br><span class="line"><span class="comment">//    - 实现负载均衡与消息均匀分发</span></span><br><span class="line"><span class="comment">// 3. 偏移量管理</span></span><br><span class="line"><span class="comment">//    - AUTO_COMMIT：自动提交，可能丢失或重复消费</span></span><br><span class="line"><span class="comment">//    - MANUAL_COMMIT：手动提交，保证精确一次</span></span><br><span class="line"><span class="comment">// 4. 幂等性处理</span></span><br><span class="line"><span class="comment">//    - 消费端需保证幂等，避免重复消费造成库存或状态异常</span></span><br><span class="line"><span class="comment">// 5. 异常处理与重试</span></span><br><span class="line"><span class="comment">//    - 消费失败可重试，或发送到死信主题</span></span><br><span class="line"><span class="comment">//    - 避免阻塞消费线程</span></span><br></pre></td></tr></table></figure><h2 id="实战业务场景应用案例"><a href="#实战业务场景应用案例" class="headerlink" title="实战业务场景应用案例"></a>实战业务场景应用案例</h2><h3 id="1-电商订单处理系统"><a href="#1-电商订单处理系统" class="headerlink" title="1. 电商订单处理系统"></a>1. 电商订单处理系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderProcessingService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StockService stockService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderRepository orderRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderProcessingService</span><span class="params">(KafkaTemplate&lt;String, String&gt; kafkaTemplate, </span></span><br><span class="line"><span class="params">                                 ObjectMapper objectMapper,</span></span><br><span class="line"><span class="params">                                 StockService stockService,</span></span><br><span class="line"><span class="params">                                 OrderRepository orderRepository)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">        <span class="built_in">this</span>.stockService = stockService;</span><br><span class="line">        <span class="built_in">this</span>.orderRepository = orderRepository;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单并发送到Kafka</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">createOrder</span><span class="params">(OrderRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建订单实体</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUserId(request.getUserId());</span><br><span class="line">        order.setAmount(request.getAmount());</span><br><span class="line">        order.setStatus(OrderStatus.CREATED);</span><br><span class="line">        order.setCreateTime(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 保存订单到数据库</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">savedOrder</span> <span class="operator">=</span> orderRepository.save(order);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 发送订单到Kafka，使用订单ID作为key确保相同订单的消息进入同一分区</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">orderJson</span> <span class="operator">=</span> objectMapper.writeValueAsString(savedOrder);</span><br><span class="line">            <span class="comment">// 使用订单ID作为key，确保同一订单的消息顺序性</span></span><br><span class="line">            kafkaTemplate.send(<span class="string">&quot;order-topic&quot;</span>, String.valueOf(savedOrder.getId()), orderJson)</span><br><span class="line">                .addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;SendResult&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult&lt;String, String&gt; result)</span> &#123;</span><br><span class="line">                        <span class="comment">// 记录发送成功日志，包含分区和偏移量信息</span></span><br><span class="line">                        log.info(<span class="string">&quot;订单消息发送成功: 订单ID=&#123;&#125;, 分区=&#123;&#125;, 偏移量=&#123;&#125;&quot;</span>, </span><br><span class="line">                                savedOrder.getId(), </span><br><span class="line">                                result.getRecordMetadata().partition(),</span><br><span class="line">                                result.getRecordMetadata().offset());</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">                        <span class="comment">// 发送失败处理，可以重试或记录失败日志</span></span><br><span class="line">                        log.error(<span class="string">&quot;订单消息发送失败: 订单ID=&#123;&#125;, 错误=&#123;&#125;&quot;</span>, savedOrder.getId(), ex.getMessage());</span><br><span class="line">                        <span class="comment">// 实际生产中可以添加重试机制或发送到死信队列</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;订单序列化失败&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;订单创建失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> savedOrder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConsumerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StockService stockService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderRepository orderRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NotificationService notificationService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderConsumerService</span><span class="params">(ObjectMapper objectMapper,</span></span><br><span class="line"><span class="params">                               StockService stockService,</span></span><br><span class="line"><span class="params">                               OrderRepository orderRepository,</span></span><br><span class="line"><span class="params">                               NotificationService notificationService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">        <span class="built_in">this</span>.stockService = stockService;</span><br><span class="line">        <span class="built_in">this</span>.orderRepository = orderRepository;</span><br><span class="line">        <span class="built_in">this</span>.notificationService = notificationService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费订单消息并处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;order-topic&quot;, groupId = &quot;order-processing-group&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(ConsumerRecord&lt;String, String&gt; record, Acknowledgment ack)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderJson</span> <span class="operator">=</span> record.value();</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderIdStr</span> <span class="operator">=</span> record.key();</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;接收到订单消息: 分区=&#123;&#125;, 偏移量=&#123;&#125;, 订单ID=&#123;&#125;&quot;</span>, </span><br><span class="line">                record.partition(), record.offset(), orderIdStr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 解析订单JSON</span></span><br><span class="line">            <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> objectMapper.readValue(orderJson, Order.class);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 幂等性检查 - 防止重复处理</span></span><br><span class="line">            <span class="keyword">if</span> (isOrderAlreadyProcessed(order.getId())) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;订单已处理，跳过: 订单ID=&#123;&#125;&quot;</span>, order.getId());</span><br><span class="line">                ack.acknowledge();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 检查库存</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">stockAvailable</span> <span class="operator">=</span> stockService.checkAndLockStock(order.getItems());</span><br><span class="line">            <span class="keyword">if</span> (!stockAvailable) &#123;</span><br><span class="line">                <span class="comment">// 库存不足，更新订单状态为失败</span></span><br><span class="line">                updateOrderStatus(order.getId(), OrderStatus.FAILED_INSUFFICIENT_STOCK);</span><br><span class="line">                notificationService.notifyUser(order.getUserId(), <span class="string">&quot;订单处理失败：库存不足&quot;</span>);</span><br><span class="line">                ack.acknowledge();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4. 处理支付（实际中可能是另一个独立的消息流程）</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">paymentSuccess</span> <span class="operator">=</span> processPayment(order);</span><br><span class="line">            <span class="keyword">if</span> (!paymentSuccess) &#123;</span><br><span class="line">                <span class="comment">// 支付失败，释放库存锁定</span></span><br><span class="line">                stockService.releaseStockLock(order.getItems());</span><br><span class="line">                updateOrderStatus(order.getId(), OrderStatus.FAILED_PAYMENT);</span><br><span class="line">                notificationService.notifyUser(order.getUserId(), <span class="string">&quot;订单处理失败：支付问题&quot;</span>);</span><br><span class="line">                ack.acknowledge();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 5. 确认扣减库存</span></span><br><span class="line">            stockService.confirmStockDeduction(order.getItems());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 6. 更新订单状态为成功</span></span><br><span class="line">            updateOrderStatus(order.getId(), OrderStatus.COMPLETED);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 7. 发送订单确认通知</span></span><br><span class="line">            notificationService.notifyUser(order.getUserId(), <span class="string">&quot;订单处理成功：&quot;</span> + order.getId());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 8. 记录处理成功的订单ID（用于幂等性检查）</span></span><br><span class="line">            markOrderAsProcessed(order.getId());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 9. 手动提交偏移量</span></span><br><span class="line">            ack.acknowledge();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 异常处理策略</span></span><br><span class="line">            log.error(<span class="string">&quot;订单处理异常: 订单ID=&#123;&#125;, 错误=&#123;&#125;&quot;</span>, orderIdStr, e.getMessage(), e);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据异常类型决定是否重试</span></span><br><span class="line">            <span class="keyword">if</span> (isRetryableException(e)) &#123;</span><br><span class="line">                <span class="comment">// 不提交偏移量，消息会被重新消费</span></span><br><span class="line">                log.info(<span class="string">&quot;将重试处理订单: 订单ID=&#123;&#125;&quot;</span>, orderIdStr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不可重试的异常，发送到死信主题并确认原消息</span></span><br><span class="line">                sendToDeadLetterTopic(record);</span><br><span class="line">                ack.acknowledge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他辅助方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-金融风控系统"><a href="#2-金融风控系统" class="headerlink" title="2. 金融风控系统"></a>2. 金融风控系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionMonitoringService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransactionMonitoringService</span><span class="params">(KafkaTemplate&lt;String, String&gt; kafkaTemplate,</span></span><br><span class="line"><span class="params">                                       ObjectMapper objectMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送交易事件到Kafka进行风控分析</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">monitorTransaction</span><span class="params">(Transaction transaction)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 添加元数据</span></span><br><span class="line">            transaction.setTimestamp(System.currentTimeMillis());</span><br><span class="line">            transaction.setSource(<span class="string">&quot;payment-service&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">transactionJson</span> <span class="operator">=</span> objectMapper.writeValueAsString(transaction);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用用户ID作为key，确保同一用户的交易进入同一分区，便于风控分析</span></span><br><span class="line">            kafkaTemplate.send(<span class="string">&quot;transaction-events&quot;</span>, transaction.getUserId(), transactionJson);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;交易事件序列化失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FraudDetectionService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RiskScoringEngine riskEngine;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserProfileRepository userProfileRepo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionRepository transactionRepo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用Caffeine缓存存储用户最近的交易历史</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache&lt;String, List&lt;Transaction&gt;&gt; userTransactionsCache;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FraudDetectionService</span><span class="params">(RiskScoringEngine riskEngine,</span></span><br><span class="line"><span class="params">                                UserProfileRepository userProfileRepo,</span></span><br><span class="line"><span class="params">                                TransactionRepository transactionRepo,</span></span><br><span class="line"><span class="params">                                KafkaTemplate&lt;String, String&gt; kafkaTemplate,</span></span><br><span class="line"><span class="params">                                ObjectMapper objectMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.riskEngine = riskEngine;</span><br><span class="line">        <span class="built_in">this</span>.userProfileRepo = userProfileRepo;</span><br><span class="line">        <span class="built_in">this</span>.transactionRepo = transactionRepo;</span><br><span class="line">        <span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化缓存</span></span><br><span class="line">        <span class="built_in">this</span>.userTransactionsCache = Caffeine.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">10_000</span>)</span><br><span class="line">            .expireAfterWrite(<span class="number">30</span>, TimeUnit.MINUTES)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实时交易风控分析</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;transaction-events&quot;, groupId = &quot;fraud-detection-group&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">analyzeTransaction</span><span class="params">(ConsumerRecord&lt;String, String&gt; record, Acknowledgment ack)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 解析交易数据</span></span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> objectMapper.readValue(record.value(), Transaction.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> record.key();</span><br><span class="line">            </span><br><span class="line">            log.info(<span class="string">&quot;接收到交易事件: 用户ID=&#123;&#125;, 交易ID=&#123;&#125;, 金额=&#123;&#125;&quot;</span>, </span><br><span class="line">                    userId, transaction.getId(), transaction.getAmount());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 获取用户画像数据</span></span><br><span class="line">            <span class="type">UserProfile</span> <span class="variable">userProfile</span> <span class="operator">=</span> userProfileRepo.findById(userId)</span><br><span class="line">                .orElseGet(() -&gt; createDefaultUserProfile(userId));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 获取用户最近交易历史（从缓存或数据库）</span></span><br><span class="line">            List&lt;Transaction&gt; recentTransactions = getUserRecentTransactions(userId);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4. 添加当前交易到历史记录</span></span><br><span class="line">            recentTransactions.add(transaction);</span><br><span class="line">            userTransactionsCache.put(userId, recentTransactions);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 5. 执行风控规则</span></span><br><span class="line">            <span class="type">RiskAssessment</span> <span class="variable">riskAssessment</span> <span class="operator">=</span> riskEngine.assessRisk(transaction, userProfile, recentTransactions);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 6. 处理风控结果</span></span><br><span class="line">            <span class="keyword">if</span> (riskAssessment.getRiskLevel() &gt;= RiskLevel.HIGH.getValue()) &#123;</span><br><span class="line">                <span class="comment">// 高风险交易处理</span></span><br><span class="line">                handleHighRiskTransaction(transaction, riskAssessment);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (riskAssessment.getRiskLevel() &gt;= RiskLevel.MEDIUM.getValue()) &#123;</span><br><span class="line">                <span class="comment">// 中风险交易处理</span></span><br><span class="line">                handleMediumRiskTransaction(transaction, riskAssessment);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 低风险交易处理</span></span><br><span class="line">                handleLowRiskTransaction(transaction);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 7. 保存风控结果</span></span><br><span class="line">            saveRiskAssessmentResult(transaction.getId(), riskAssessment);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 8. 更新用户画像</span></span><br><span class="line">            updateUserRiskProfile(userId, transaction, riskAssessment);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 9. 确认消息处理完成</span></span><br><span class="line">            ack.acknowledge();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;交易风控分析异常&quot;</span>, e);</span><br><span class="line">            <span class="comment">// 根据异常类型决定是否重试</span></span><br><span class="line">            <span class="keyword">if</span> (shouldRetry(e)) &#123;</span><br><span class="line">                <span class="comment">// 不确认，将重试</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 发送到死信队列并确认</span></span><br><span class="line">                sendToDeadLetterTopic(record);</span><br><span class="line">                ack.acknowledge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理高风险交易</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleHighRiskTransaction</span><span class="params">(Transaction transaction, RiskAssessment assessment)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 阻断交易</span></span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;transaction-responses&quot;</span>, transaction.getId(), </span><br><span class="line">                createTransactionResponse(transaction, <span class="literal">false</span>, <span class="string">&quot;疑似欺诈交易&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 触发欺诈警报</span></span><br><span class="line">        <span class="type">FraudAlert</span> <span class="variable">alert</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FraudAlert</span>();</span><br><span class="line">        alert.setTransactionId(transaction.getId());</span><br><span class="line">        alert.setUserId(transaction.getUserId());</span><br><span class="line">        alert.setAmount(transaction.getAmount());</span><br><span class="line">        alert.setRiskScore(assessment.getRiskScore());</span><br><span class="line">        alert.setRiskFactors(assessment.getRiskFactors());</span><br><span class="line">        alert.setTimestamp(System.currentTimeMillis());</span><br><span class="line">        </span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;fraud-alerts&quot;</span>, alert.getUserId(), objectMapper.writeValueAsString(alert));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 记录事件</span></span><br><span class="line">        log.warn(<span class="string">&quot;检测到高风险交易: 交易ID=&#123;&#125;, 用户ID=&#123;&#125;, 风险分数=&#123;&#125;&quot;</span>, </span><br><span class="line">                transaction.getId(), transaction.getUserId(), assessment.getRiskScore());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他辅助方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实时数据分析系统"><a href="#3-实时数据分析系统" class="headerlink" title="3. 实时数据分析系统"></a>3. 实时数据分析系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserEventTrackingService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserEventTrackingService</span><span class="params">(KafkaTemplate&lt;String, String&gt; kafkaTemplate,</span></span><br><span class="line"><span class="params">                                   ObjectMapper objectMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跟踪用户事件并发送到Kafka</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trackEvent</span><span class="params">(UserEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 添加元数据</span></span><br><span class="line">            <span class="keyword">if</span> (event.getTimestamp() == <span class="number">0</span>) &#123;</span><br><span class="line">                event.setTimestamp(System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">eventJson</span> <span class="operator">=</span> objectMapper.writeValueAsString(event);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用事件类型作为key，相同类型的事件会进入同一分区</span></span><br><span class="line">            kafkaTemplate.send(<span class="string">&quot;user-events&quot;</span>, event.getEventType(), eventJson);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;用户事件序列化失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealTimeAnalyticsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用Caffeine缓存作为本地计数器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache&lt;String, AtomicLong&gt; localCounters;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RealTimeAnalyticsService</span><span class="params">(ObjectMapper objectMapper,</span></span><br><span class="line"><span class="params">                                   RedisTemplate&lt;String, String&gt; redisTemplate,</span></span><br><span class="line"><span class="params">                                   KafkaTemplate&lt;String, String&gt; kafkaTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化本地计数器缓存</span></span><br><span class="line">        <span class="built_in">this</span>.localCounters = Caffeine.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">10_000</span>)</span><br><span class="line">            .expireAfterWrite(<span class="number">1</span>, TimeUnit.MINUTES)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实时分析用户事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;user-events&quot;, groupId = &quot;analytics-service-group&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processUserEvent</span><span class="params">(ConsumerRecord&lt;String, String&gt; record, Acknowledgment ack)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 解析用户事件</span></span><br><span class="line">            <span class="type">UserEvent</span> <span class="variable">event</span> <span class="operator">=</span> objectMapper.readValue(record.value(), UserEvent.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">eventType</span> <span class="operator">=</span> record.key();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 增加事件计数</span></span><br><span class="line">            incrementEventCounter(eventType);</span><br><span class="line">            incrementUserEventCounter(event.getUserId(), eventType);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 会话分析</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;page_view&quot;</span>.equals(eventType)) &#123;</span><br><span class="line">                updateUserSession(event);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4. 实时热点检测</span></span><br><span class="line">            detectHotContent(event);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 5. 用户行为序列分析</span></span><br><span class="line">            analyzeUserBehaviorSequence(event);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 6. 确认消息处理完成</span></span><br><span class="line">            ack.acknowledge();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;用户事件处理异常&quot;</span>, e);</span><br><span class="line">            <span class="comment">// 大多数分析场景可以容忍少量数据丢失，直接确认</span></span><br><span class="line">            ack.acknowledge();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加事件计数器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">incrementEventCounter</span><span class="params">(String eventType)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 更新本地计数器</span></span><br><span class="line">        <span class="type">AtomicLong</span> <span class="variable">localCounter</span> <span class="operator">=</span> localCounters.get(eventType, k -&gt; <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">localCount</span> <span class="operator">=</span> localCounter.incrementAndGet();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 当本地计数达到阈值时，批量更新Redis</span></span><br><span class="line">        <span class="keyword">if</span> (localCount % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> <span class="string">&quot;event:count:&quot;</span> + eventType;</span><br><span class="line">            redisTemplate.opsForValue().increment(redisKey, localCount);</span><br><span class="line">            localCounter.set(<span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 发布计数更新事件</span></span><br><span class="line">            <span class="type">CounterUpdate</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CounterUpdate</span>(eventType, <span class="string">&quot;event_count&quot;</span>, localCount);</span><br><span class="line">            kafkaTemplate.send(<span class="string">&quot;analytics-updates&quot;</span>, eventType, objectMapper.writeValueAsString(update));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测热点内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">detectHotContent</span><span class="params">(UserEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;content_view&quot;</span>.equals(event.getEventType()) &amp;&amp; event.getProperties().containsKey(<span class="string">&quot;contentId&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">contentId</span> <span class="operator">=</span> event.getProperties().get(<span class="string">&quot;contentId&quot;</span>).toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> <span class="string">&quot;content:views:&quot;</span> + contentId;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 1. 增加内容查看计数</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">viewCount</span> <span class="operator">=</span> redisTemplate.opsForValue().increment(redisKey);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 设置过期时间（滑动窗口）</span></span><br><span class="line">            redisTemplate.expire(redisKey, <span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 检查是否达到热点阈值</span></span><br><span class="line">            <span class="keyword">if</span> (viewCount != <span class="literal">null</span> &amp;&amp; viewCount &gt; <span class="number">1000</span> &amp;&amp; viewCount % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">HotContent</span> <span class="variable">hotContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotContent</span>();</span><br><span class="line">                hotContent.setContentId(contentId);</span><br><span class="line">                hotContent.setViewCount(viewCount);</span><br><span class="line">                hotContent.setTimestamp(System.currentTimeMillis());</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 发布热点内容事件</span></span><br><span class="line">                kafkaTemplate.send(<span class="string">&quot;hot-content&quot;</span>, contentId, objectMapper.writeValueAsString(hotContent));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他辅助方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-微服务通信与事件驱动架构"><a href="#4-微服务通信与事件驱动架构" class="headerlink" title="4. 微服务通信与事件驱动架构"></a>4. 微服务通信与事件驱动架构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDomainEventPublisher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderDomainEventPublisher</span><span class="params">(KafkaTemplate&lt;String, String&gt; kafkaTemplate,</span></span><br><span class="line"><span class="params">                                    ObjectMapper objectMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布订单领域事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishOrderEvent</span><span class="params">(OrderDomainEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 添加元数据</span></span><br><span class="line">            event.setEventId(UUID.randomUUID().toString());</span><br><span class="line">            event.setTimestamp(System.currentTimeMillis());</span><br><span class="line">            event.setVersion(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">eventJson</span> <span class="operator">=</span> objectMapper.writeValueAsString(event);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 发送事件到对应主题</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;order-events&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 使用订单ID作为key，确保同一订单的事件顺序性</span></span><br><span class="line">            kafkaTemplate.send(topic, event.getOrderId(), eventJson)</span><br><span class="line">                .addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;SendResult&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult&lt;String, String&gt; result)</span> &#123;</span><br><span class="line">                        log.debug(<span class="string">&quot;领域事件发布成功: 事件类型=&#123;&#125;, 订单ID=&#123;&#125;, 分区=&#123;&#125;, 偏移量=&#123;&#125;&quot;</span>, </span><br><span class="line">                                event.getEventType(), event.getOrderId(), </span><br><span class="line">                                result.getRecordMetadata().partition(),</span><br><span class="line">                                result.getRecordMetadata().offset());</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;领域事件发布失败: 事件类型=&#123;&#125;, 订单ID=&#123;&#125;, 错误=&#123;&#125;&quot;</span>, </span><br><span class="line">                                event.getEventType(), event.getOrderId(), ex.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;领域事件序列化失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InventoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InventoryRepository inventoryRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InventoryService</span><span class="params">(InventoryRepository inventoryRepository,</span></span><br><span class="line"><span class="params">                           KafkaTemplate&lt;String, String&gt; kafkaTemplate,</span></span><br><span class="line"><span class="params">                           ObjectMapper objectMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.inventoryRepository = inventoryRepository;</span><br><span class="line">        <span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听订单创建事件并处理库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;order-events&quot;, groupId = &quot;inventory-service-group&quot;,</span></span><br><span class="line"><span class="meta">                  containerFactory = &quot;orderEventsKafkaListenerContainerFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleOrderEvent</span><span class="params">(ConsumerRecord&lt;String, String&gt; record, Acknowledgment ack)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 解析事件</span></span><br><span class="line">            <span class="type">OrderDomainEvent</span> <span class="variable">event</span> <span class="operator">=</span> objectMapper.readValue(record.value(), OrderDomainEvent.class);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 只处理关心的事件类型</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;ORDER_CREATED&quot;</span>.equals(event.getEventType())) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;接收到订单创建事件: 订单ID=&#123;&#125;&quot;</span>, event.getOrderId());</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 3. 提取订单项</span></span><br><span class="line">                List&lt;OrderItem&gt; orderItems = event.getOrderItems();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 4. 检查并扣减库存</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> reserveInventory(orderItems);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 5. 发布库存处理结果事件</span></span><br><span class="line">                publishInventoryEvent(event.getOrderId(), success);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 6. 确认消息处理完成</span></span><br><span class="line">            ack.acknowledge();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;处理订单事件异常&quot;</span>, e);</span><br><span class="line">            <span class="comment">// 根据异常类型决定是否重试</span></span><br><span class="line">            <span class="keyword">if</span> (isRetryableException(e)) &#123;</span><br><span class="line">                <span class="comment">// 不确认，将重试</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 确认并记录失败</span></span><br><span class="line">                ack.acknowledge();</span><br><span class="line">                recordFailedEvent(record);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预留库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reserveInventory</span><span class="params">(List&lt;OrderItem&gt; orderItems)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现库存预留逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (OrderItem item : orderItems) &#123;</span><br><span class="line">            <span class="type">Inventory</span> <span class="variable">inventory</span> <span class="operator">=</span> inventoryRepository.findByProductIdWithLock(item.getProductId());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (inventory == <span class="literal">null</span> || inventory.getAvailableQuantity() &lt; item.getQuantity()) &#123;</span><br><span class="line">                <span class="comment">// 库存不足，回滚事务</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsufficientInventoryException</span>(<span class="string">&quot;库存不足: 产品ID=&quot;</span> + item.getProductId());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 扣减可用库存</span></span><br><span class="line">            inventory.setAvailableQuantity(inventory.getAvailableQuantity() - item.getQuantity());</span><br><span class="line">            inventory.setReservedQuantity(inventory.getReservedQuantity() + item.getQuantity());</span><br><span class="line">            inventoryRepository.save(inventory);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布库存事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">publishInventoryEvent</span><span class="params">(String orderId, <span class="type">boolean</span> success)</span> &#123;</span><br><span class="line">        <span class="type">InventoryEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InventoryEvent</span>();</span><br><span class="line">        event.setOrderId(orderId);</span><br><span class="line">        event.setEventType(success ? <span class="string">&quot;INVENTORY_RESERVED&quot;</span> : <span class="string">&quot;INVENTORY_RESERVATION_FAILED&quot;</span>);</span><br><span class="line">        event.setTimestamp(System.currentTimeMillis());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            kafkaTemplate.send(<span class="string">&quot;inventory-events&quot;</span>, orderId, objectMapper.writeValueAsString(event));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;库存事件序列化失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他辅助方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Kafka-监控与性能优化"><a href="#5-Kafka-监控与性能优化" class="headerlink" title="5. Kafka 监控与性能优化"></a>5. Kafka 监控与性能优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaAdvancedConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ProducerFactory&lt;String, String&gt; <span class="title function_">producerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;kafka1:9092,kafka2:9092,kafka3:9092&quot;</span>);</span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 可靠性配置</span></span><br><span class="line">        props.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;all&quot;</span>); <span class="comment">// 所有副本确认</span></span><br><span class="line">        props.put(ProducerConfig.RETRIES_CONFIG, <span class="number">3</span>);  <span class="comment">// 重试次数</span></span><br><span class="line">        props.put(ProducerConfig.RETRY_BACKOFF_MS_CONFIG, <span class="number">100</span>); <span class="comment">// 重试间隔</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 性能优化配置</span></span><br><span class="line">        props.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="number">16384</span>); <span class="comment">// 批次大小</span></span><br><span class="line">        props.put(ProducerConfig.LINGER_MS_CONFIG, <span class="number">5</span>); <span class="comment">// 等待时间，增加批量效果</span></span><br><span class="line">        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="number">33554432</span>); <span class="comment">// 缓冲区大小</span></span><br><span class="line">        props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, <span class="string">&quot;snappy&quot;</span>); <span class="comment">// 启用压缩</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 幂等性配置</span></span><br><span class="line">        props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, <span class="literal">true</span>); <span class="comment">// 启用幂等性</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultKafkaProducerFactory</span>&lt;&gt;(props);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConsumerFactory&lt;String, String&gt; <span class="title function_">consumerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;kafka1:9092,kafka2:9092,kafka3:9092&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;my-consumer-group&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 消费者配置</span></span><br><span class="line">        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>); <span class="comment">// 禁用自动提交</span></span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;earliest&quot;</span>); <span class="comment">// 从最早的消息开始消费</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 性能优化配置</span></span><br><span class="line">        props.put(ConsumerConfig.FETCH_MIN_BYTES_CONFIG, <span class="number">1024</span>); <span class="comment">// 最小获取字节数</span></span><br><span class="line">        props.put(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG, <span class="number">500</span>); <span class="comment">// 最大等待时间</span></span><br><span class="line">        props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, <span class="number">500</span>); <span class="comment">// 单次拉取最大记录数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultKafkaConsumerFactory</span>&lt;&gt;(props);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; <span class="title function_">kafkaListenerContainerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = <span class="keyword">new</span> <span class="title class_">ConcurrentKafkaListenerContainerFactory</span>&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 并发配置</span></span><br><span class="line">        factory.setConcurrency(<span class="number">3</span>); <span class="comment">// 每个主题的消费者线程数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 批量消费配置</span></span><br><span class="line">        factory.setBatchListener(<span class="literal">true</span>); <span class="comment">// 启用批量监听</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 错误处理</span></span><br><span class="line">        factory.setErrorHandler(<span class="keyword">new</span> <span class="title class_">SeekToCurrentErrorHandler</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">DeadLetterPublishingRecoverer</span>(kafkaTemplate()), </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FixedBackOff</span>(<span class="number">1000L</span>, <span class="number">3</span>))); <span class="comment">// 重试3次，间隔1秒</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 手动提交配置</span></span><br><span class="line">        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KafkaTemplate&lt;String, String&gt; <span class="title function_">kafkaTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KafkaTemplate</span>&lt;&gt;(producerFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaMonitoringService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaAdmin kafkaAdmin;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MeterRegistry meterRegistry;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KafkaMonitoringService</span><span class="params">(KafkaAdmin kafkaAdmin, </span></span><br><span class="line"><span class="params">                                 MeterRegistry meterRegistry,</span></span><br><span class="line"><span class="params">                                 KafkaTemplate&lt;String, String&gt; kafkaTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.kafkaAdmin = kafkaAdmin;</span><br><span class="line">        <span class="built_in">this</span>.meterRegistry = meterRegistry;</span><br><span class="line">        <span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化监控指标</span></span><br><span class="line">        initializeMetrics();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化Kafka监控指标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initializeMetrics</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 生产者指标</span></span><br><span class="line">        kafkaTemplate.metrics().forEach((name, metric) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.name().contains(<span class="string">&quot;record-send-rate&quot;</span>) || </span><br><span class="line">                name.name().contains(<span class="string">&quot;request-latency-avg&quot;</span>) ||</span><br><span class="line">                name.name().contains(<span class="string">&quot;record-error-rate&quot;</span>)) &#123;</span><br><span class="line">                meterRegistry.gauge(<span class="string">&quot;kafka.producer.&quot;</span> + name.name(), </span><br><span class="line">                        metric, m -&gt; m.metricValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 自定义消费者延迟指标</span></span><br><span class="line">        Gauge.builder(<span class="string">&quot;kafka.consumer.lag&quot;</span>, <span class="built_in">this</span>, KafkaMonitoringService::calculateConsumerLag)</span><br><span class="line">            .tag(<span class="string">&quot;group&quot;</span>, <span class="string">&quot;my-consumer-group&quot;</span>)</span><br><span class="line">            .tag(<span class="string">&quot;topic&quot;</span>, <span class="string">&quot;important-topic&quot;</span>)</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算消费者延迟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">calculateConsumerLag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实现消费者延迟计算逻辑</span></span><br><span class="line">            <span class="comment">// 1. 获取主题最新偏移量</span></span><br><span class="line">            <span class="comment">// 2. 获取消费者组当前偏移量</span></span><br><span class="line">            <span class="comment">// 3. 计算差值</span></span><br><span class="line">            <span class="keyword">return</span> getTopicEndOffsets() - getConsumerGroupOffsets();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;计算消费者延迟异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监控Kafka集群健康状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 60000)</span> <span class="comment">// 每分钟执行一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">monitorClusterHealth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 检查Broker可用性</span></span><br><span class="line">            Map&lt;String, Object&gt; configs = kafkaAdmin.getConfigurationProperties();</span><br><span class="line">            <span class="type">String</span> <span class="variable">bootstrapServers</span> <span class="operator">=</span> (String) configs.get(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG);</span><br><span class="line">            </span><br><span class="line">            <span class="type">AdminClient</span> <span class="variable">adminClient</span> <span class="operator">=</span> AdminClient.create(configs);</span><br><span class="line">            <span class="type">DescribeClusterResult</span> <span class="variable">clusterResult</span> <span class="operator">=</span> adminClient.describeCluster();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2. 获取集群节点信息</span></span><br><span class="line">            Collection&lt;Node&gt; nodes = clusterResult.nodes().get(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="type">Node</span> <span class="variable">controller</span> <span class="operator">=</span> clusterResult.controller().get(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3. 记录集群状态</span></span><br><span class="line">            log.info(<span class="string">&quot;Kafka集群状态: 节点数量=&#123;&#125;, 控制器ID=&#123;&#125;&quot;</span>, nodes.size(), controller.id());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4. 检查主题状态</span></span><br><span class="line">            checkTopicsHealth(adminClient);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 5. 检查消费者组状态</span></span><br><span class="line">            checkConsumerGroupsHealth(adminClient);</span><br><span class="line">            </span><br><span class="line">            adminClient.close();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;监控Kafka集群健康状态异常&quot;</span>, e);</span><br><span class="line">            <span class="comment">// 触发告警</span></span><br><span class="line">            sendHealthAlert(<span class="string">&quot;Kafka集群监控异常: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查主题健康状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkTopicsHealth</span><span class="params">(AdminClient adminClient)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 获取所有主题</span></span><br><span class="line">        <span class="type">ListTopicsResult</span> <span class="variable">topicsResult</span> <span class="operator">=</span> adminClient.listTopics();</span><br><span class="line">        Set&lt;String&gt; topics = topicsResult.names().get(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 检查关键主题的分区和副本状态</span></span><br><span class="line">        <span class="keyword">for</span> (String topic : topics) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isImportantTopic(topic)) &#123;</span><br><span class="line">                <span class="type">DescribeTopicResult</span> <span class="variable">topicResult</span> <span class="operator">=</span> adminClient.describeTopics(</span><br><span class="line">                        Collections.singleton(topic)).values().get(topic);</span><br><span class="line">                <span class="type">TopicDescription</span> <span class="variable">topicDesc</span> <span class="operator">=</span> topicResult.get(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 3. 检查分区数量</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">partitionCount</span> <span class="operator">=</span> topicDesc.partitions().size();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 4. 检查每个分区的副本状态</span></span><br><span class="line">                <span class="keyword">for</span> (TopicPartitionInfo partition : topicDesc.partitions()) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">replicaCount</span> <span class="operator">=</span> partition.replicas().size();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">isrCount</span> <span class="operator">=</span> partition.isr().size();</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 5. 检查ISR是否小于副本数，表示有副本不同步</span></span><br><span class="line">                    <span class="keyword">if</span> (isrCount &lt; replicaCount) &#123;</span><br><span class="line">                        log.warn(<span class="string">&quot;主题副本不同步: 主题=&#123;&#125;, 分区=&#123;&#125;, 副本数=&#123;&#125;, ISR数=&#123;&#125;&quot;</span>, </span><br><span class="line">                                topic, partition.partition(), replicaCount, isrCount);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 触发告警</span></span><br><span class="line">                        sendHealthAlert(String.format(</span><br><span class="line">                                <span class="string">&quot;Kafka主题副本不同步: 主题=%s, 分区=%d, 副本数=%d, ISR数=%d&quot;</span>, </span><br><span class="line">                                topic, partition.partition(), replicaCount, isrCount));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他辅助方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结与最佳实践"><a href="#总结与最佳实践" class="headerlink" title="总结与最佳实践"></a>总结与最佳实践</h2><p>通过本文的深入分析，我们了解了Kafka在高并发消息处理中的核心机制和分区策略。以下是一些关键的最佳实践总结：</p><h3 id="实际业务场景应用"><a href="#实际业务场景应用" class="headerlink" title="实际业务场景应用"></a>实际业务场景应用</h3><ol><li><p><strong>电商订单处理系统</strong></p><ul><li>使用订单ID作为消息key确保同一订单的消息顺序性</li><li>实现幂等性处理避免重复消费</li><li>采用手动确认模式确保消息可靠处理</li><li>针对不同异常类型采用不同的重试策略</li></ul></li><li><p><strong>金融风控系统</strong></p><ul><li>利用Kafka实现实时交易监控和风险评估</li><li>使用用户ID作为key将同一用户的交易路由到同一分区</li><li>结合本地缓存和消息队列实现高效的风控分析</li><li>针对不同风险级别采用不同的处理策略</li></ul></li><li><p><strong>实时数据分析系统</strong></p><ul><li>使用Kafka作为事件流处理的核心组件</li><li>实现本地计数器与分布式计数器的结合</li><li>通过事件类型分区实现高效的并行处理</li><li>热点内容检测与实时推送</li></ul></li><li><p><strong>微服务通信与事件驱动架构</strong></p><ul><li>使用领域事件实现服务间的松耦合通信</li><li>确保事件的顺序性和可靠性</li><li>实现基于事件的一致性处理</li><li>服务间的异步协作与状态同步</li></ul></li><li><p><strong>Kafka监控与性能优化</strong></p><ul><li>生产者和消费者的高级配置优化</li><li>实时监控Kafka集群健康状态</li><li>消费者延迟监控与告警</li><li>主题分区和副本健康检查</li></ul></li></ol><h3 id="性能优化关键点"><a href="#性能优化关键点" class="headerlink" title="性能优化关键点"></a>性能优化关键点</h3><ol><li><p><strong>分区数量优化</strong></p><ul><li>分区数应根据预期吞吐量和消费者数量合理设置</li><li>过多分区会增加broker负担，过少分区会限制并行度</li><li>建议：分区数 &#x3D; min(吞吐量&#x2F;单分区吞吐量, 消费者数量 * 3)</li></ul></li><li><p><strong>生产者批处理优化</strong></p><ul><li>适当增加<code>batch.size</code>和<code>linger.ms</code>提高批处理效率</li><li>启用压缩减少网络传输开销</li><li>根据可靠性需求设置适当的<code>acks</code>值</li></ul></li><li><p><strong>消费者并发优化</strong></p><ul><li>合理设置消费者数量，通常不超过分区数</li><li>调整<code>fetch.min.bytes</code>和<code>fetch.max.wait.ms</code>平衡延迟和吞吐量</li><li>使用批量消费提高处理效率</li></ul></li><li><p><strong>可靠性与吞吐量权衡</strong></p><ul><li>高可靠性：设置<code>acks=all</code>，适当的副本数，禁用自动提交</li><li>高吞吐量：批处理，压缩，适当增加<code>buffer.memory</code></li><li>根据业务场景选择合适的配置组合</li></ul></li><li><p><strong>监控告警机制</strong></p><ul><li>监控消费者延迟（Consumer Lag）</li><li>监控broker健康状态和分区副本同步状态</li><li>设置关键指标的告警阈值</li><li>定期检查主题和消费者组状态</li></ul></li></ol><p>通过本文的学习，你应该能够理解Kafka的核心工作原理，掌握分区策略的设计思想，并能在实际业务场景中合理应用Kafka实现高并发、高可靠的消息处理系统。无论是构建实时数据管道、事件驱动架构，还是微服务通信，Kafka都能提供强大的支持。</p><h2 id="注意事项与容易忽略点"><a href="#注意事项与容易忽略点" class="headerlink" title="注意事项与容易忽略点"></a>注意事项与容易忽略点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 分区数量对并发有直接影响，过少可能成为瓶颈</span></span><br><span class="line"><span class="comment">// 2. 手动提交偏移量要谨慎，避免重复提交或未提交</span></span><br><span class="line"><span class="comment">// 3. 消费者幂等性设计，避免重复扣减库存或重复发通知</span></span><br><span class="line"><span class="comment">// 4. 异常处理策略，防止阻塞消费线程</span></span><br><span class="line"><span class="comment">// 5. Broker 配置，确保高可用副本和持久化消息</span></span><br><span class="line"><span class="comment">// 6. 消费者均衡，新增或删除消费者会触发再平衡，可能短暂重复消费</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Kafka 提供高吞吐量、可扩展的分区机制和消费组负载均衡</span></span><br><span class="line"><span class="comment">// 配合 Spring Boot 的 KafkaTemplate 和 @KafkaListener，可快速构建高并发异步系统</span></span><br><span class="line"><span class="comment">// 深入理解分区、偏移量、幂等性和异常处理策略，是可靠消息系统的关键</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 实际业务场景应用：</span></span><br><span class="line"><span class="comment">// 1. 电商订单处理：异步订单处理、库存管理、支付通知</span></span><br><span class="line"><span class="comment">// 2. 金融风控系统：实时交易监控、风险评估、异常检测</span></span><br><span class="line"><span class="comment">// 3. 实时数据分析：用户行为分析、会话跟踪、热点检测</span></span><br><span class="line"><span class="comment">// 4. 微服务通信：事件驱动架构、领域事件发布、服务解耦</span></span><br><span class="line"><span class="comment">// 5. 系统监控：性能指标收集、消费者延迟监控、集群健康检查</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 性能优化关键点：</span></span><br><span class="line"><span class="comment">// 1. 合理的分区数量和分区策略</span></span><br><span class="line"><span class="comment">// 2. 生产者批处理和压缩配置</span></span><br><span class="line"><span class="comment">// 3. 消费者并发和批量处理</span></span><br><span class="line"><span class="comment">// 4. 可靠性与吞吐量的权衡</span></span><br><span class="line"><span class="comment">// 5. 完善的监控和告警机制</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> Kafka </tag>
            
            <tag> 分区策略 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 与 RabbitMQ 消息队列实战</title>
      <link href="/myblog/2020/07/12/Spring%20Boot%20%E4%B8%8E%20RabbitMQ%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AE%9E%E6%88%98/"/>
      <url>/myblog/2020/07/12/Spring%20Boot%20%E4%B8%8E%20RabbitMQ%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在高并发系统中，异步处理任务可以降低响应时间，提高吞吐量。</span></span><br><span class="line"><span class="comment">// RabbitMQ 是常用的 AMQP 消息中间件，可实现异步消息队列、发布/订阅、延迟队列等模式。</span></span><br><span class="line"><span class="comment">// 深入理解消息确认机制、消费者监听、死信队列和重试策略，可保证系统可靠性。</span></span><br></pre></td></tr></table></figure><h2 id="RabbitMQ-基础配置"><a href="#RabbitMQ-基础配置" class="headerlink" title="RabbitMQ 基础配置"></a>RabbitMQ 基础配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">orderQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;order.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">orderExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;order.exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列绑定交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">orderBinding</span><span class="params">(Queue orderQueue, DirectExchange orderExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(orderQueue).to(orderExchange).with(<span class="string">&quot;order.routingkey&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置消息转换器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息生产者示例"><a href="#消息生产者示例" class="headerlink" title="消息生产者示例"></a>消息生产者示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderProducer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate.setMessageConverter(<span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendOrder</span><span class="params">(Order order)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;order.exchange&quot;</span>, <span class="string">&quot;order.routingkey&quot;</span>, order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息消费者示例"><a href="#消息消费者示例" class="headerlink" title="消息消费者示例"></a>消息消费者示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;order.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Order order, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> tag)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 模拟业务处理</span></span><br><span class="line">            processOrder(order);</span><br><span class="line">            <span class="comment">// 手动确认</span></span><br><span class="line">            channel.basicAck(tag, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 处理异常，消息重回队列或进入死信队列</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                channel.basicNack(tag, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(IOException ioException)&#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Order order)</span>&#123;</span><br><span class="line">        <span class="comment">// 处理订单逻辑，如库存扣减、支付状态更新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 消息确认机制</span></span><br><span class="line"><span class="comment">//    - 自动 ack：消息一旦消费即确认，异常可能导致消息丢失</span></span><br><span class="line"><span class="comment">//    - 手动 ack：业务处理成功后手动确认，保证消息不丢失</span></span><br><span class="line"><span class="comment">// 2. 重试与死信队列</span></span><br><span class="line"><span class="comment">//    - 消费失败可选择 requeue，避免消息丢失</span></span><br><span class="line"><span class="comment">//    - 配合死信队列，可做延迟重试或告警</span></span><br><span class="line"><span class="comment">// 3. 消息序列化</span></span><br><span class="line"><span class="comment">//    - 使用 Jackson2JsonMessageConverter 序列化对象，保证跨语言兼容</span></span><br><span class="line"><span class="comment">// 4. 并发消费</span></span><br><span class="line"><span class="comment">//    - 可配置 listener container 的并发消费者数量，提高消费吞吐量</span></span><br><span class="line"><span class="comment">// 5. 幂等性处理</span></span><br><span class="line"><span class="comment">//    - 消费端应保证幂等性，防止重复消费造成数据异常</span></span><br></pre></td></tr></table></figure><h2 id="实战业务案例"><a href="#实战业务案例" class="headerlink" title="实战业务案例"></a>实战业务案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景：电商订单异步处理</span></span><br><span class="line"><span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">order.setId(<span class="number">1001L</span>);</span><br><span class="line">order.setUserId(<span class="number">2002L</span>);</span><br><span class="line">order.setAmount(<span class="number">299.99</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者发送订单消息</span></span><br><span class="line">orderProducer.sendOrder(order);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者异步处理订单</span></span><br><span class="line"><span class="comment">// 1. 扣减库存</span></span><br><span class="line"><span class="comment">// 2. 更新支付状态</span></span><br><span class="line"><span class="comment">// 3. 记录日志</span></span><br><span class="line"><span class="comment">// 4. 发送通知</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line"><span class="comment">// 如果库存不足或数据库异常，消费者使用 basicNack 退回消息，等待重试或进入死信队列</span></span><br></pre></td></tr></table></figure><h2 id="注意事项与容易忽略点"><a href="#注意事项与容易忽略点" class="headerlink" title="注意事项与容易忽略点"></a>注意事项与容易忽略点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 消息重复消费：需保证业务幂等</span></span><br><span class="line"><span class="comment">// 2. 消费者异常：未手动 ack 的消息会重试，避免数据丢失</span></span><br><span class="line"><span class="comment">// 3. 队列持久化：确保 RabbitMQ 重启后消息不丢失</span></span><br><span class="line"><span class="comment">// 4. 消息大小限制：避免发送过大对象，可拆分或使用文件存储</span></span><br><span class="line"><span class="comment">// 5. 异步异常日志：务必捕获并记录，便于排查</span></span><br><span class="line"><span class="comment">// 6. 延迟队列：可结合 TTL + 死信队列实现订单延迟取消等场景</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RabbitMQ 与 Spring Boot 的结合，可以实现高并发异步处理</span></span><br><span class="line"><span class="comment">// 使用注解 @RabbitListener + RabbitTemplate 提供简洁 API</span></span><br><span class="line"><span class="comment">// 结合手动确认、死信队列、幂等性处理，可构建可靠、可扩展的消息队列系统</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> Spring AMQP </tag>
            
            <tag> 异步处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 与 Redis 缓存优化实战</title>
      <link href="/myblog/2020/06/18/Spring%20Boot%20%E4%B8%8E%20Redis%20%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/"/>
      <url>/myblog/2020/06/18/Spring%20Boot%20%E4%B8%8E%20Redis%20%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高并发系统中，数据库频繁查询会成为性能瓶颈。</span></span><br><span class="line"><span class="comment">// Redis 作为内存缓存，可大幅降低数据库压力。</span></span><br><span class="line"><span class="comment">// 深入理解缓存策略、Spring Cache 机制和 Redis 数据结构，有助于设计高性能、可扩展系统。</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Cache-与-Redis-集成"><a href="#Spring-Cache-与-Redis-集成" class="headerlink" title="Spring Cache 与 Redis 集成"></a>Spring Cache 与 Redis 集成</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring Boot 提供 @Cacheable、@CachePut、@CacheEvict 注解简化缓存操作</span></span><br><span class="line"><span class="comment">// 核心底层依赖 CacheManager，默认可配置 RedisCacheManager</span></span><br><span class="line"><span class="comment">// 缓存 key 生成策略可自定义，避免 key 冲突</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span>&#123;</span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">            .entryTtl(Duration.ofMinutes(<span class="number">30</span>))</span><br><span class="line">            .disableCachingNullValues();</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(RedisCacheWriter.nonLockingRedisCacheWriter(factory))</span><br><span class="line">                                .cacheDefaults(config)</span><br><span class="line">                                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存使用示例"><a href="#缓存使用示例" class="headerlink" title="缓存使用示例"></a>缓存使用示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductService</span><span class="params">(ProductMapper productMapper)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.productMapper = productMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;product&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProductById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CachePut(value = &quot;product&quot;, key = &quot;#product.id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">updateProduct</span><span class="params">(Product product)</span>&#123;</span><br><span class="line">        productMapper.update(product);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;product&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteProduct</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        productMapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存优化策略"><a href="#缓存优化策略" class="headerlink" title="缓存优化策略"></a>缓存优化策略</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 缓存穿透：查询不存在的数据导致请求直接打到数据库</span></span><br><span class="line"><span class="comment">//    - 使用布隆过滤器或缓存空对象</span></span><br><span class="line"><span class="comment">// 2. 缓存雪崩：大量缓存同时过期导致瞬时 DB 压力</span></span><br><span class="line"><span class="comment">//    - 通过随机过期时间，错峰失效</span></span><br><span class="line"><span class="comment">// 3. 缓存击穿：热点数据在过期瞬间大量请求打到 DB</span></span><br><span class="line"><span class="comment">//    - 使用互斥锁或逻辑过期+异步更新</span></span><br><span class="line"><span class="comment">// 4. 合理选择数据结构：String、Hash、List、Set，根据访问场景</span></span><br></pre></td></tr></table></figure><h2 id="实战业务示例"><a href="#实战业务示例" class="headerlink" title="实战业务示例"></a>实战业务示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderService</span><span class="params">(RedisTemplate&lt;String,Object&gt; redisTemplate, OrderMapper orderMapper)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.orderMapper = orderMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getOrderById</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;order:&quot;</span> + orderId;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span>(order != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            order = (Order) redisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">if</span>(order != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> order;</span><br><span class="line">            &#125;</span><br><span class="line">            order = orderMapper.selectById(orderId);</span><br><span class="line">            <span class="keyword">if</span>(order != <span class="literal">null</span>)&#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, order, Duration.ofMinutes(<span class="number">10</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, <span class="keyword">new</span> <span class="title class_">Order</span>(), Duration.ofMinutes(<span class="number">5</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度分析与注意事项"><a href="#深度分析与注意事项" class="headerlink" title="深度分析与注意事项"></a>深度分析与注意事项</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. @Cacheable 方法内部调用自身不会触发缓存逻辑</span></span><br><span class="line"><span class="comment">// 2. 缓存更新必须保证 DB 与缓存一致性，可使用 @Transactional + @CachePut</span></span><br><span class="line"><span class="comment">// 3. Redis key 命名规范，避免冲突，建议使用模块:实体:ID</span></span><br><span class="line"><span class="comment">// 4. 缓存空对象防止穿透，但要注意设置较短过期时间，避免占用过多内存</span></span><br><span class="line"><span class="comment">// 5. 避免在高并发场景下直接使用简单 synchronized，应使用 Redisson 分布式锁或 Lua 脚本</span></span><br><span class="line"><span class="comment">// 6. 异步更新缓存需保证异常捕获与日志记录，防止数据丢失</span></span><br></pre></td></tr></table></figure><h2 id="总结与业务场景说明"><a href="#总结与业务场景说明" class="headerlink" title="总结与业务场景说明"></a>总结与业务场景说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景1：查询商品信息</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.getProductById(<span class="number">1001L</span>);</span><br><span class="line"><span class="comment">// 解析：首次访问从数据库加载并缓存，下次直接从 Redis 返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景2：更新商品信息</span></span><br><span class="line">product.setPrice(<span class="number">199.99</span>);</span><br><span class="line">productService.updateProduct(product);</span><br><span class="line"><span class="comment">// 解析：使用 @CachePut 保证缓存同步更新，防止缓存脏数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景3：删除商品</span></span><br><span class="line">productService.deleteProduct(<span class="number">1001L</span>);</span><br><span class="line"><span class="comment">// 解析：使用 @CacheEvict 删除缓存，避免下次查询出现过期信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景4：订单查询高并发访问</span></span><br><span class="line"><span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getOrderById(<span class="number">5001L</span>);</span><br><span class="line"><span class="comment">// 解析：使用 synchronized + 缓存空对象防止缓存穿透，同时减少数据库压力</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结：结合 Spring Cache 注解与 Redis 低层 API，实现高并发下的缓存策略</span></span><br><span class="line"><span class="comment">// 避免缓存穿透、击穿、雪崩，并确保缓存与数据库一致性，提高系统吞吐量</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Redis </tag>
            
            <tag> 缓存策略 </tag>
            
            <tag> Spring Cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 与 MyBatis 高性能查询与分页优化</title>
      <link href="/myblog/2020/05/05/Spring%20Boot%20%E4%B8%8E%20MyBatis%20%E9%AB%98%E6%80%A7%E8%83%BD%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96/"/>
      <url>/myblog/2020/05/05/Spring%20Boot%20%E4%B8%8E%20MyBatis%20%E9%AB%98%E6%80%A7%E8%83%BD%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在电商和金融系统中，大数据量查询是性能瓶颈。</span></span><br><span class="line"><span class="comment">// 传统分页使用 limit/offset，对于大页码会导致全表扫描和性能下降。</span></span><br><span class="line"><span class="comment">// MyBatis 提供灵活的分页方式，结合 SQL 优化和索引设计，可显著提升查询效率。</span></span><br><span class="line"><span class="comment">// 本文深入分析分页插件、动态 SQL 和执行计划优化策略。</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis-分页插件原理"><a href="#MyBatis-分页插件原理" class="headerlink" title="MyBatis 分页插件原理"></a>MyBatis 分页插件原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用分页插件：PageHelper、MyBatis-Plus 分页</span></span><br><span class="line"><span class="comment">// PageHelper 原理：</span></span><br><span class="line"><span class="comment">// 1. 拦截 Executor.query 方法</span></span><br><span class="line"><span class="comment">// 2. 修改 SQL，添加 limit / offset 或 row_number() over()</span></span><br><span class="line"><span class="comment">// 3. 执行 count 查询统计总数</span></span><br><span class="line"><span class="comment">// 4. 返回分页结果封装 Page 对象</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// MyBatis-Plus 分页：通过 Page 对象参数注入 SQL，生成优化的分页 SQL</span></span><br></pre></td></tr></table></figure><h2 id="DTO-与-Mapper-示例"><a href="#DTO-与-Mapper-示例" class="headerlink" title="DTO 与 Mapper 示例"></a>DTO 与 Mapper 示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderQueryReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime startTime;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime endTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&#123;</span></span><br><span class="line"><span class="meta">        &quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;SELECT * FROM orders&quot;,</span></span><br><span class="line"><span class="meta">        &quot;WHERE 1=1&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;userId != null&#x27;&gt; AND user_id = #&#123;userId&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;status != null&#x27;&gt; AND status = #&#123;status&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;startTime != null&#x27;&gt; AND create_time &amp;gt;= #&#123;startTime&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;endTime != null&#x27;&gt; AND create_time &amp;lt;= #&#123;endTime&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;ORDER BY create_time DESC&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;/script&gt;&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;Order&gt; <span class="title function_">selectOrders</span><span class="params">(OrderQueryReq req)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分页服务实现"><a href="#分页服务实现" class="headerlink" title="分页服务实现"></a>分页服务实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderService</span><span class="params">(OrderMapper orderMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderMapper = orderMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Order&gt; <span class="title function_">queryOrders</span><span class="params">(OrderQueryReq req, <span class="type">int</span> pageNum, <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        <span class="comment">// PageHelper.startPage 必须在执行查询前调用</span></span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        List&lt;Order&gt; orders = orderMapper.selectOrders(req);</span><br><span class="line">        <span class="comment">// PageInfo 提供总数、页数、当前页、每页大小等信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(orders);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SQL-执行与性能分析"><a href="#SQL-执行与性能分析" class="headerlink" title="SQL 执行与性能分析"></a>SQL 执行与性能分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 EXPLAIN 分析 SQL 执行计划</span></span><br><span class="line"><span class="comment">// 注意索引覆盖范围：user_id、status、create_time 建复合索引</span></span><br><span class="line"><span class="comment">// 避免在 WHERE 中对字段使用函数，否则索引失效</span></span><br><span class="line"><span class="comment">// 大数据量分页时，使用 keyset 分页（seek 方法）比 offset 更高效</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例：keyset 分页</span></span><br><span class="line">SELECT * FROM orders</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">user_id</span> <span class="operator">=</span> <span class="number">1001</span> AND create_time &amp;lt; <span class="string">&#x27;2020-05-01 00:00:00&#x27;</span></span><br><span class="line">ORDER BY create_time DESC</span><br><span class="line">LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h2 id="分页优化与注意事项"><a href="#分页优化与注意事项" class="headerlink" title="分页优化与注意事项"></a>分页优化与注意事项</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 避免大页码 offset 查询，建议使用 keyset 分页</span></span><br><span class="line"><span class="comment">// 2. SQL 动态拼接时注意 &lt;if&gt; 标签的逻辑，防止拼接错误或 SQL 注入</span></span><br><span class="line"><span class="comment">// 3. count 查询可能耗时，可缓存总数或异步统计</span></span><br><span class="line"><span class="comment">// 4. 数据库索引需覆盖查询字段，减少回表操作</span></span><br><span class="line"><span class="comment">// 5. MyBatis 映射结果集字段与 DTO 对象类型匹配，避免类型转换异常</span></span><br><span class="line"><span class="comment">// 6. 分页插件必须在查询前调用，避免影响结果</span></span><br></pre></td></tr></table></figure><h2 id="业务实战示例"><a href="#业务实战示例" class="headerlink" title="业务实战示例"></a>业务实战示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/orders&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderController</span><span class="params">(OrderService orderService)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Order&gt; <span class="title function_">listOrders</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> Long userId,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@RequestParam(required = false)</span> String status,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> <span class="type">int</span> pageNum,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@RequestParam(defaultValue = &quot;20&quot;)</span> <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        <span class="type">OrderQueryReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderQueryReq</span>();</span><br><span class="line">        req.setUserId(userId);</span><br><span class="line">        req.setStatus(status);</span><br><span class="line">        <span class="keyword">return</span> orderService.queryOrders(req, pageNum, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyBatis 分页插件结合动态 SQL 可实现灵活查询和分页</span></span><br><span class="line"><span class="comment">// 性能优化点包括索引设计、避免大页 offset、keyset 分页、缓存 count</span></span><br><span class="line"><span class="comment">// 通过分析 SQL 执行计划、优化 WHERE 条件、合理使用分页插件，能显著提升大数据量查询性能</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> MyBatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> 性能调优 </tag>
            
            <tag> 分页查询 </tag>
            
            <tag> SQL优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 异步任务与调度深度解析</title>
      <link href="/myblog/2020/04/12/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%B8%8E%E8%B0%83%E5%BA%A6%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
      <url>/myblog/2020/04/12/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%B8%8E%E8%B0%83%E5%BA%A6%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 金融、电商等系统中高并发场景下，主业务线程阻塞会严重影响吞吐量。</span></span><br><span class="line"><span class="comment">// 异步任务可将耗时操作脱离主线程执行，@Scheduled 定时任务可处理周期性作业。</span></span><br><span class="line"><span class="comment">// 深入理解底层实现，有助于排查性能问题、异常丢失或任务阻塞问题。</span></span><br></pre></td></tr></table></figure><h2 id="异步任务底层原理"><a href="#异步任务底层原理" class="headerlink" title="异步任务底层原理"></a>异步任务底层原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring @Async 的核心依赖 AOP 代理机制</span></span><br><span class="line"><span class="comment">// 1. Spring 启动时，扫描 @Async 注解方法</span></span><br><span class="line"><span class="comment">// 2. 创建 AsyncAnnotationBeanPostProcessor，生成代理对象</span></span><br><span class="line"><span class="comment">// 3. 外部调用异步方法时，调用经过代理的 invoke 方法</span></span><br><span class="line"><span class="comment">// 4. 代理提交任务到 ThreadPoolTaskExecutor 执行</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 内部调用方法不会触发异步，因为不会经过代理对象。</span></span><br><span class="line"><span class="comment">// CompletableFuture 作为返回值，可支持链式调用和异常捕获</span></span><br></pre></td></tr></table></figure><h2 id="异步任务示例"><a href="#异步任务示例" class="headerlink" title="异步任务示例"></a>异步任务示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;async-thread-&quot;</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotificationService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">sendEmail</span><span class="params">(String email, String content)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>); <span class="comment">// 模拟耗时操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;&#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email sent to &quot;</span> + email + <span class="string">&quot; on thread &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">sendSms</span><span class="params">(String phone, String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS sent to &quot;</span> + phone + <span class="string">&quot; on thread &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务底层机制"><a href="#定时任务底层机制" class="headerlink" title="定时任务底层机制"></a>定时任务底层机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring @Scheduled 依赖 ScheduledAnnotationBeanPostProcessor 和 TaskScheduler</span></span><br><span class="line"><span class="comment">// 1. 启动时扫描 @Scheduled 方法，注册到 ScheduledTaskRegistrar</span></span><br><span class="line"><span class="comment">// 2. 内部默认使用 ConcurrentTaskScheduler，单线程执行</span></span><br><span class="line"><span class="comment">// 3. 可通过配置 ThreadPoolTaskScheduler 支持多线程调度</span></span><br><span class="line"><span class="comment">// 4. cron/fixedDelay/fixedRate 调度模式不同，影响执行时机和线程复用</span></span><br></pre></td></tr></table></figure><h2 id="定时任务示例"><a href="#定时任务示例" class="headerlink" title="定时任务示例"></a>定时任务示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulingConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TaskScheduler <span class="title function_">taskScheduler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskScheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">        scheduler.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        scheduler.setThreadNamePrefix(<span class="string">&quot;schedule-thread-&quot;</span>);</span><br><span class="line">        scheduler.initialize();</span><br><span class="line">        <span class="keyword">return</span> scheduler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReportScheduler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 2 * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateDailyReport</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Generating daily report on thread &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 60000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkPendingNotifications</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Checking pending notifications on thread &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步与定时任务结合实战"><a href="#异步与定时任务结合实战" class="headerlink" title="异步与定时任务结合实战"></a>异步与定时任务结合实战</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NotificationService notificationService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderService</span><span class="params">(NotificationService notificationService)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.notificationService = notificationService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Order order)</span>&#123;</span><br><span class="line">        <span class="comment">// 异步发送邮件</span></span><br><span class="line">        notificationService.sendEmail(order.getUserEmail(), <span class="string">&quot;订单已支付&quot;</span>)</span><br><span class="line">            .thenRun(() -&gt; System.out.println(<span class="string">&quot;Email confirmation logged for order &quot;</span> + order.getId()))</span><br><span class="line">            .exceptionally(ex -&gt; &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;Email sending failed: &quot;</span> + ex.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步发送短信</span></span><br><span class="line">        notificationService.sendSms(order.getUserPhone(), <span class="string">&quot;订单已支付&quot;</span>)</span><br><span class="line">            .exceptionally(ex -&gt; &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;SMS sending failed: &quot;</span> + ex.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度分析与注意事项"><a href="#深度分析与注意事项" class="headerlink" title="深度分析与注意事项"></a>深度分析与注意事项</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 异步方法必须被外部调用，否则不会触发 AOP 代理，内部调用可使用 AopContext.currentProxy()</span></span><br><span class="line"><span class="comment">// 2. ThreadPoolTaskExecutor 配置不当会导致队列阻塞，影响异步吞吐量</span></span><br><span class="line"><span class="comment">// 3. 异常未捕获的异步任务，可能不会被日志记录，建议使用 CompletableFuture.exceptionally 或 AsyncUncaughtExceptionHandler</span></span><br><span class="line"><span class="comment">// 4. @Scheduled 单线程调度可能阻塞，任务耗时大时需使用多线程 TaskScheduler</span></span><br><span class="line"><span class="comment">// 5. cron 表达式易错，注意时区和秒位设置</span></span><br><span class="line"><span class="comment">// 6. 避免在异步方法中直接操作共享资源，需加锁或使用并发容器</span></span><br><span class="line"><span class="comment">// 7. 线程池监控：定期检查线程池活跃线程数、队列大小、拒绝策略</span></span><br></pre></td></tr></table></figure><h2 id="实际业务场景应用案例"><a href="#实际业务场景应用案例" class="headerlink" title="实际业务场景应用案例"></a>实际业务场景应用案例</h2><h3 id="1-金融风控系统"><a href="#1-金融风控系统" class="headerlink" title="1. 金融风控系统"></a>1. 金融风控系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RiskControlService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserCreditService creditService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionAnalysisService analysisService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NotificationService notificationService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RiskControlService</span><span class="params">(UserCreditService creditService, </span></span><br><span class="line"><span class="params">                             TransactionAnalysisService analysisService,</span></span><br><span class="line"><span class="params">                             NotificationService notificationService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.creditService = creditService;</span><br><span class="line">        <span class="built_in">this</span>.analysisService = analysisService;</span><br><span class="line">        <span class="built_in">this</span>.notificationService = notificationService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交易风控检查 - 使用CompletableFuture并行处理多项检查</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;RiskResult&gt; <span class="title function_">checkTransactionRisk</span><span class="params">(Transaction transaction)</span> &#123;</span><br><span class="line">        <span class="comment">// 并行执行多个风控检查</span></span><br><span class="line">        CompletableFuture&lt;CreditScore&gt; creditCheck = </span><br><span class="line">            creditService.checkUserCredit(transaction.getUserId());</span><br><span class="line">            </span><br><span class="line">        CompletableFuture&lt;FraudScore&gt; fraudCheck = </span><br><span class="line">            analysisService.analyzeFraudPossibility(transaction);</span><br><span class="line">            </span><br><span class="line">        CompletableFuture&lt;GeoRiskLevel&gt; locationCheck = </span><br><span class="line">            analysisService.checkGeographicRisk(transaction.getIpAddress());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 组合多个异步结果，只有当所有检查都完成时才返回最终结果</span></span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.allOf(creditCheck, fraudCheck, locationCheck)</span><br><span class="line">            .thenApply(v -&gt; &#123;</span><br><span class="line">                <span class="comment">// 根据多项检查结果综合评估风险</span></span><br><span class="line">                <span class="type">RiskResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RiskResult</span>();</span><br><span class="line">                result.setCreditScore(creditCheck.join());</span><br><span class="line">                result.setFraudScore(fraudCheck.join());</span><br><span class="line">                result.setGeoRisk(locationCheck.join());</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 计算综合风险分数</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">totalRiskScore</span> <span class="operator">=</span> calculateTotalRiskScore(result);</span><br><span class="line">                result.setTotalScore(totalRiskScore);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 高风险交易触发异步通知</span></span><br><span class="line">                <span class="keyword">if</span> (totalRiskScore &gt; <span class="number">80</span>) &#123;</span><br><span class="line">                    notificationService.alertRiskTeam(</span><br><span class="line">                        <span class="string">&quot;高风险交易检测：&quot;</span> + transaction.getId(), </span><br><span class="line">                        buildRiskReport(transaction, result)</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;)</span><br><span class="line">            .exceptionally(ex -&gt; &#123;</span><br><span class="line">                <span class="comment">// 风控检查异常处理</span></span><br><span class="line">                log.error(<span class="string">&quot;风控检查异常: &quot;</span> + ex.getMessage(), ex);</span><br><span class="line">                <span class="keyword">return</span> RiskResult.createFailedResult(ex.getMessage());</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculateTotalRiskScore</span><span class="params">(RiskResult result)</span> &#123;</span><br><span class="line">        <span class="comment">// 风险评分算法实现</span></span><br><span class="line">        <span class="keyword">return</span> (result.getCreditScore().getScore() * <span class="number">0.4</span> + </span><br><span class="line">                result.getFraudScore().getScore() * <span class="number">0.4</span> + </span><br><span class="line">                result.getGeoRisk().getScore() * <span class="number">0.2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">buildRiskReport</span><span class="params">(Transaction transaction, RiskResult result)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建风险报告</span></span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;交易ID: %s, 用户: %s, 金额: %.2f, 风险分: %d&quot;</span>, </span><br><span class="line">                            transaction.getId(), </span><br><span class="line">                            transaction.getUserId(),</span><br><span class="line">                            transaction.getAmount(),</span><br><span class="line">                            result.getTotalScore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-电商秒杀系统"><a href="#2-电商秒杀系统" class="headerlink" title="2. 电商秒杀系统"></a>2. 电商秒杀系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlashSaleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProductInventoryService inventoryService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheService cacheService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FlashSaleService</span><span class="params">(ProductInventoryService inventoryService,</span></span><br><span class="line"><span class="params">                           OrderService orderService,</span></span><br><span class="line"><span class="params">                           CacheService cacheService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.inventoryService = inventoryService;</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">        <span class="built_in">this</span>.cacheService = cacheService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 秒杀商品预热 - 定时任务</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 55 9 * * ?&quot;)</span> <span class="comment">// 每天9:55执行，为10点秒杀做准备</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preloadFlashSaleProducts</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始预热秒杀商品数据...&quot;</span>);</span><br><span class="line">        List&lt;FlashSaleProduct&gt; products = inventoryService.getTodayFlashSaleProducts();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 并行加载商品到缓存</span></span><br><span class="line">        products.parallelStream().forEach(product -&gt; &#123;</span><br><span class="line">            <span class="comment">// 将库存数据预加载到Redis</span></span><br><span class="line">            cacheService.setProductStock(product.getId(), product.getAvailableStock());</span><br><span class="line">            <span class="comment">// 预生成商品页面静态化文件</span></span><br><span class="line">            cacheService.generateProductDetailHtml(product);</span><br><span class="line">            log.info(<span class="string">&quot;商品预热完成: &#123;&#125;&quot;</span>, product.getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异步处理秒杀请求</span></span><br><span class="line">    <span class="meta">@Async(&quot;flashSaleExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;OrderResult&gt; <span class="title function_">processFlashSaleOrder</span><span class="params">(Long userId, Long productId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">&quot;flashsale:lock:&quot;</span> + productId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试获取分布式锁</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">locked</span> <span class="operator">=</span> cacheService.tryLock(lockKey, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (!locked) &#123;</span><br><span class="line">                <span class="keyword">return</span> CompletableFuture.completedFuture(</span><br><span class="line">                    OrderResult.failed(<span class="string">&quot;系统繁忙，请稍后再试&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查库存</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">remainStock</span> <span class="operator">=</span> cacheService.decrementStock(productId);</span><br><span class="line">            <span class="keyword">if</span> (remainStock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 库存不足</span></span><br><span class="line">                cacheService.incrementStock(productId); <span class="comment">// 恢复库存</span></span><br><span class="line">                <span class="keyword">return</span> CompletableFuture.completedFuture(</span><br><span class="line">                    OrderResult.failed(<span class="string">&quot;商品已售罄&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 异步创建订单</span></span><br><span class="line">            <span class="keyword">return</span> orderService.createFlashSaleOrder(userId, productId)</span><br><span class="line">                .thenApply(order -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 发送订单确认消息</span></span><br><span class="line">                    orderService.sendOrderConfirmation(order);</span><br><span class="line">                    <span class="keyword">return</span> OrderResult.success(order);</span><br><span class="line">                &#125;)</span><br><span class="line">                .exceptionally(ex -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 下单失败，恢复库存</span></span><br><span class="line">                    log.error(<span class="string">&quot;创建秒杀订单异常: &#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line">                    cacheService.incrementStock(productId);</span><br><span class="line">                    <span class="keyword">return</span> OrderResult.failed(<span class="string">&quot;创建订单失败: &quot;</span> + ex.getMessage());</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放分布式锁</span></span><br><span class="line">            cacheService.releaseLock(lockKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 秒杀专用线程池配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlashSaleConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(&quot;flashSaleExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">flashSaleExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">20</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">200</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">500</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;flashsale-&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置拒绝策略 - 使用CallerRunsPolicy防止系统崩溃</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-大数据批处理系统"><a href="#3-大数据批处理系统" class="headerlink" title="3. 大数据批处理系统"></a>3. 大数据批处理系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataProcessingService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataRepository dataRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AnalyticsService analyticsService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataProcessingService</span><span class="params">(DataRepository dataRepository, </span></span><br><span class="line"><span class="params">                                AnalyticsService analyticsService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataRepository = dataRepository;</span><br><span class="line">        <span class="built_in">this</span>.analyticsService = analyticsService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每天凌晨2点执行数据聚合任务</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 2 * * ?&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aggregateDailyData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">yesterday</span> <span class="operator">=</span> LocalDate.now().minusDays(<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;开始处理&#123;&#125;的数据聚合任务&quot;</span>, yesterday);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分页处理大量数据，避免OOM</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasMore</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (hasMore) &#123;</span><br><span class="line">            <span class="comment">// 分页获取数据</span></span><br><span class="line">            Page&lt;RawData&gt; dataPage = dataRepository.findByDate(</span><br><span class="line">                yesterday, PageRequest.of(page, pageSize));</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> (dataPage.isEmpty()) &#123;</span><br><span class="line">                hasMore = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将数据分成多个批次并行处理</span></span><br><span class="line">            List&lt;List&lt;RawData&gt;&gt; batches = splitIntoBatches(dataPage.getContent(), <span class="number">100</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用CompletableFuture并行处理多个批次</span></span><br><span class="line">            List&lt;CompletableFuture&lt;Void&gt;&gt; futures = batches.stream()</span><br><span class="line">                .map(batch -&gt; CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        analyticsService.processDataBatch(batch, yesterday);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;批处理数据异常: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">                        <span class="comment">// 记录失败的批次，以便后续重试</span></span><br><span class="line">                        recordFailedBatch(batch, yesterday, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, asyncTaskExecutor()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 等待所有批次处理完成</span></span><br><span class="line">            CompletableFuture.allOf(futures.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">0</span>])).join();</span><br><span class="line">            </span><br><span class="line">            page++;</span><br><span class="line">            hasMore = dataPage.hasNext();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 所有数据处理完成后，生成汇总报告</span></span><br><span class="line">        analyticsService.generateDailySummaryReport(yesterday)</span><br><span class="line">            .thenAccept(report -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">&quot;&#123;&#125;数据聚合完成，共处理&#123;&#125;条记录&quot;</span>, </span><br><span class="line">                        yesterday, report.getTotalProcessed());</span><br><span class="line">                <span class="comment">// 发送报告给相关团队</span></span><br><span class="line">                emailService.sendReportEmail(report);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理失败批次的重试任务 - 每小时检查一次</span></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 3600000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">retryFailedBatches</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;FailedBatch&gt; failedBatches = dataRepository.findFailedBatches(</span><br><span class="line">            LocalDateTime.now().minusDays(<span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (failedBatches.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;开始重试&#123;&#125;个失败的数据批次&quot;</span>, failedBatches.size());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (FailedBatch batch : failedBatches) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                analyticsService.processDataBatch(batch.getData(), batch.getDate());</span><br><span class="line">                <span class="comment">// 处理成功，更新状态</span></span><br><span class="line">                dataRepository.markBatchAsProcessed(batch.getId());</span><br><span class="line">                log.info(<span class="string">&quot;批次&#123;&#125;重试成功&quot;</span>, batch.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;批次&#123;&#125;第&#123;&#125;次重试失败: &#123;&#125;&quot;</span>, </span><br><span class="line">                         batch.getId(), batch.getRetryCount() + <span class="number">1</span>, e.getMessage());</span><br><span class="line">                <span class="comment">// 更新重试次数和最后失败时间</span></span><br><span class="line">                dataRepository.updateBatchRetryInfo(batch.getId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;RawData&gt;&gt; <span class="title function_">splitIntoBatches</span><span class="params">(List&lt;RawData&gt; data, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">        <span class="comment">// 将数据分割成多个小批次</span></span><br><span class="line">        List&lt;List&lt;RawData&gt;&gt; batches = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.size(); i += batchSize) &#123;</span><br><span class="line">            batches.add(data.subList(i, Math.min(i + batchSize, data.size())));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> batches;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recordFailedBatch</span><span class="params">(List&lt;RawData&gt; batch, LocalDate date, Exception e)</span> &#123;</span><br><span class="line">        <span class="type">FailedBatch</span> <span class="variable">failedBatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FailedBatch</span>();</span><br><span class="line">        failedBatch.setData(batch);</span><br><span class="line">        failedBatch.setDate(date);</span><br><span class="line">        failedBatch.setErrorMessage(e.getMessage());</span><br><span class="line">        failedBatch.setRetryCount(<span class="number">0</span>);</span><br><span class="line">        failedBatch.setLastFailedTime(LocalDateTime.now());</span><br><span class="line">        dataRepository.saveFailedBatch(failedBatch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池监控与动态调整"><a href="#线程池监控与动态调整" class="headerlink" title="线程池监控与动态调整"></a>线程池监控与动态调整</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolMonitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ThreadPoolTaskExecutor&gt; executors;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MetricsService metricsService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPoolMonitor</span><span class="params">(ApplicationContext context, MetricsService metricsService)</span> &#123;</span><br><span class="line">        <span class="comment">// 收集所有ThreadPoolTaskExecutor类型的Bean</span></span><br><span class="line">        <span class="built_in">this</span>.executors = context.getBeansOfType(ThreadPoolTaskExecutor.class);</span><br><span class="line">        <span class="built_in">this</span>.metricsService = metricsService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每30秒收集一次线程池指标</span></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 30000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">monitorThreadPools</span><span class="params">()</span> &#123;</span><br><span class="line">        executors.forEach((name, executor) -&gt; &#123;</span><br><span class="line">            <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> executor.getThreadPoolExecutor();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 收集关键指标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">activeCount</span> <span class="operator">=</span> threadPool.getActiveCount();</span><br><span class="line">            <span class="type">int</span> <span class="variable">poolSize</span> <span class="operator">=</span> threadPool.getPoolSize();</span><br><span class="line">            <span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> threadPool.getCorePoolSize();</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxPoolSize</span> <span class="operator">=</span> threadPool.getMaxPoolSize();</span><br><span class="line">            <span class="type">int</span> <span class="variable">queueSize</span> <span class="operator">=</span> threadPool.getQueue().size();</span><br><span class="line">            <span class="type">int</span> <span class="variable">queueRemainingCapacity</span> <span class="operator">=</span> threadPool.getQueue().remainingCapacity();</span><br><span class="line">            <span class="type">long</span> <span class="variable">completedTaskCount</span> <span class="operator">=</span> threadPool.getCompletedTaskCount();</span><br><span class="line">            <span class="type">long</span> <span class="variable">taskCount</span> <span class="operator">=</span> threadPool.getTaskCount();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 计算线程池利用率和队列使用率</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">threadUtilization</span> <span class="operator">=</span> poolSize &gt; <span class="number">0</span> ? (<span class="type">double</span>) activeCount / poolSize : <span class="number">0</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">queueUtilization</span> <span class="operator">=</span> (<span class="type">double</span>) queueSize / (queueSize + queueRemainingCapacity);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 记录指标到监控系统</span></span><br><span class="line">            metricsService.recordThreadPoolMetrics(name, activeCount, poolSize, </span><br><span class="line">                                                 corePoolSize, maxPoolSize, </span><br><span class="line">                                                 queueSize, queueRemainingCapacity,</span><br><span class="line">                                                 completedTaskCount, taskCount,</span><br><span class="line">                                                 threadUtilization, queueUtilization);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 日志记录关键指标</span></span><br><span class="line">            <span class="keyword">if</span> (threadUtilization &gt; <span class="number">0.8</span> || queueUtilization &gt; <span class="number">0.7</span>) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;线程池 &#x27;&#123;&#125;&#x27; 负载较高: 活跃线程 &#123;&#125;/&#123;&#125;, 队列使用 &#123;&#125;/&#123;&#125;&quot;</span>, </span><br><span class="line">                         name, activeCount, poolSize, queueSize, </span><br><span class="line">                         (queueSize + queueRemainingCapacity));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 动态调整线程池参数</span></span><br><span class="line">            adjustThreadPoolIfNeeded(name, executor, threadUtilization, queueUtilization);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">adjustThreadPoolIfNeeded</span><span class="params">(String poolName, ThreadPoolTaskExecutor executor, </span></span><br><span class="line"><span class="params">                                         <span class="type">double</span> threadUtilization, <span class="type">double</span> queueUtilization)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> executor.getThreadPoolExecutor();</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentMaxSize</span> <span class="operator">=</span> threadPool.getMaxPoolSize();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 高负载情况 - 考虑扩容</span></span><br><span class="line">        <span class="keyword">if</span> (threadUtilization &gt; <span class="number">0.85</span> &amp;&amp; queueUtilization &gt; <span class="number">0.6</span>) &#123;</span><br><span class="line">            <span class="comment">// 确保不超过系统配置的最大值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">systemMaxThreads</span> <span class="operator">=</span> getSystemMaxThreadsConfig(poolName);</span><br><span class="line">            <span class="keyword">if</span> (currentMaxSize &lt; systemMaxThreads) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">newMaxSize</span> <span class="operator">=</span> Math.min(currentMaxSize + <span class="number">5</span>, systemMaxThreads);</span><br><span class="line">                executor.setMaxPoolSize(newMaxSize);</span><br><span class="line">                log.info(<span class="string">&quot;动态扩容线程池 &#x27;&#123;&#125;&#x27;: &#123;&#125; -&gt; &#123;&#125;&quot;</span>, poolName, currentMaxSize, newMaxSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 低负载情况 - 考虑缩容</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (threadUtilization &lt; <span class="number">0.2</span> &amp;&amp; queueUtilization &lt; <span class="number">0.2</span> &amp;&amp; </span><br><span class="line">                 threadPool.getPoolSize() &gt; threadPool.getCorePoolSize()) &#123;</span><br><span class="line">            <span class="comment">// 允许线程自然回收到核心线程数</span></span><br><span class="line">            <span class="comment">// 注意：这里不主动设置maxPoolSize，而是依赖线程池的自动回收机制</span></span><br><span class="line">            log.info(<span class="string">&quot;线程池 &#x27;&#123;&#125;&#x27; 负载较低，允许自然缩容到核心线程数 &#123;&#125;&quot;</span>, </span><br><span class="line">                     poolName, threadPool.getCorePoolSize());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getSystemMaxThreadsConfig</span><span class="params">(String poolName)</span> &#123;</span><br><span class="line">        <span class="comment">// 从配置中心或系统属性获取最大线程数配置</span></span><br><span class="line">        <span class="comment">// 这里简化处理，实际应用中可能从配置中心动态获取</span></span><br><span class="line">        Map&lt;String, Integer&gt; maxThreadsConfig = Map.of(</span><br><span class="line">            <span class="string">&quot;asyncExecutor&quot;</span>, <span class="number">100</span>,</span><br><span class="line">            <span class="string">&quot;scheduledExecutor&quot;</span>, <span class="number">50</span>,</span><br><span class="line">            <span class="string">&quot;flashSaleExecutor&quot;</span>, <span class="number">300</span></span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxThreadsConfig.getOrDefault(poolName, <span class="number">50</span>); <span class="comment">// 默认最大50线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步任务与事务处理"><a href="#异步任务与事务处理" class="headerlink" title="异步任务与事务处理"></a>异步任务与事务处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionalAsyncService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionTemplate transactionTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransactionalAsyncService</span><span class="params">(JdbcTemplate jdbcTemplate,</span></span><br><span class="line"><span class="params">                                    PlatformTransactionManager transactionManager,</span></span><br><span class="line"><span class="params">                                    ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">        <span class="built_in">this</span>.transactionTemplate = <span class="keyword">new</span> <span class="title class_">TransactionTemplate</span>(transactionManager);</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 主方法 - 在事务中调用异步方法</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processUserRegistration</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 保存用户数据 - 在当前事务中</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;INSERT INTO users (username, email) VALUES (?, ?)&quot;</span>,</span><br><span class="line">                           user.getUsername(), user.getEmail());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 获取自己的代理对象，确保异步方法通过代理调用</span></span><br><span class="line">        <span class="type">TransactionalAsyncService</span> <span class="variable">self</span> <span class="operator">=</span> applicationContext.getBean(TransactionalAsyncService.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 通过代理对象调用异步方法 - 注意这里的异步方法会在当前事务提交后执行</span></span><br><span class="line">        self.sendWelcomeEmailAsync(user);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 记录注册日志 - 仍在当前事务中</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;INSERT INTO user_logs (user_id, action) VALUES (?, ?)&quot;</span>,</span><br><span class="line">                           user.getId(), <span class="string">&quot;REGISTERED&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异步方法 - 使用REQUIRES_NEW确保在新事务中执行</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">sendWelcomeEmailAsync</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟发送欢迎邮件</span></span><br><span class="line">            log.info(<span class="string">&quot;发送欢迎邮件给用户: &#123;&#125;&quot;</span>, user.getEmail());</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 在新事务中记录邮件发送记录</span></span><br><span class="line">            jdbcTemplate.update(</span><br><span class="line">                <span class="string">&quot;INSERT INTO email_logs (user_id, email_type, status) VALUES (?, ?, ?)&quot;</span>,</span><br><span class="line">                user.getId(), <span class="string">&quot;WELCOME&quot;</span>, <span class="string">&quot;SENT&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">return</span> CompletableFuture.completedFuture(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 记录失败日志 - 在当前新事务中</span></span><br><span class="line">            jdbcTemplate.update(</span><br><span class="line">                <span class="string">&quot;INSERT INTO email_logs (user_id, email_type, status, error) VALUES (?, ?, ?, ?)&quot;</span>,</span><br><span class="line">                user.getId(), <span class="string">&quot;WELCOME&quot;</span>, <span class="string">&quot;FAILED&quot;</span>, e.getMessage());</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">return</span> CompletableFuture.failedFuture(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用编程式事务的异步方法 - 更灵活的事务控制</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;Boolean&gt; <span class="title function_">processUserDataAsync</span><span class="params">(UserData userData)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 使用编程式事务</span></span><br><span class="line">            <span class="keyword">return</span> transactionTemplate.execute(status -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 在事务中执行多个数据库操作</span></span><br><span class="line">                    jdbcTemplate.update(<span class="string">&quot;UPDATE user_profiles SET ... WHERE user_id = ?&quot;</span>, </span><br><span class="line">                                      userData.getUserId());</span><br><span class="line">                                      </span><br><span class="line">                    jdbcTemplate.update(<span class="string">&quot;INSERT INTO user_activities (...) VALUES (...)&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 模拟调用外部API</span></span><br><span class="line">                    callExternalApi(userData);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 事务成功提交</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// 手动回滚事务</span></span><br><span class="line">                    status.setRollbackOnly();</span><br><span class="line">                    log.error(<span class="string">&quot;处理用户数据异常: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 事务回滚</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">callExternalApi</span><span class="params">(UserData userData)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟调用外部API的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring Boot 异步任务与定时任务机制深入分析</span></span><br><span class="line"><span class="comment">// 异步任务基于 AOP 代理 + 线程池，返回 CompletableFuture 可链式操作</span></span><br><span class="line"><span class="comment">// 定时任务通过 ScheduledTaskRegistrar + TaskScheduler 执行，可支持多线程并发调度</span></span><br><span class="line"><span class="comment">// 注意线程池配置、异步边界、异常捕获与日志记录，才能保证高并发任务的稳定性</span></span><br><span class="line"><span class="comment">// 业务实战中结合异步 + 定时任务，可实现高性能通知、报表生成、批量统计等操作</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 实际业务场景应用：</span></span><br><span class="line"><span class="comment">// 1. 金融风控系统：并行风控检查，提高交易验证速度</span></span><br><span class="line"><span class="comment">// 2. 电商秒杀：商品预热与异步下单，提升系统承载能力</span></span><br><span class="line"><span class="comment">// 3. 大数据处理：分批并行处理，定时聚合与失败重试机制</span></span><br><span class="line"><span class="comment">// 4. 线程池监控：实时监控线程池状态，动态调整参数</span></span><br><span class="line"><span class="comment">// 5. 异步事务处理：确保事务边界清晰，避免事务传播问题</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步任务 </tag>
            
            <tag> Scheduled </tag>
            
            <tag> CompletableFuture </tag>
            
            <tag> 技术解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis SQL 映射与动态 SQL 技巧</title>
      <link href="/myblog/2020/03/05/MyBatis%20SQL%20%E6%98%A0%E5%B0%84%E4%B8%8E%E5%8A%A8%E6%80%81%20SQL%20%E6%8A%80%E5%B7%A7/"/>
      <url>/myblog/2020/03/05/MyBatis%20SQL%20%E6%98%A0%E5%B0%84%E4%B8%8E%E5%8A%A8%E6%80%81%20SQL%20%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在业务系统中，用户管理、订单管理等模块常需要动态条件查询。</span></span><br><span class="line"><span class="comment">// 如果直接手写 SQL 拼接，容易出错且维护成本高。</span></span><br><span class="line"><span class="comment">// MyBatis 提供 XML 映射和注解方式，以及强大的动态 SQL 支持，能够将条件灵活组合，保证安全性。</span></span><br></pre></td></tr></table></figure><h2 id="动态-SQL-实战示例"><a href="#动态-SQL-实战示例" class="headerlink" title="动态 SQL 实战示例"></a>动态 SQL 实战示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态条件查询</span></span><br><span class="line">    <span class="meta">@Select(&#123;</span></span><br><span class="line"><span class="meta">        &quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;SELECT id, name, phone, status FROM customer&quot;,</span></span><br><span class="line"><span class="meta">        &quot;WHERE 1=1&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;name != null and name != \&quot;\&quot;&#x27;&gt; AND name LIKE CONCAT(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;phone != null and phone != \&quot;\&quot;&#x27;&gt; AND phone = #&#123;phone&#125;&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;status != null&#x27;&gt; AND status = #&#123;status&#125;&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;createdAfter != null&#x27;&gt; AND created_at &amp;gt;= #&#123;createdAfter&#125;&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;createdBefore != null&#x27;&gt; AND created_at &amp;lt;= #&#123;createdBefore&#125;&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;choose&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;  &lt;when test=&#x27;sortBy == \&quot;name\&quot;&#x27;&gt; ORDER BY name ASC &lt;/when&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;  &lt;otherwise&gt; ORDER BY created_at DESC &lt;/otherwise&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;/choose&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;/script&gt;&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;Customer&gt; <span class="title function_">queryCustomers</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Param(&quot;phone&quot;)</span> String phone,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Param(&quot;status&quot;)</span> Integer status,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Param(&quot;createdAfter&quot;)</span> LocalDateTime createdAfter,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Param(&quot;createdBefore&quot;)</span> LocalDateTime createdBefore,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Param(&quot;sortBy&quot;)</span> String sortBy)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. &lt;script&gt; 标签：开启动态 SQL，避免 XML 报错</span></span><br><span class="line"><span class="comment">// 2. &lt;if test=&quot;...&quot;&gt;：条件判断，支持空值检查和字符串非空</span></span><br><span class="line"><span class="comment">// 3. &lt;choose&gt;/&lt;when&gt;/&lt;otherwise&gt;：条件分支，类似 Java if/else</span></span><br><span class="line"><span class="comment">// 4. 参数绑定 #&#123;param&#125;：防止 SQL 注入</span></span><br><span class="line"><span class="comment">// 5. CONCAT(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)：实现模糊查询</span></span><br><span class="line"><span class="comment">// 6. 动态排序与日期范围条件：可灵活组合业务查询需求</span></span><br></pre></td></tr></table></figure><h2 id="业务实战案例"><a href="#业务实战案例" class="headerlink" title="业务实战案例"></a>业务实战案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerService</span><span class="params">(CustomerMapper mapper)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.mapper = mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Customer&gt; <span class="title function_">searchCustomers</span><span class="params">(CustomerQueryDTO dto)</span>&#123;</span><br><span class="line">        <span class="comment">// 统一参数处理：去掉空格、默认排序</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sortBy</span> <span class="operator">=</span> (dto.getSortBy() == <span class="literal">null</span>) ? <span class="string">&quot;created_at&quot;</span> : dto.getSortBy();</span><br><span class="line">        <span class="keyword">return</span> mapper.queryCustomers(dto.getName(), dto.getPhone(), dto.getStatus(),</span><br><span class="line">                                     dto.getCreatedAfter(), dto.getCreatedBefore(), sortBy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. DTO 层用于接收前端条件，避免直接使用 Map</span></span><br><span class="line"><span class="comment">// 2. Service 层可统一处理默认值与参数格式化</span></span><br><span class="line"><span class="comment">// 3. Mapper 中的动态 SQL 完全基于条件字段生成最终 SQL</span></span><br><span class="line"><span class="comment">// 4. 易于扩展：增加字段仅需在 Mapper 和 DTO 增加属性</span></span><br><span class="line"><span class="comment">// 5. 提高安全性：使用 #&#123;param&#125; 防止 SQL 注入</span></span><br></pre></td></tr></table></figure><h2 id="分页与性能优化"><a href="#分页与性能优化" class="headerlink" title="分页与性能优化"></a>分页与性能优化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&#123;</span></span><br><span class="line"><span class="meta">        &quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;SELECT id, name, phone, status FROM customer&quot;,</span></span><br><span class="line"><span class="meta">        &quot;WHERE 1=1&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=&#x27;name != null&#x27;&gt; AND name LIKE CONCAT(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;ORDER BY created_at DESC&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;/script&gt;&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(property=&quot;id&quot;, column=&quot;id&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property=&quot;name&quot;, column=&quot;name&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property=&quot;phone&quot;, column=&quot;phone&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property=&quot;status&quot;, column=&quot;status&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;Customer&gt; <span class="title function_">queryWithPagination</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Param(&quot;offset&quot;)</span> <span class="type">int</span> offset,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Param(&quot;limit&quot;)</span> <span class="type">int</span> limit)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Customer&gt; <span class="title function_">getPage</span><span class="params">(String name, <span class="type">int</span> page, <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> (page - <span class="number">1</span>) * pageSize;</span><br><span class="line">        <span class="keyword">return</span> mapper.queryWithPagination(name, offset, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. SQL 分页通过 offset/limit 控制返回记录</span></span><br><span class="line"><span class="comment">// 2. MyBatis XML/注解可灵活组合分页查询</span></span><br><span class="line"><span class="comment">// 3. 避免在 Java 层分页，提高数据库执行效率</span></span><br><span class="line"><span class="comment">// 4. 配合二级缓存，可提升查询性能</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL映射 </tag>
            
            <tag> 动态SQL </tag>
            
            <tag> 参数绑定 </tag>
            
            <tag> 学习心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 参数解析与全局异常处理</title>
      <link href="/myblog/2020/02/10/SpringMVC%20%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/myblog/2020/02/10/SpringMVC%20%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在大型业务系统中，Controller 层频繁接收各种 HTTP 请求。</span></span><br><span class="line"><span class="comment">// 每个请求都需要对参数进行校验，如果手动在每个接口里完成，会导致：</span></span><br><span class="line">    <span class="comment">// 1. 代码重复</span></span><br><span class="line">    <span class="comment">// 2. 逻辑分散</span></span><br><span class="line">    <span class="comment">// 3. 异常处理不统一</span></span><br><span class="line"><span class="comment">// 解决方案：</span></span><br><span class="line">    <span class="comment">// - 使用统一参数解析机制（HandlerMethodArgumentResolver）</span></span><br><span class="line">    <span class="comment">// - 使用全局异常处理（@RestControllerAdvice + @ExceptionHandler）</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC-调度链与参数解析"><a href="#SpringMVC-调度链与参数解析" class="headerlink" title="SpringMVC 调度链与参数解析"></a>SpringMVC 调度链与参数解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DispatcherServlet 调度流程：</span></span><br><span class="line">    <span class="comment">// 1. 接收 HTTP 请求</span></span><br><span class="line">    <span class="comment">// 2. 根据 HandlerMapping 查找对应的 Controller 方法</span></span><br><span class="line">    <span class="comment">// 3. 调用 HandlerAdapter 解析方法参数（核心：HandlerMethodArgumentResolver）</span></span><br><span class="line">    <span class="comment">// 4. 执行 Controller 方法</span></span><br><span class="line">    <span class="comment">// 5. ReturnValueHandler 处理返回值</span></span><br><span class="line">    <span class="comment">// 6. ViewResolver 渲染视图或返回 JSON</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HandlerMethodArgumentResolver 核心接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span>; <span class="comment">// 判断是否支持解析</span></span><br><span class="line">    Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, </span></span><br><span class="line"><span class="params">                           ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                           NativeWebRequest webRequest, </span></span><br><span class="line"><span class="params">                           WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception; <span class="comment">// 解析参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见默认解析器：</span></span><br><span class="line">    <span class="comment">// RequestParamMethodArgumentResolver: 解析 @RequestParam</span></span><br><span class="line">    <span class="comment">// PathVariableMethodArgumentResolver: 解析 @PathVariable</span></span><br><span class="line">    <span class="comment">// RequestResponseBodyMethodProcessor: 解析 @RequestBody + JSON 转对象</span></span><br><span class="line"><span class="comment">// 自定义解析器：</span></span><br><span class="line">    <span class="comment">// 通过 WebMvcConfigurer#addArgumentResolvers 注册</span></span><br><span class="line">    <span class="comment">// 优先级高于默认解析器</span></span><br></pre></td></tr></table></figure><h2 id="DTO-示例与参数校验（JSR-303）"><a href="#DTO-示例与参数校验（JSR-303）" class="headerlink" title="DTO 示例与参数校验（JSR-303）"></a>DTO 示例与参数校验（JSR-303）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerCreateReq</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1[3-9]\\d&#123;9&#125;$&quot;, message = &quot;手机号格式错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;年龄必须大于 0&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 150, message = &quot;年龄不能超过 150&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service 层示例，演示校验与异常抛出</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createCustomer</span><span class="params">(CustomerCreateReq req)</span>&#123;</span><br><span class="line">        <span class="comment">// 手动校验演示（可选）</span></span><br><span class="line">        <span class="keyword">if</span>(req.getName() == <span class="literal">null</span> || req.getName().isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟业务处理</span></span><br><span class="line">        saveToDatabase(req);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveToDatabase</span><span class="params">(CustomerCreateReq req)</span>&#123;</span><br><span class="line">        <span class="comment">// 假设 DAO 层插入数据库</span></span><br><span class="line">        <span class="comment">// jdbcTemplate.update(&quot;INSERT INTO customer(...) VALUES(...)&quot;, ...);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义业务异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">handleBusiness</span><span class="params">(BusinessException ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest()</span><br><span class="line">                             .body(Map.of(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;BUSINESS_ERROR&quot;</span>,<span class="string">&quot;msg&quot;</span>,ex.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数校验异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">handleValidation</span><span class="params">(MethodArgumentNotValidException ex)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> ex.getBindingResult()</span><br><span class="line">                       .getAllErrors()</span><br><span class="line">                       .stream()</span><br><span class="line">                       .map(DefaultMessageSourceResolvable::getDefaultMessage)</span><br><span class="line">                       .collect(Collectors.joining(<span class="string">&quot;; &quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest()</span><br><span class="line">                             .body(Map.of(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;VALIDATION_ERROR&quot;</span>,<span class="string">&quot;msg&quot;</span>,msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 系统通用异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">handleGeneric</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">                             .body(Map.of(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;INTERNAL_ERROR&quot;</span>,<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;系统内部错误&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理执行流程"><a href="#异常处理执行流程" class="headerlink" title="异常处理执行流程"></a>异常处理执行流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. DispatcherServlet 捕获 Controller 方法抛出的异常</span></span><br><span class="line"><span class="comment">// 2. 交由 @RestControllerAdvice 标注的 GlobalExceptionHandler 处理</span></span><br><span class="line"><span class="comment">// 3. 按照 @ExceptionHandler 的类型匹配处理方法</span></span><br><span class="line"><span class="comment">// 4. 返回统一 JSON 响应</span></span><br></pre></td></tr></table></figure><h2 id="技术分析与常见问题"><a href="#技术分析与常见问题" class="headerlink" title="技术分析与常见问题"></a>技术分析与常见问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 参数校验顺序</span></span><br><span class="line">    <span class="comment">// @Valid 注解在 HandlerMethodArgumentResolver 执行前触发</span></span><br><span class="line">    <span class="comment">// Bean Validation 自动校验 DTO 注解</span></span><br><span class="line"><span class="comment">// 2. 内部调用事务方法与异常捕获</span></span><br><span class="line">    <span class="comment">// Service 层若方法内部调用其他方法，异常需手动 propagate，否则可能被吞掉</span></span><br><span class="line"><span class="comment">// 3. 自定义解析器注意事项</span></span><br><span class="line">    <span class="comment">// 自定义解析器需实现 supportsParameter 与 resolveArgument</span></span><br><span class="line">    <span class="comment">// 保证线程安全，避免共享状态</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringMVC框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> 参数校验 </tag>
            
            <tag> 异常处理 </tag>
            
            <tag> HandlerMethodArgumentResolver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 分层架构与事务边界</title>
      <link href="/myblog/2020/01/15/SpringMVC%20%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E4%B8%8E%E4%BA%8B%E5%8A%A1%E8%BE%B9%E7%95%8C/"/>
      <url>/myblog/2020/01/15/SpringMVC%20%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E4%B8%8E%E4%BA%8B%E5%8A%A1%E8%BE%B9%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>单体系统业务逻辑耦合，难以维护。分层架构可以让业务逻辑、控制层和数据访问层清晰分离，便于测试和扩展。</p><h2 id="SpringMVC-调度链"><a href="#SpringMVC-调度链" class="headerlink" title="SpringMVC 调度链"></a>SpringMVC 调度链</h2><h3 id="DispatcherServlet-执行流程"><a href="#DispatcherServlet-执行流程" class="headerlink" title="DispatcherServlet 执行流程"></a>DispatcherServlet 执行流程</h3><ol><li><strong>接收请求</strong>：客户端请求到达 DispatcherServlet</li><li><strong>HandlerMapping 定位 Controller 方法</strong>：根据请求路径找到对应的处理方法</li><li><strong>HandlerAdapter 调用方法</strong>：通过适配器调用具体的 Controller 方法</li><li><strong>ReturnValueHandler 处理返回值</strong>：处理方法的返回值</li><li><strong>ViewResolver 渲染视图</strong>：解析视图并返回响应</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/customers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerService service;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerController</span><span class="params">(CustomerService service)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.service = service; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> CustomerDTO dto)</span> &#123;</span><br><span class="line">        service.createCustomer(dto);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerMapper mapper;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerService</span><span class="params">(CustomerMapper mapper)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.mapper = mapper; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createCustomer</span><span class="params">(CustomerDTO dto)</span> &#123;</span><br><span class="line">        validate(dto.getPhone());</span><br><span class="line">        mapper.insert(dto);</span><br><span class="line">        logCreation(dto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!phone.matches(<span class="string">&quot;^1[3-9]\\d&#123;9&#125;$&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid phone&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logCreation</span><span class="params">(CustomerDTO dto)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录创建日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mapper-层"><a href="#Mapper-层" class="headerlink" title="Mapper 层"></a>Mapper 层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO customer(name,phone) VALUES(#&#123;name&#125;,#&#123;phone&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(CustomerDTO dto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h2><h3 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h3><p>Spring 事务管理基于 AOP 代理机制：</p><ol><li><strong>AOP 代理拦截方法</strong>：Spring 创建代理对象拦截带有 <code>@Transactional</code> 注解的方法</li><li><strong>TransactionInterceptor 处理</strong>：调用事务拦截器处理事务逻辑</li><li><strong>事务执行流程</strong>：<ul><li><code>getTransaction()</code> - 获取事务</li><li>方法执行</li><li><code>commit/rollback</code> - 提交或回滚事务</li></ul></li></ol><h3 id="内部方法调用事务失效"><a href="#内部方法调用事务失效" class="headerlink" title="内部方法调用事务失效"></a>内部方法调用事务失效</h3><p><strong>问题</strong>：在同一个类中，非事务方法调用事务方法时，事务不会生效。</p><p><strong>原因</strong>：Spring 的 AOP 代理只能拦截外部调用，内部方法调用不会经过代理。</p><p><strong>解决方案</strong>：使用 <code>AopContext.currentProxy()</code> 获取当前代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 事务方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 非事务方法调用事务方法</span></span><br><span class="line">        <span class="type">CustomerService</span> <span class="variable">proxy</span> <span class="operator">=</span> (CustomerService) AopContext.currentProxy();</span><br><span class="line">        proxy.methodA(); <span class="comment">// 通过代理调用，事务生效</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h3><p><strong>@Valid + @RequestBody 机制</strong>：</p><ol><li><strong>HandlerMethodArgumentResolver 解析</strong>：Spring MVC 的参数解析器处理请求参数</li><li><strong>@Valid 触发校验</strong>：JSR-303 Bean Validation 进行参数校验</li><li><strong>校验失败处理</strong>：抛出 <code>MethodArgumentNotValidException</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/validate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">validate</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> CustomerDTO dto)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数校验通过后执行</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;Validation passed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">handleValidationException</span><span class="params">(MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理校验失败异常</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> ex.getBindingResult().getFieldErrors()</span><br><span class="line">            .stream()</span><br><span class="line">            .map(FieldError::getDefaultMessage)</span><br><span class="line">            .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().body(errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分层架构优势"><a href="#分层架构优势" class="headerlink" title="分层架构优势"></a>分层架构优势</h2><h3 id="1-职责分离"><a href="#1-职责分离" class="headerlink" title="1. 职责分离"></a>1. 职责分离</h3><ul><li><strong>Controller 层</strong>：处理 HTTP 请求和响应</li><li><strong>Service 层</strong>：处理业务逻辑</li><li><strong>Mapper&#x2F;Repository 层</strong>：处理数据访问</li></ul><h3 id="2-便于测试"><a href="#2-便于测试" class="headerlink" title="2. 便于测试"></a>2. 便于测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(MockitoExtension.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomerServiceTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> CustomerMapper customerMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> CustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCreateCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">CustomerDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerDTO</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;13800138000&quot;</span>);</span><br><span class="line">        <span class="keyword">when</span>(customerMapper.insert(dto)).thenReturn(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When</span></span><br><span class="line">        customerService.createCustomer(dto);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then</span></span><br><span class="line">        verify(customerMapper).insert(dto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-易于扩展"><a href="#3-易于扩展" class="headerlink" title="3. 易于扩展"></a>3. 易于扩展</h3><ul><li>新增功能时只需要在对应层添加代码</li><li>修改业务逻辑时不影响其他层</li><li>可以独立优化每一层的性能</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-事务边界控制"><a href="#1-事务边界控制" class="headerlink" title="1. 事务边界控制"></a>1. 事务边界控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 事务边界：整个订单创建过程</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">createOrder</span><span class="params">(OrderRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 验证库存</span></span><br><span class="line">        validateStock(request.getProductId(), request.getQuantity());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 创建订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> buildOrder(request);</span><br><span class="line">        order = orderRepository.save(order);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 扣减库存</span></span><br><span class="line">        inventoryService.reduceStock(request.getProductId(), request.getQuantity());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 发送通知</span></span><br><span class="line">        notificationService.sendOrderCreatedNotification(order);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-异常处理策略"><a href="#2-异常处理策略" class="headerlink" title="2. 异常处理策略"></a>2. 异常处理策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleBusinessException</span><span class="params">(BusinessException ex)</span> &#123;</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>();</span><br><span class="line">        error.setCode(<span class="string">&quot;BUSINESS_ERROR&quot;</span>);</span><br><span class="line">        error.setMessage(ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().body(error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleGenericException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>();</span><br><span class="line">        error.setCode(<span class="string">&quot;INTERNAL_ERROR&quot;</span>);</span><br><span class="line">        error.setMessage(<span class="string">&quot;系统内部错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringMVC框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> 三层分层架构 </tag>
            
            <tag> 事务管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
